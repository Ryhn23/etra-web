{"version":3,"file":"index-CRI3lV-H.js","sources":["../../../../../Framework/src/type/csmvector.ts","../../../../../Framework/src/type/csmstring.ts","../../../../../Framework/src/id/cubismid.ts","../../../../../Framework/src/id/cubismidmanager.ts","../../../../../Framework/src/math/cubismvector2.ts","../../../../../Framework/src/math/cubismmath.ts","../../../../../Framework/src/math/cubismmatrix44.ts","../../../../../Framework/src/type/csmrectf.ts","../../../../../Framework/src/utils/cubismdebug.ts","../../../../../Framework/src/rendering/cubismrenderer.ts","../../../../../Framework/src/type/csmmap.ts","../../../../../Framework/src/utils/cubismjsonextension.ts","../../../../../Framework/src/utils/cubismjson.ts","../../../../../Framework/src/live2dcubismframework.ts","../../src/lappdefine.ts","../../src/lapppal.ts","../../src/lappglmanager.ts","../../../../../Framework/src/cubismdefaultparameterid.ts","../../../../../Framework/src/icubismmodelsetting.ts","../../../../../Framework/src/cubismmodelsettingjson.ts","../../../../../Framework/src/effect/cubismbreath.ts","../../../../../Framework/src/effect/cubismeyeblink.ts","../../../../../Framework/src/effect/cubismpose.ts","../../../../../Framework/src/math/cubismmodelmatrix.ts","../../../../../Framework/src/math/cubismtargetpoint.ts","../../../../../Framework/src/motion/acubismmotion.ts","../../../../../Framework/src/motion/cubismexpressionmotion.ts","../../../../../Framework/src/motion/cubismmotionqueueentry.ts","../../../../../Framework/src/motion/cubismmotionqueuemanager.ts","../../../../../Framework/src/motion/cubismexpressionmotionmanager.ts","../../../../../Framework/src/motion/cubismmotioninternal.ts","../../../../../Framework/src/motion/cubismmotionjson.ts","../../../../../Framework/src/motion/cubismmotion.ts","../../../../../Framework/src/motion/cubismmotionmanager.ts","../../../../../Framework/src/physics/cubismphysicsinternal.ts","../../../../../Framework/src/physics/cubismphysicsjson.ts","../../../../../Framework/src/physics/cubismphysics.ts","../../../../../Framework/src/model/cubismmodel.ts","../../../../../Framework/src/rendering/cubismclippingmanager.ts","../../../../../Framework/src/rendering/cubismrendertarget_webgl.ts","../../../../../Framework/src/rendering/cubismshader_webgl.ts","../../../../../Framework/src/rendering/cubismrenderer_webgl.ts","../../../../../Framework/src/model/cubismmoc.ts","../../../../../Framework/src/model/cubismmodeluserdatajson.ts","../../../../../Framework/src/model/cubismmodeluserdata.ts","../../../../../Framework/src/model/cubismusermodel.ts","../../src/lappwavfilehandler.ts","../../src/lappmodel.ts","../../src/lapplive2dmanager.ts","../../src/lapptexturemanager.ts","../../../../../Framework/src/math/cubismviewmatrix.ts","../../src/lappsprite.ts","../../src/touchmanager.ts","../../src/lappview.ts","../../src/lappsubdelegate.ts","../../src/lappdelegate.ts","../../src/main.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * ベクター型（可変配列型）\n */\nexport class csmVector<T> {\n  /**\n   * 引数付きコンストラクタ\n   * @param iniitalCapacity 初期化後のキャパシティ。データサイズは_capacity * sizeof(T)\n   * @param zeroClear trueなら初期化時に確保した領域を0で埋める\n   */\n  constructor(initialCapacity = 0) {\n    if (initialCapacity < 1) {\n      this._ptr = [];\n      this._capacity = 0;\n      this._size = 0;\n    } else {\n      this._ptr = new Array(initialCapacity);\n      this._capacity = initialCapacity;\n      this._size = 0;\n    }\n  }\n\n  /**\n   * インデックスで指定した要素を返す\n   */\n  public at(index: number): T {\n    return this._ptr[index];\n  }\n\n  /**\n   * 要素をセット\n   * @param index 要素をセットするインデックス\n   * @param value セットする要素\n   */\n  public set(index: number, value: T): void {\n    this._ptr[index] = value;\n  }\n\n  /**\n   * コンテナを取得する\n   */\n  public get(offset = 0): T[] {\n    const ret: T[] = new Array<T>();\n    for (let i = offset; i < this._size; i++) {\n      ret.push(this._ptr[i]);\n    }\n    return ret;\n  }\n\n  /**\n   * pushBack処理、コンテナに新たな要素を追加する\n   * @param value PushBack処理で追加する値\n   */\n  public pushBack(value: T): void {\n    if (this._size >= this._capacity) {\n      this.prepareCapacity(\n        this._capacity == 0 ? csmVector.DefaultSize : this._capacity * 2\n      );\n    }\n\n    this._ptr[this._size++] = value;\n  }\n\n  /**\n   * コンテナの全要素を解放する\n   */\n  public clear(): void {\n    this._ptr.length = 0;\n    this._size = 0;\n  }\n\n  /**\n   * コンテナの要素数を返す\n   * @return コンテナの要素数\n   */\n  public getSize(): number {\n    return this._size;\n  }\n\n  /**\n   * コンテナの全要素に対して代入処理を行う\n   * @param newSize 代入処理後のサイズ\n   * @param value 要素に代入する値\n   */\n  public assign(newSize: number, value: T): void {\n    const curSize = this._size;\n\n    if (curSize < newSize) {\n      this.prepareCapacity(newSize); // capacity更新\n    }\n\n    for (let i = 0; i < newSize; i++) {\n      this._ptr[i] = value;\n    }\n\n    this._size = newSize;\n  }\n\n  /**\n   * サイズ変更\n   */\n  public resize(newSize: number, value: T = null): void {\n    this.updateSize(newSize, value, true);\n  }\n\n  /**\n   * サイズ変更\n   */\n  public updateSize(\n    newSize: number,\n    value: any = null,\n    callPlacementNew = true\n  ): void {\n    const curSize: number = this._size;\n\n    if (curSize < newSize) {\n      this.prepareCapacity(newSize); // capacity更新\n\n      if (callPlacementNew) {\n        for (let i: number = this._size; i < newSize; i++) {\n          if (typeof value == 'function') {\n            // new\n            this._ptr[i] = JSON.parse(JSON.stringify(new value()));\n          } // プリミティブ型なので値渡し\n          else {\n            this._ptr[i] = value;\n          }\n        }\n      } else {\n        for (let i: number = this._size; i < newSize; i++) {\n          this._ptr[i] = value;\n        }\n      }\n    } else {\n      // newSize <= this._size\n      //---\n      const sub = this._size - newSize;\n      this._ptr.splice(this._size - sub, sub); // 不要なので破棄する\n    }\n    this._size = newSize;\n  }\n\n  /**\n   * コンテナにコンテナ要素を挿入する\n   * @param position 挿入する位置\n   * @param begin 挿入するコンテナの開始位置\n   * @param end 挿入するコンテナの終端位置\n   */\n  public insert(\n    position: iterator<T>,\n    begin: iterator<T>,\n    end: iterator<T>\n  ): void {\n    let dstSi: number = position._index;\n    const srcSi: number = begin._index;\n    const srcEi: number = end._index;\n\n    const addCount: number = srcEi - srcSi;\n\n    this.prepareCapacity(this._size + addCount);\n\n    // 挿入用の既存データをシフトして隙間を作る\n    const addSize = this._size - dstSi;\n    if (addSize > 0) {\n      for (let i = 0; i < addSize; i++) {\n        this._ptr.splice(dstSi + i, 0, null);\n      }\n    }\n\n    for (let i: number = srcSi; i < srcEi; i++, dstSi++) {\n      this._ptr[dstSi] = begin._vector._ptr[i];\n    }\n\n    this._size = this._size + addCount;\n  }\n\n  /**\n   * コンテナからインデックスで指定した要素を削除する\n   * @param index インデックス値\n   * @return true 削除実行\n   * @return false 削除範囲外\n   */\n  public remove(index: number): boolean {\n    if (index < 0 || this._size <= index) {\n      return false; // 削除範囲外\n    }\n\n    this._ptr.splice(index, 1);\n    --this._size;\n\n    return true;\n  }\n\n  /**\n   * コンテナから要素を削除して他の要素をシフトする\n   * @param ite 削除する要素\n   */\n  public erase(ite: iterator<T>): iterator<T> {\n    const index: number = ite._index;\n    if (index < 0 || this._size <= index) {\n      return ite; // 削除範囲外\n    }\n\n    // 削除\n    this._ptr.splice(index, 1);\n    --this._size;\n\n    const ite2: iterator<T> = new iterator<T>(this, index); // 終了\n    return ite2;\n  }\n\n  /**\n   * コンテナのキャパシティを確保する\n   * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない.\n   */\n  public prepareCapacity(newSize: number): void {\n    if (newSize > this._capacity) {\n      if (this._capacity == 0) {\n        this._ptr = new Array(newSize);\n        this._capacity = newSize;\n      } else {\n        this._ptr.length = newSize;\n        this._capacity = newSize;\n      }\n    }\n  }\n\n  /**\n   * コンテナの先頭要素を返す\n   */\n  public begin(): iterator<T> {\n    const ite: iterator<T> =\n      this._size == 0 ? this.end() : new iterator<T>(this, 0);\n    return ite;\n  }\n\n  /**\n   * コンテナの終端要素を返す\n   */\n  public end(): iterator<T> {\n    const ite: iterator<T> = new iterator<T>(this, this._size);\n    return ite;\n  }\n\n  public getOffset(offset: number): csmVector<T> {\n    const newVector = new csmVector<T>();\n    newVector._ptr = this.get(offset);\n    newVector._size = this.get(offset).length;\n    newVector._capacity = this.get(offset).length;\n\n    return newVector;\n  }\n\n  _ptr: T[]; // コンテナの先頭アドレス\n  _size: number; // コンテナの要素数\n  _capacity: number; // コンテナのキャパシティ\n\n  static readonly DefaultSize = 10; // コンテナ初期化のデフォルトサイズ\n}\n\nexport class iterator<T> {\n  /**\n   * コンストラクタ\n   */\n  public constructor(v?: csmVector<T>, index?: number) {\n    this._vector = v != undefined ? v : null;\n    this._index = index != undefined ? index : 0;\n  }\n\n  /**\n   * 代入\n   */\n  public set(ite: iterator<T>): iterator<T> {\n    this._index = ite._index;\n    this._vector = ite._vector;\n    return this;\n  }\n\n  /**\n   * 前置き++演算\n   */\n  public preIncrement(): iterator<T> {\n    ++this._index;\n    return this;\n  }\n\n  /**\n   * 前置き--演算\n   */\n  public preDecrement(): iterator<T> {\n    --this._index;\n    return this;\n  }\n\n  /**\n   * 後置き++演算子\n   */\n  public increment(): iterator<T> {\n    const iteold = new iterator<T>(this._vector, this._index++); // 古い値を保存\n    return iteold;\n  }\n\n  /**\n   * 後置き--演算子\n   */\n  public decrement(): iterator<T> {\n    const iteold = new iterator<T>(this._vector, this._index--); // 古い値を保存\n    return iteold;\n  }\n\n  /**\n   * ptr\n   */\n  public ptr(): T {\n    return this._vector._ptr[this._index];\n  }\n\n  /**\n   * =演算子のオーバーロード\n   */\n  public substitution(ite: iterator<T>): iterator<T> {\n    this._index = ite._index;\n    this._vector = ite._vector;\n    return this;\n  }\n\n  /**\n   * !=演算子のオーバーロード\n   */\n  public notEqual(ite: iterator<T>): boolean {\n    return this._index != ite._index || this._vector != ite._vector;\n  }\n\n  _index: number; // コンテナのインデックス値\n  _vector: csmVector<T>; // コンテナ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './csmvector';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const csmVector = $.csmVector;\n  export type csmVector<T> = $.csmVector<T>;\n  export const iterator = $.iterator;\n  export type iterator<T> = $.iterator<T>;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * 文字列クラス。\n */\nexport class csmString {\n  /**\n   * 文字列を後方に追加する\n   *\n   * @param c 追加する文字列\n   * @return 更新された文字列\n   */\n  public append(c: string, length?: number): csmString {\n    this.s += length !== undefined ? c.substr(0, length) : c;\n\n    return this;\n  }\n\n  /**\n   * 文字サイズを拡張して文字を埋める\n   * @param length    拡張する文字数\n   * @param v         埋める文字\n   * @return 更新された文字列\n   */\n  public expansion(length: number, v: string): csmString {\n    for (let i = 0; i < length; i++) {\n      this.append(v);\n    }\n\n    return this;\n  }\n\n  /**\n   * 文字列の長さをバイト数で取得する\n   */\n  public getBytes(): number {\n    return encodeURIComponent(this.s).replace(/%../g, 'x').length;\n  }\n\n  /**\n   * 文字列の長さを返す\n   */\n  public getLength(): number {\n    return this.s.length;\n  }\n\n  /**\n   * 文字列比較 <\n   * @param s 比較する文字列\n   * @return true:    比較する文字列より小さい\n   * @return false:   比較する文字列より大きい\n   */\n  public isLess(s: csmString): boolean {\n    return this.s < s.s;\n  }\n\n  /**\n   * 文字列比較 >\n   * @param s 比較する文字列\n   * @return true:    比較する文字列より大きい\n   * @return false:   比較する文字列より小さい\n   */\n  public isGreat(s: csmString): boolean {\n    return this.s > s.s;\n  }\n\n  /**\n   * 文字列比較 ==\n   * @param s 比較する文字列\n   * @return true:    比較する文字列と等しい\n   * @return false:   比較する文字列と異なる\n   */\n  public isEqual(s: string): boolean {\n    return this.s == s;\n  }\n\n  /**\n   * 文字列が空かどうか\n   * @return true: 空の文字列\n   * @return false: 値が設定されている\n   */\n  public isEmpty(): boolean {\n    return this.s.length == 0;\n  }\n\n  /**\n   * 引数付きコンストラクタ\n   */\n  public constructor(s: string) {\n    this.s = s;\n  }\n\n  s: string;\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './csmstring';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const csmString = $.csmString;\n  export type csmString = $.csmString;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { csmString } from '../type/csmstring';\n\n/**\n * パラメータ名・パーツ名・Drawable名を保持\n *\n * パラメータ名・パーツ名・Drawable名を保持するクラス。\n *\n * @note 指定したID文字列からCubismIdを取得する際はこのクラスの生成メソッドを呼ばず、\n *       CubismIdManager().getId(id)を使用してください\n */\nexport class CubismId {\n  /**\n   * 内部で使用するCubismIdクラス生成メソッド\n   *\n   * @param id ID文字列\n   * @return CubismId\n   * @note 指定したID文字列からCubismIdを取得する際は\n   *       CubismIdManager().getId(id)を使用してください\n   */\n  public static createIdInternal(id: string | csmString) {\n    return new CubismId(id);\n  }\n\n  /**\n   * ID名を取得する\n   */\n  public getString(): csmString {\n    return this._id;\n  }\n\n  /**\n   * idを比較\n   * @param c 比較するid\n   * @return 同じならばtrue,異なっていればfalseを返す\n   */\n  public isEqual(c: string | csmString | CubismId): boolean {\n    if (typeof c === 'string') {\n      return this._id.isEqual(c);\n    } else if (c instanceof csmString) {\n      return this._id.isEqual(c.s);\n    } else if (c instanceof CubismId) {\n      return this._id.isEqual(c._id.s);\n    }\n    return false;\n  }\n\n  /**\n   * idを比較\n   * @param c 比較するid\n   * @return 同じならばtrue,異なっていればfalseを返す\n   */\n  public isNotEqual(c: string | csmString | CubismId): boolean {\n    if (typeof c == 'string') {\n      return !this._id.isEqual(c);\n    } else if (c instanceof csmString) {\n      return !this._id.isEqual(c.s);\n    } else if (c instanceof CubismId) {\n      return !this._id.isEqual(c._id.s);\n    }\n    return false;\n  }\n\n  /**\n   * プライベートコンストラクタ\n   *\n   * @note ユーザーによる生成は許可しません\n   */\n  private constructor(id: string | csmString) {\n    if (typeof id === 'string') {\n      this._id = new csmString(id);\n      return;\n    }\n\n    this._id = id;\n  }\n\n  private _id: csmString; // ID名\n}\n\nexport declare type CubismIdHandle = CubismId;\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismid';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismId = $.CubismId;\n  export type CubismId = $.CubismId;\n  export type CubismIdHandle = $.CubismIdHandle;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { csmString } from '../type/csmstring';\nimport { csmVector } from '../type/csmvector';\nimport { CubismId } from './cubismid';\n\n/**\n * ID名の管理\n *\n * ID名を管理する。\n */\nexport class CubismIdManager {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._ids = new csmVector<CubismId>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    for (let i = 0; i < this._ids.getSize(); ++i) {\n      this._ids.set(i, void 0);\n    }\n    this._ids = null;\n  }\n\n  /**\n   * ID名をリストから登録\n   *\n   * @param ids ID名リスト\n   * @param count IDの個数\n   */\n  public registerIds(ids: string[] | csmString[]): void {\n    for (let i = 0; i < ids.length; i++) {\n      this.registerId(ids[i]);\n    }\n  }\n\n  /**\n   * ID名を登録\n   *\n   * @param id ID名\n   */\n  public registerId(id: string | csmString): CubismId {\n    let result: CubismId = null;\n\n    if ('string' == typeof id) {\n      if ((result = this.findId(id)) != null) {\n        return result;\n      }\n\n      result = CubismId.createIdInternal(id);\n      this._ids.pushBack(result);\n    } else {\n      return this.registerId(id.s);\n    }\n\n    return result;\n  }\n\n  /**\n   * ID名からIDを取得する\n   *\n   * @param id ID名\n   */\n  public getId(id: csmString | string): CubismId {\n    return this.registerId(id);\n  }\n\n  /**\n   * ID名からIDの確認\n   *\n   * @return true 存在する\n   * @return false 存在しない\n   */\n  public isExist(id: csmString | string): boolean {\n    if ('string' == typeof id) {\n      return this.findId(id) != null;\n    }\n    return this.isExist(id.s);\n  }\n\n  /**\n   * ID名からIDを検索する。\n   *\n   * @param id ID名\n   * @return 登録されているID。なければNULL。\n   */\n  private findId(id: string): CubismId {\n    for (let i = 0; i < this._ids.getSize(); ++i) {\n      if (this._ids.at(i).getString().isEqual(id)) {\n        return this._ids.at(i);\n      }\n    }\n\n    return null;\n  }\n\n  private _ids: csmVector<CubismId>; // 登録されているIDのリスト\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismidmanager';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismIdManager = $.CubismIdManager;\n  export type CubismIdManager = $.CubismIdManager;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * 2次元ベクトル型\n *\n * 2次元ベクトル型の機能を提供する。\n */\nexport class CubismVector2 {\n  /**\n   * コンストラクタ\n   */\n  public constructor(\n    public x?: number,\n    public y?: number\n  ) {\n    this.x = x == undefined ? 0.0 : x;\n\n    this.y = y == undefined ? 0.0 : y;\n  }\n\n  /**\n   * ベクトルの加算\n   *\n   * @param vector2 加算するベクトル値\n   * @return 加算結果 ベクトル値\n   */\n  public add(vector2: CubismVector2): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\n    ret.x = this.x + vector2.x;\n    ret.y = this.y + vector2.y;\n    return ret;\n  }\n\n  /**\n   * ベクトルの減算\n   *\n   * @param vector2 減算するベクトル値\n   * @return 減算結果 ベクトル値\n   */\n  public substract(vector2: CubismVector2): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\n    ret.x = this.x - vector2.x;\n    ret.y = this.y - vector2.y;\n    return ret;\n  }\n\n  /**\n   * ベクトルの乗算\n   *\n   * @param vector2 乗算するベクトル値\n   * @return 乗算結果 ベクトル値\n   */\n  public multiply(vector2: CubismVector2): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\n    ret.x = this.x * vector2.x;\n    ret.y = this.y * vector2.y;\n    return ret;\n  }\n\n  /**\n   * ベクトルの乗算(スカラー)\n   *\n   * @param scalar 乗算するスカラー値\n   * @return 乗算結果 ベクトル値\n   */\n  public multiplyByScaler(scalar: number): CubismVector2 {\n    return this.multiply(new CubismVector2(scalar, scalar));\n  }\n\n  /**\n   * ベクトルの除算\n   *\n   * @param vector2 除算するベクトル値\n   * @return 除算結果 ベクトル値\n   */\n  public division(vector2: CubismVector2): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\n    ret.x = this.x / vector2.x;\n    ret.y = this.y / vector2.y;\n    return ret;\n  }\n\n  /**\n   * ベクトルの除算(スカラー)\n   *\n   * @param scalar 除算するスカラー値\n   * @return 除算結果 ベクトル値\n   */\n  public divisionByScalar(scalar: number): CubismVector2 {\n    return this.division(new CubismVector2(scalar, scalar));\n  }\n\n  /**\n   * ベクトルの長さを取得する\n   *\n   * @return ベクトルの長さ\n   */\n  public getLength(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  /**\n   * ベクトルの距離の取得\n   *\n   * @param a 点\n   * @return ベクトルの距離\n   */\n  public getDistanceWith(a: CubismVector2): number {\n    return Math.sqrt(\n      (this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y)\n    );\n  }\n\n  /**\n   * ドット積の計算\n   *\n   * @param a 値\n   * @return 結果\n   */\n  public dot(a: CubismVector2): number {\n    return this.x * a.x + this.y * a.y;\n  }\n\n  /**\n   * 正規化の適用\n   */\n  public normalize(): void {\n    const length: number = Math.pow(this.x * this.x + this.y * this.y, 0.5);\n\n    this.x = this.x / length;\n    this.y = this.y / length;\n  }\n\n  /**\n   * 等しさの確認（等しいか？）\n   *\n   * 値が等しいか？\n   *\n   * @param rhs 確認する値\n   * @return true 値は等しい\n   * @return false 値は等しくない\n   */\n  public isEqual(rhs: CubismVector2): boolean {\n    return this.x == rhs.x && this.y == rhs.y;\n  }\n\n  /**\n   * 等しさの確認（等しくないか？）\n   *\n   * 値が等しくないか？\n   *\n   * @param rhs 確認する値\n   * @return true 値は等しくない\n   * @return false 値は等しい\n   */\n  public isNotEqual(rhs: CubismVector2): boolean {\n    return !this.isEqual(rhs);\n  }\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismvector2';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismVector2 = $.CubismVector2;\n  export type CubismVector2 = $.CubismVector2;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismVector2 } from './cubismvector2';\n\n/**\n * 数値計算などに使用するユーティリティクラス\n */\nexport class CubismMath {\n  static readonly Epsilon: number = 0.00001;\n\n  /**\n   * 第一引数の値を最小値と最大値の範囲に収めた値を返す\n   *\n   * @param value 収められる値\n   * @param min   範囲の最小値\n   * @param max   範囲の最大値\n   * @return 最小値と最大値の範囲に収めた値\n   */\n  static range(value: number, min: number, max: number): number {\n    if (value < min) {\n      value = min;\n    } else if (value > max) {\n      value = max;\n    }\n\n    return value;\n  }\n\n  /**\n   * サイン関数の値を求める\n   *\n   * @param x 角度値（ラジアン）\n   * @return サイン関数sin(x)の値\n   */\n  static sin(x: number): number {\n    return Math.sin(x);\n  }\n\n  /**\n   * コサイン関数の値を求める\n   *\n   * @param x 角度値(ラジアン)\n   * @return コサイン関数cos(x)の値\n   */\n  static cos(x: number): number {\n    return Math.cos(x);\n  }\n\n  /**\n   * 値の絶対値を求める\n   *\n   * @param x 絶対値を求める値\n   * @return 値の絶対値\n   */\n  static abs(x: number): number {\n    return Math.abs(x);\n  }\n\n  /**\n   * 平方根(ルート)を求める\n   * @param x -> 平方根を求める値\n   * @return 値の平方根\n   */\n  static sqrt(x: number): number {\n    return Math.sqrt(x);\n  }\n\n  /**\n   * 立方根を求める\n   * @param x -> 立方根を求める値\n   * @return 値の立方根\n   */\n  static cbrt(x: number): number {\n    if (x === 0) {\n      return x;\n    }\n\n    let cx: number = x;\n    const isNegativeNumber: boolean = cx < 0;\n\n    if (isNegativeNumber) {\n      cx = -cx;\n    }\n\n    let ret: number;\n    if (cx === Infinity) {\n      ret = Infinity;\n    } else {\n      ret = Math.exp(Math.log(cx) / 3);\n      ret = (cx / (ret * ret) + 2 * ret) / 3;\n    }\n    return isNegativeNumber ? -ret : ret;\n  }\n\n  /**\n   * イージング処理されたサインを求める\n   * フェードイン・アウト時のイージングに利用できる\n   *\n   * @param value イージングを行う値\n   * @return イージング処理されたサイン値\n   */\n  static getEasingSine(value: number): number {\n    if (value < 0.0) {\n      return 0.0;\n    } else if (value > 1.0) {\n      return 1.0;\n    }\n\n    return 0.5 - 0.5 * this.cos(value * Math.PI);\n  }\n\n  /**\n   * 大きい方の値を返す\n   *\n   * @param left 左辺の値\n   * @param right 右辺の値\n   * @return 大きい方の値\n   */\n  static max(left: number, right: number): number {\n    return left > right ? left : right;\n  }\n\n  /**\n   * 小さい方の値を返す\n   *\n   * @param left  左辺の値\n   * @param right 右辺の値\n   * @return 小さい方の値\n   */\n  static min(left: number, right: number): number {\n    return left > right ? right : left;\n  }\n\n  public static clamp(val: number, min: number, max: number): number {\n    if (val < min) {\n      return min;\n    } else if (max < val) {\n      return max;\n    }\n    return val;\n  }\n\n  /**\n   * 角度値をラジアン値に変換する\n   *\n   * @param degrees   角度値\n   * @return 角度値から変換したラジアン値\n   */\n  static degreesToRadian(degrees: number): number {\n    return (degrees / 180.0) * Math.PI;\n  }\n\n  /**\n   * ラジアン値を角度値に変換する\n   *\n   * @param radian    ラジアン値\n   * @return ラジアン値から変換した角度値\n   */\n  static radianToDegrees(radian: number): number {\n    return (radian * 180.0) / Math.PI;\n  }\n\n  /**\n   * ２つのベクトルからラジアン値を求める\n   *\n   * @param from  始点ベクトル\n   * @param to    終点ベクトル\n   * @return ラジアン値から求めた方向ベクトル\n   */\n  static directionToRadian(from: CubismVector2, to: CubismVector2): number {\n    const q1: number = Math.atan2(to.y, to.x);\n    const q2: number = Math.atan2(from.y, from.x);\n\n    let ret: number = q1 - q2;\n\n    while (ret < -Math.PI) {\n      ret += Math.PI * 2.0;\n    }\n\n    while (ret > Math.PI) {\n      ret -= Math.PI * 2.0;\n    }\n\n    return ret;\n  }\n\n  /**\n   * ２つのベクトルから角度値を求める\n   *\n   * @param from  始点ベクトル\n   * @param to    終点ベクトル\n   * @return 角度値から求めた方向ベクトル\n   */\n  static directionToDegrees(from: CubismVector2, to: CubismVector2): number {\n    const radian: number = this.directionToRadian(from, to);\n    let degree: number = this.radianToDegrees(radian);\n\n    if (to.x - from.x > 0.0) {\n      degree = -degree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * ラジアン値を方向ベクトルに変換する。\n   *\n   * @param totalAngle    ラジアン値\n   * @return ラジアン値から変換した方向ベクトル\n   */\n\n  static radianToDirection(totalAngle: number): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2();\n\n    ret.x = this.sin(totalAngle);\n    ret.y = this.cos(totalAngle);\n\n    return ret;\n  }\n\n  /**\n   * 三次方程式の三次項の係数が0になったときに補欠的に二次方程式の解をもとめる。\n   * a * x^2 + b * x + c = 0\n   *\n   * @param   a -> 二次項の係数値\n   * @param   b -> 一次項の係数値\n   * @param   c -> 定数項の値\n   * @return  二次方程式の解\n   */\n  static quadraticEquation(a: number, b: number, c: number): number {\n    if (this.abs(a) < CubismMath.Epsilon) {\n      if (this.abs(b) < CubismMath.Epsilon) {\n        return -c;\n      }\n      return -c / b;\n    }\n\n    return -(b + this.sqrt(b * b - 4.0 * a * c)) / (2.0 * a);\n  }\n\n  /**\n   * カルダノの公式によってベジェのt値に該当する３次方程式の解を求める。\n   * 重解になったときには0.0～1.0の値になる解を返す。\n   *\n   * a * x^3 + b * x^2 + c * x + d = 0\n   *\n   * @param   a -> 三次項の係数値\n   * @param   b -> 二次項の係数値\n   * @param   c -> 一次項の係数値\n   * @param   d -> 定数項の値\n   * @return  0.0～1.0の間にある解\n   */\n  static cardanoAlgorithmForBezier(\n    a: number,\n    b: number,\n    c: number,\n    d: number\n  ): number {\n    if (this.abs(a) < CubismMath.Epsilon) {\n      return this.range(this.quadraticEquation(b, c, d), 0.0, 1.0);\n    }\n\n    const ba: number = b / a;\n    const ca: number = c / a;\n    const da: number = d / a;\n\n    const p: number = (3.0 * ca - ba * ba) / 3.0;\n    const p3: number = p / 3.0;\n    const q: number = (2.0 * ba * ba * ba - 9.0 * ba * ca + 27.0 * da) / 27.0;\n    const q2: number = q / 2.0;\n    const discriminant: number = q2 * q2 + p3 * p3 * p3;\n\n    const center = 0.5;\n    const threshold: number = center + 0.01;\n\n    if (discriminant < 0.0) {\n      const mp3: number = -p / 3.0;\n      const mp33: number = mp3 * mp3 * mp3;\n      const r: number = this.sqrt(mp33);\n      const t: number = -q / (2.0 * r);\n      const cosphi: number = this.range(t, -1.0, 1.0);\n      const phi: number = Math.acos(cosphi);\n      const crtr: number = this.cbrt(r);\n      const t1: number = 2.0 * crtr;\n\n      const root1: number = t1 * this.cos(phi / 3.0) - ba / 3.0;\n      if (this.abs(root1 - center) < threshold) {\n        return this.range(root1, 0.0, 1.0);\n      }\n\n      const root2: number =\n        t1 * this.cos((phi + 2.0 * Math.PI) / 3.0) - ba / 3.0;\n      if (this.abs(root2 - center) < threshold) {\n        return this.range(root2, 0.0, 1.0);\n      }\n\n      const root3: number =\n        t1 * this.cos((phi + 4.0 * Math.PI) / 3.0) - ba / 3.0;\n      return this.range(root3, 0.0, 1.0);\n    }\n\n    if (discriminant == 0.0) {\n      let u1: number;\n      if (q2 < 0.0) {\n        u1 = this.cbrt(-q2);\n      } else {\n        u1 = -this.cbrt(q2);\n      }\n\n      const root1: number = 2.0 * u1 - ba / 3.0;\n      if (this.abs(root1 - center) < threshold) {\n        return this.range(root1, 0.0, 1.0);\n      }\n\n      const root2: number = -u1 - ba / 3.0;\n      return this.range(root2, 0.0, 1.0);\n    }\n\n    const sd: number = this.sqrt(discriminant);\n    const u1: number = this.cbrt(sd - q2);\n    const v1: number = this.cbrt(sd + q2);\n    const root1: number = u1 - v1 - ba / 3.0;\n    return this.range(root1, 0.0, 1.0);\n  }\n\n  /**\n   * 浮動小数点の余りを求める。\n   *\n   * @param dividend 被除数（割られる値）\n   * @param divisor 除数（割る値）\n   * @return 余り\n   */\n  static mod(dividend: number, divisor: number): number {\n    if (\n      !isFinite(dividend) ||\n      divisor === 0 ||\n      isNaN(dividend) ||\n      isNaN(divisor)\n    ) {\n      console.warn(\n        `divided: ${dividend}, divisor: ${divisor} mod() returns 'NaN'.`\n      );\n      return NaN;\n    }\n\n    // 絶対値に変換する。\n    const absDividend = Math.abs(dividend);\n    const absDivisor = Math.abs(divisor);\n\n    // 絶対値で割り算する。\n    let result =\n      absDividend - Math.floor(absDividend / absDivisor) * absDivisor;\n\n    // 符号を被除数のものに指定する。\n    result *= Math.sign(dividend);\n    return result;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  private constructor() {}\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmath';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMath = $.CubismMath;\n  export type CubismMath = $.CubismMath;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMath } from './cubismmath';\n\n/**\n * 4x4の行列\n *\n * 4x4行列の便利クラス。\n */\nexport class CubismMatrix44 {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._tr = new Float32Array(16); // 4 * 4のサイズ\n    this.loadIdentity();\n  }\n\n  /**\n   * 受け取った２つの行列の乗算を行う。\n   *\n   * @param a 行列a\n   * @param b 行列b\n   *\n   * @return 乗算結果の行列\n   */\n  public static multiply(\n    a: Float32Array,\n    b: Float32Array,\n    dst: Float32Array\n  ): void {\n    const c: Float32Array = new Float32Array([\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0\n    ]);\n\n    const n = 4;\n\n    for (let i = 0; i < n; ++i) {\n      for (let j = 0; j < n; ++j) {\n        for (let k = 0; k < n; ++k) {\n          c[j + i * 4] += a[k + i * 4] * b[j + k * 4];\n        }\n      }\n    }\n\n    for (let i = 0; i < 16; ++i) {\n      dst[i] = c[i];\n    }\n  }\n\n  /**\n   * 単位行列に初期化する\n   */\n  public loadIdentity(): void {\n    const c: Float32Array = new Float32Array([\n      1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,\n      1.0\n    ]);\n\n    this.setMatrix(c);\n  }\n\n  /**\n   * 行列を設定\n   *\n   * @param tr 16個の浮動小数点数で表される4x4の行列\n   */\n  public setMatrix(tr: Float32Array): void {\n    for (let i = 0; i < 16; ++i) {\n      this._tr[i] = tr[i];\n    }\n  }\n\n  /**\n   * 行列を浮動小数点数の配列で取得\n   *\n   * @return 16個の浮動小数点数で表される4x4の行列\n   */\n  public getArray(): Float32Array {\n    return this._tr;\n  }\n\n  /**\n   * X軸の拡大率を取得\n   *\n   * @return X軸の拡大率\n   */\n  public getScaleX(): number {\n    return this._tr[0];\n  }\n\n  /**\n   * Y軸の拡大率を取得する\n   *\n   * @return Y軸の拡大率\n   */\n  public getScaleY(): number {\n    return this._tr[5];\n  }\n\n  /**\n   * X軸の移動量を取得\n   *\n   * @return X軸の移動量\n   */\n  public getTranslateX(): number {\n    return this._tr[12];\n  }\n\n  /**\n   * Y軸の移動量を取得\n   *\n   * @return Y軸の移動量\n   */\n  public getTranslateY(): number {\n    return this._tr[13];\n  }\n\n  /**\n   * X軸の値を現在の行列で計算\n   *\n   * @param src X軸の値\n   *\n   * @return 現在の行列で計算されたX軸の値\n   */\n  public transformX(src: number): number {\n    return this._tr[0] * src + this._tr[12];\n  }\n\n  /**\n   * Y軸の値を現在の行列で計算\n   *\n   * @param src Y軸の値\n   *\n   * @return 現在の行列で計算されたY軸の値\n   */\n  public transformY(src: number): number {\n    return this._tr[5] * src + this._tr[13];\n  }\n\n  /**\n   * X軸の値を現在の行列で逆計算\n   */\n  public invertTransformX(src: number): number {\n    return (src - this._tr[12]) / this._tr[0];\n  }\n\n  /**\n   * Y軸の値を現在の行列で逆計算\n   */\n  public invertTransformY(src: number): number {\n    return (src - this._tr[13]) / this._tr[5];\n  }\n\n  /**\n   * 現在の行列の位置を起点にして移動\n   *\n   * 現在の行列の位置を起点にして相対的に移動する。\n   *\n   * @param x X軸の移動量\n   * @param y Y軸の移動量\n   */\n  public translateRelative(x: number, y: number): void {\n    const tr1: Float32Array = new Float32Array([\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      x,\n      y,\n      0.0,\n      1.0\n    ]);\n\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\n  }\n\n  /**\n   * 現在の行列の位置を移動\n   *\n   * 現在の行列の位置を指定した位置へ移動する\n   *\n   * @param x X軸の移動量\n   * @param y y軸の移動量\n   */\n  public translate(x: number, y: number): void {\n    this._tr[12] = x;\n    this._tr[13] = y;\n  }\n\n  /**\n   * 現在の行列のX軸の位置を指定した位置へ移動する\n   *\n   * @param x X軸の移動量\n   */\n  public translateX(x: number): void {\n    this._tr[12] = x;\n  }\n\n  /**\n   * 現在の行列のY軸の位置を指定した位置へ移動する\n   *\n   * @param y Y軸の移動量\n   */\n  public translateY(y: number): void {\n    this._tr[13] = y;\n  }\n\n  /**\n   * 現在の行列の拡大率を相対的に設定する\n   *\n   * @param x X軸の拡大率\n   * @param y Y軸の拡大率\n   */\n  public scaleRelative(x: number, y: number): void {\n    const tr1: Float32Array = new Float32Array([\n      x,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      y,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0\n    ]);\n\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\n  }\n\n  /**\n   * 現在の行列の拡大率を指定した倍率に設定する\n   *\n   * @param x X軸の拡大率\n   * @param y Y軸の拡大率\n   */\n  public scale(x: number, y: number): void {\n    this._tr[0] = x;\n    this._tr[5] = y;\n  }\n\n  /**\n   * 引数で与えられた行列にこの行列を乗算する。\n   * (引数で与えられた行列) * (この行列)\n   *\n   * @note 関数名と実際の計算内容に乖離があるため、今後計算順が修正される可能性があります。\n   * @param m 行列\n   */\n  public multiplyByMatrix(m: CubismMatrix44): void {\n    CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);\n  }\n\n  /**\n   * 現在の行列の逆行列を求める。\n   *\n   * @return 現在の行列で計算された逆行列の値を返す\n   */\n  public getInvert(): CubismMatrix44 {\n    const r00 = this._tr[0];\n    const r10 = this._tr[1];\n    const r20 = this._tr[2];\n    const r01 = this._tr[4];\n    const r11 = this._tr[5];\n    const r21 = this._tr[6];\n    const r02 = this._tr[8];\n    const r12 = this._tr[9];\n    const r22 = this._tr[10];\n\n    const tx = this._tr[12];\n    const ty = this._tr[13];\n    const tz = this._tr[14];\n\n    const det =\n      r00 * (r11 * r22 - r12 * r21) -\n      r01 * (r10 * r22 - r12 * r20) +\n      r02 * (r10 * r21 - r11 * r20);\n\n    const dst = new CubismMatrix44();\n\n    if (CubismMath.abs(det) < CubismMath.Epsilon) {\n      dst.loadIdentity();\n      return dst;\n    }\n\n    const invDet = 1.0 / det;\n\n    const inv00 = (r11 * r22 - r12 * r21) * invDet;\n    const inv01 = -(r01 * r22 - r02 * r21) * invDet;\n    const inv02 = (r01 * r12 - r02 * r11) * invDet;\n    const inv10 = -(r10 * r22 - r12 * r20) * invDet;\n    const inv11 = (r00 * r22 - r02 * r20) * invDet;\n    const inv12 = -(r00 * r12 - r02 * r10) * invDet;\n    const inv20 = (r10 * r21 - r11 * r20) * invDet;\n    const inv21 = -(r00 * r21 - r01 * r20) * invDet;\n    const inv22 = (r00 * r11 - r01 * r10) * invDet;\n\n    dst._tr[0] = inv00;\n    dst._tr[1] = inv10;\n    dst._tr[2] = inv20;\n    dst._tr[3] = 0.0;\n    dst._tr[4] = inv01;\n    dst._tr[5] = inv11;\n    dst._tr[6] = inv21;\n    dst._tr[7] = 0.0;\n    dst._tr[8] = inv02;\n    dst._tr[9] = inv12;\n    dst._tr[10] = inv22;\n    dst._tr[11] = 0.0;\n\n    dst._tr[12] = -(inv00 * tx + inv01 * ty + inv02 * tz);\n    dst._tr[13] = -(inv10 * tx + inv11 * ty + inv12 * tz);\n    dst._tr[14] = -(inv20 * tx + inv21 * ty + inv22 * tz);\n    dst._tr[15] = 1.0;\n\n    return dst;\n  }\n\n  /**\n   * オブジェクトのコピーを生成する\n   */\n  public clone(): CubismMatrix44 {\n    const cloneMatrix: CubismMatrix44 = new CubismMatrix44();\n\n    for (let i = 0; i < this._tr.length; i++) {\n      cloneMatrix._tr[i] = this._tr[i];\n    }\n\n    return cloneMatrix;\n  }\n\n  protected _tr: Float32Array; // 4x4行列データ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmatrix44';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMatrix44 = $.CubismMatrix44;\n  export type CubismMatrix44 = $.CubismMatrix44;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * 矩形形状（座標・長さはfloat値）を定義するクラス\n */\nexport class csmRect {\n  /**\n   * コンストラクタ\n   * @param x 左端X座標\n   * @param y 上端Y座標\n   * @param w 幅\n   * @param h 高さ\n   */\n  public constructor(x?: number, y?: number, w?: number, h?: number) {\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n  }\n\n  /**\n   * 矩形中央のX座標を取得する\n   */\n  public getCenterX(): number {\n    return this.x + 0.5 * this.width;\n  }\n\n  /**\n   * 矩形中央のY座標を取得する\n   */\n  public getCenterY(): number {\n    return this.y + 0.5 * this.height;\n  }\n\n  /**\n   * 右側のX座標を取得する\n   */\n  public getRight(): number {\n    return this.x + this.width;\n  }\n\n  /**\n   * 下端のY座標を取得する\n   */\n  public getBottom(): number {\n    return this.y + this.height;\n  }\n\n  /**\n   * 矩形に値をセットする\n   * @param r 矩形のインスタンス\n   */\n  public setRect(r: csmRect): void {\n    this.x = r.x;\n    this.y = r.y;\n    this.width = r.width;\n    this.height = r.height;\n  }\n\n  /**\n   * 矩形中央を軸にして縦横を拡縮する\n   * @param w 幅方向に拡縮する量\n   * @param h 高さ方向に拡縮する量\n   */\n  public expand(w: number, h: number) {\n    this.x -= w;\n    this.y -= h;\n    this.width += w * 2.0;\n    this.height += h * 2.0;\n  }\n\n  public x: number; // 左端X座標\n  public y: number; // 上端Y座標\n  public width: number; // 幅\n  public height: number; // 高さ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './csmrectf';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const csmRect = $.csmRect;\n  export type csmRect = $.csmRect;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport {\n  CSM_LOG_LEVEL,\n  CSM_LOG_LEVEL_DEBUG,\n  CSM_LOG_LEVEL_ERROR,\n  CSM_LOG_LEVEL_INFO,\n  CSM_LOG_LEVEL_VERBOSE,\n  CSM_LOG_LEVEL_WARNING\n} from '../cubismframeworkconfig';\nimport { CubismFramework, LogLevel } from '../live2dcubismframework';\n\nexport const CubismLogPrint = (level: LogLevel, fmt: string, args: any[]) => {\n  CubismDebug.print(level, '[CSM]' + fmt, args);\n};\n\nexport const CubismLogPrintIn = (level: LogLevel, fmt: string, args: any[]) => {\n  CubismLogPrint(level, fmt + '\\n', args);\n};\n\nexport const CSM_ASSERT = (expr: any) => {\n  console.assert(expr);\n};\n\nexport let CubismLogVerbose: (fmt: string, ...args: any[]) => void;\nexport let CubismLogDebug: (fmt: string, ...args: any[]) => void;\nexport let CubismLogInfo: (fmt: string, ...args: any[]) => void;\nexport let CubismLogWarning: (fmt: string, ...args: any[]) => void;\nexport let CubismLogError: (fmt: string, ...args: any[]) => void;\n\nif (CSM_LOG_LEVEL <= CSM_LOG_LEVEL_VERBOSE) {\n  CubismLogVerbose = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Verbose, '[V]' + fmt, args);\n  };\n\n  CubismLogDebug = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Debug, '[D]' + fmt, args);\n  };\n\n  CubismLogInfo = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Info, '[I]' + fmt, args);\n  };\n\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\n  };\n\n  CubismLogError = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\n  };\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_DEBUG) {\n  CubismLogDebug = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Debug, '[D]' + fmt, args);\n  };\n\n  CubismLogInfo = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Info, '[I]' + fmt, args);\n  };\n\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\n  };\n\n  CubismLogError = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\n  };\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_INFO) {\n  CubismLogInfo = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Info, '[I]' + fmt, args);\n  };\n\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\n  };\n\n  CubismLogError = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\n  };\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_WARNING) {\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\n  };\n\n  CubismLogError = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\n  };\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_ERROR) {\n  CubismLogError = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\n  };\n}\n\n/**\n * デバッグ用のユーティリティクラス。\n * ログの出力、バイトのダンプなど\n */\nexport class CubismDebug {\n  /**\n   * ログを出力する。第一引数にログレベルを設定する。\n   * CubismFramework.initialize()時にオプションで設定されたログ出力レベルを下回る場合はログに出さない。\n   *\n   * @param logLevel ログレベルの設定\n   * @param format 書式付き文字列\n   * @param args 可変長引数\n   */\n  public static print(logLevel: LogLevel, format: string, args?: any[]): void {\n    // オプションで設定されたログ出力レベルを下回る場合はログに出さない\n    if (logLevel < CubismFramework.getLoggingLevel()) {\n      return;\n    }\n\n    const logPrint: Live2DCubismCore.csmLogFunction =\n      CubismFramework.coreLogFunction;\n\n    if (!logPrint) return;\n\n    const buffer: string = format.replace(/\\{(\\d+)\\}/g, (m, k) => {\n      return args[k];\n    });\n    logPrint(buffer);\n  }\n\n  /**\n   * データから指定した長さだけダンプ出力する。\n   * CubismFramework.initialize()時にオプションで設定されたログ出力レベルを下回る場合はログに出さない。\n   *\n   * @param logLevel ログレベルの設定\n   * @param data ダンプするデータ\n   * @param length ダンプする長さ\n   */\n  public static dumpBytes(\n    logLevel: LogLevel,\n    data: Uint8Array,\n    length: number\n  ): void {\n    for (let i = 0; i < length; i++) {\n      if (i % 16 == 0 && i > 0) this.print(logLevel, '\\n');\n      else if (i % 8 == 0 && i > 0) this.print(logLevel, '  ');\n      this.print(logLevel, '{0} ', [data[i] & 0xff]);\n    }\n\n    this.print(logLevel, '\\n');\n  }\n\n  /**\n   * private コンストラクタ\n   */\n  private constructor() {}\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismdebug';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismDebug = $.CubismDebug;\n  export type CubismDebug = $.CubismDebug;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMath } from '../math/cubismmath';\nimport { CubismMatrix44 } from '../math/cubismmatrix44';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmRect } from '../type/csmrectf';\nimport { ICubismClippingManager } from './cubismclippingmanager';\nimport { CubismLogInfo } from '../utils/cubismdebug';\n\n/**\n * モデル描画を処理するレンダラ\n *\n * サブクラスに環境依存の描画命令を記述する。\n */\nexport abstract class CubismRenderer {\n  /**\n   * レンダラのインスタンスを生成して取得する\n   *\n   * @return レンダラのインスタンス\n   */\n  public static create(): CubismRenderer {\n    return null;\n  }\n\n  /**\n   * レンダラのインスタンスを解放する\n   */\n  public static delete(renderer: CubismRenderer): void {\n    renderer = null;\n  }\n\n  /**\n   * レンダラの初期化処理を実行する\n   * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\n   *\n   * @param model モデルのインスタンス\n   */\n  public initialize(model: CubismModel): void {\n    this._model = model;\n\n    // ブレンドモード使用時は必ず高精細にする\n    if (model.isBlendModeEnabled()) {\n      this.useHighPrecisionMask(true);\n      CubismLogInfo(\n        'This model uses a high-resolution mask because it operates in blend mode.'\n      );\n    }\n  }\n\n  /**\n   * モデルを描画する\n   */\n  public drawModel(): void {\n    if (this.getModel() == null) return;\n\n    // NOTE: WebGL最適化のため、デフォルトではコメントアウト\n    //this.saveProfile();\n\n    this.doDrawModel();\n\n    // NOTE: WebGL最適化のため、デフォルトではコメントアウト\n    //this.restoreProfile();\n  }\n\n  /**\n   * Model-View-Projection 行列をセットする\n   * 配列は複製されるので、元の配列は外で破棄して良い\n   *\n   * @param matrix44 Model-View-Projection 行列\n   */\n  public setMvpMatrix(matrix44: CubismMatrix44): void {\n    this._mvpMatrix4x4.setMatrix(matrix44.getArray());\n  }\n\n  /**\n   * Model-View-Projection 行列を取得する\n   *\n   * @return Model-View-Projection 行列\n   */\n  public getMvpMatrix(): CubismMatrix44 {\n    return this._mvpMatrix4x4;\n  }\n\n  /**\n   * モデルの色をセットする\n   * 各色0.0~1.0の間で指定する（1.0が標準の状態）\n   *\n   * @param red 赤チャンネルの値\n   * @param green 緑チャンネルの値\n   * @param blue 青チャンネルの値\n   * @param alpha αチャンネルの値\n   */\n  public setModelColor(\n    red: number,\n    green: number,\n    blue: number,\n    alpha: number\n  ): void {\n    this._modelColor.r = CubismMath.clamp(red, 0.0, 1.0);\n    this._modelColor.g = CubismMath.clamp(green, 0.0, 1.0);\n    this._modelColor.b = CubismMath.clamp(blue, 0.0, 1.0);\n    this._modelColor.a = CubismMath.clamp(alpha, 0.0, 1.0);\n  }\n\n  /**\n   * モデルの色を取得する\n   * 各色0.0~1.0の間で指定する(1.0が標準の状態)\n   *\n   * @return RGBAのカラー情報\n   */\n  public getModelColor(): CubismTextureColor {\n    return JSON.parse(JSON.stringify(this._modelColor));\n  }\n\n  /**\n   * 透明度を考慮したモデルの色を計算する。\n   *\n   * @param opacity 透明度\n   *\n   * @return RGBAのカラー情報\n   */\n  getModelColorWithOpacity(opacity: number): CubismTextureColor {\n    const modelColorRGBA: CubismTextureColor = this.getModelColor();\n    modelColorRGBA.a *= opacity;\n    if (this.isPremultipliedAlpha()) {\n      modelColorRGBA.r *= modelColorRGBA.a;\n      modelColorRGBA.g *= modelColorRGBA.a;\n      modelColorRGBA.b *= modelColorRGBA.a;\n    }\n    return modelColorRGBA;\n  }\n\n  /**\n   * 乗算済みαの有効・無効をセットする\n   * 有効にするならtrue、無効にするならfalseをセットする\n   */\n  public setIsPremultipliedAlpha(enable: boolean): void {\n    this._isPremultipliedAlpha = enable;\n  }\n\n  /**\n   * 乗算済みαの有効・無効を取得する\n   * @return true 乗算済みのα有効\n   *         false 乗算済みのα無効\n   */\n  public isPremultipliedAlpha(): boolean {\n    return this._isPremultipliedAlpha;\n  }\n\n  /**\n   * カリング（片面描画）の有効・無効をセットする。\n   * 有効にするならtrue、無効にするならfalseをセットする\n   */\n  public setIsCulling(culling: boolean): void {\n    this._isCulling = culling;\n  }\n\n  /**\n   * カリング（片面描画）の有効・無効を取得する。\n   *\n   * @return true カリング有効\n   *         false カリング無効\n   */\n  public isCulling(): boolean {\n    return this._isCulling;\n  }\n\n  /**\n   * テクスチャの異方性フィルタリングのパラメータをセットする\n   * パラメータ値の影響度はレンダラの実装に依存する\n   *\n   * @param n パラメータの値\n   */\n  public setAnisotropy(n: number): void {\n    this._anisotropy = n;\n  }\n\n  /**\n   * テクスチャの異方性フィルタリングのパラメータをセットする\n   *\n   * @return 異方性フィルタリングのパラメータ\n   */\n  public getAnisotropy(): number {\n    return this._anisotropy;\n  }\n\n  /**\n   * レンダリングするモデルを取得する\n   *\n   * @return レンダリングするモデル\n   */\n  public getModel(): CubismModel {\n    return this._model;\n  }\n\n  /**\n   * マスク描画の方式を変更する。\n   * falseの場合、マスクを1枚のテクスチャに分割してレンダリングする（デフォルト）\n   * 高速だが、マスク個数の上限が36に限定され、質も荒くなる\n   * trueの場合、パーツ描画の前にその都度必要なマスクを描き直す\n   * レンダリング品質は高いが描画処理負荷は増す\n   *\n   * @param high 高精細マスクに切り替えるか？\n   */\n  public useHighPrecisionMask(high: boolean): void {\n    this._useHighPrecisionMask = high;\n  }\n\n  /**\n   * マスクの描画方式を取得する\n   *\n   * @return true 高精細方式\n   *         false デフォルト\n   */\n  public isUsingHighPrecisionMask(): boolean {\n    return this._useHighPrecisionMask;\n  }\n\n  /**\n   * モデルを描画したバッファのサイズを設定\n   *\n   * @param[in]   width  -> モデルを描画したバッファの幅\n   * @param[in]   height -> モデルを描画したバッファの高さ\n   */\n  public setRenderTargetSize(width: number, height: number): void {\n    this._modelRenderTargetWidth = width;\n    this._modelRenderTargetHeight = height;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  protected constructor(width: number, height: number) {\n    this._modelRenderTargetWidth = width;\n    this._modelRenderTargetHeight = height;\n    this._isCulling = false;\n    this._isPremultipliedAlpha = false;\n    this._anisotropy = 0.0;\n    this._model = null;\n    this._modelColor = new CubismTextureColor();\n    this._useHighPrecisionMask = false;\n\n    // 単位行列に初期化\n    this._mvpMatrix4x4 = new CubismMatrix44();\n    this._mvpMatrix4x4.loadIdentity();\n  }\n\n  /**\n   * モデル描画直前のオフスクリーン設定を行う\n   */\n  public abstract beforeDrawModelRenderTarget(): void;\n\n  /**\n   * モデル描画直後のオフスクリーン設定を行う\n   */\n  public abstract afterDrawModelRenderTarget(): void;\n\n  /**\n   * モデル描画の実装\n   */\n  public abstract doDrawModel(): void;\n\n  /**\n   * モデル描画直前のレンダラのステートを保持する\n   */\n  protected abstract saveProfile(): void;\n\n  /**\n   * モデル描画直前のレンダラのステートを復帰する\n   */\n  protected abstract restoreProfile(): void;\n\n  /**\n   * レンダラが保持する静的なリソースを開放する\n   */\n  public static staticRelease: any;\n\n  protected _mvpMatrix4x4: CubismMatrix44; // Model-View-Projection 行列\n  protected _modelColor: CubismTextureColor; // モデル自体のカラー（RGBA）\n  protected _isCulling: boolean; // カリングが有効ならtrue\n  protected _isPremultipliedAlpha: boolean; // 乗算済みαならtrue\n  protected _anisotropy: any; // テクスチャの異方性フィルタリングのパラメータ\n  protected _model: CubismModel; // レンダリング対象のモデル\n  protected _useHighPrecisionMask: boolean; // falseの場合、マスクを纏めて描画する trueの場合、マスクはパーツ描画ごとに書き直す\n\n  protected _modelRenderTargetWidth: number;\n  protected _modelRenderTargetHeight: number;\n}\n\nexport enum CubismBlendMode {\n  CubismBlendMode_Normal = 0, // 通常\n  CubismBlendMode_Additive = 1, // 加算\n  CubismBlendMode_Multiplicative = 2 // 乗算\n}\n\n/**\n * オブジェクトのタイプ\n */\nexport enum DrawableObjectType {\n  DrawableObjectType_Drawable = 0,\n  DrawableObjectType_Offscreen = 1\n}\n\n/**\n * テクスチャの色をRGBAで扱うためのクラス\n */\nexport class CubismTextureColor {\n  /**\n   * コンストラクタ\n   */\n  constructor(r = 1.0, g = 1.0, b = 1.0, a = 1.0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  r: number; // 赤チャンネル\n  g: number; // 緑チャンネル\n  b: number; // 青チャンネル\n  a: number; // αチャンネル\n}\n\n/**\n * エイリアスの描画対象のソート結果を管理するためのクラス\n */\nexport class DrawableSortItem {\n  /**\n   * コンストラクタ\n   * @param objectIndex オブジェクトのインデックス\n   * @param objectType オブジェクトのタイプ\n   * @param renderOrder 描画順\n   */\n  constructor(\n    objectIndex: number,\n    objectType: DrawableObjectType,\n    renderOrder: number\n  ) {\n    this.objectIndex = objectIndex;\n    this.objectType = objectType;\n    this.renderOrder = renderOrder;\n  }\n\n  objectIndex: number;\n  objectType: DrawableObjectType;\n  renderOrder: number;\n}\n\n/**\n * クリッピングマスクのコンテキスト\n */\nexport abstract class CubismClippingContext {\n  /**\n   * 引数付きコンストラクタ\n   */\n  public constructor(clippingDrawableIndices: Int32Array, clipCount: number) {\n    // クリップしている（＝マスク用の）Drawableのインデックスリスト\n    this._clippingIdList = clippingDrawableIndices;\n\n    // マスクの数\n    this._clippingIdCount = clipCount;\n\n    this._allClippedDrawRect = new csmRect();\n    this._layoutBounds = new csmRect();\n\n    this._clippedDrawableIndexList = [];\n    this._clippedOffscreenIndexList = [];\n\n    this._matrixForMask = new CubismMatrix44();\n    this._matrixForDraw = new CubismMatrix44();\n\n    this._bufferIndex = 0;\n    this._layoutChannelIndex = 0;\n  }\n\n  /**\n   * このマスクを管理するマネージャのインスタンスを取得する\n   * @return クリッピングマネージャのインスタンス\n   */\n  public abstract getClippingManager(): ICubismClippingManager;\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    if (this._layoutBounds != null) {\n      this._layoutBounds = null;\n    }\n\n    if (this._allClippedDrawRect != null) {\n      this._allClippedDrawRect = null;\n    }\n\n    if (this._clippedDrawableIndexList != null) {\n      this._clippedDrawableIndexList = null;\n    }\n    if (this._clippedOffscreenIndexList != null) {\n      this._clippedOffscreenIndexList = null;\n    }\n  }\n\n  /**\n   * このマスクにクリップされる描画オブジェクトを追加する\n   *\n   * @param drawableIndex クリッピング対象に追加する描画オブジェクトのインデックス\n   */\n  public addClippedDrawable(drawableIndex: number) {\n    this._clippedDrawableIndexList.push(drawableIndex);\n  }\n\n  /**\n   * このマスクにクリップされるオフスクリーンオブジェクトを追加する\n   *\n   * @param offscreenIndex クリッピング対象に追加するオフスクリーンオブジェクトのインデックス\n   */\n  public addClippedOffscreen(offscreenIndex: number) {\n    this._clippedOffscreenIndexList.push(offscreenIndex);\n  }\n\n  public _isUsing: boolean; // 現在の描画状態でマスクの準備が必要ならtrue\n  public readonly _clippingIdList: Int32Array; // クリッピングマスクのIDリスト\n  public _clippingIdCount: number; // クリッピングマスクの数\n  public _layoutChannelIndex: number; // RGBAのいずれのチャンネルにこのクリップを配置するか（0:R, 1:G, 2:B, 3:A）\n  public _layoutBounds: csmRect; // マスク用チャンネルのどの領域にマスクを入れるか（View座標-1~1, UVは0~1に直す）\n  public _allClippedDrawRect: csmRect; // このクリッピングで、クリッピングされるすべての描画オブジェクトの囲み矩形（毎回更新）\n  public _matrixForMask: CubismMatrix44; // マスクの位置計算結果を保持する行列\n  public _matrixForDraw: CubismMatrix44; // 描画オブジェクトの位置計算結果を保持する行列\n  public _clippedDrawableIndexList: number[]; // このマスクにクリップされる描画オブジェクトのリスト\n  public _clippedOffscreenIndexList: number[]; // このマスクにクリップされるオフスクリーンオブジェクトのリスト\n  public _bufferIndex: number; // このマスクが割り当てられるレンダーテクスチャ（フレームバッファ）やカラーバッファのインデックス\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismrenderer';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismBlendMode = $.CubismBlendMode;\n  export type CubismBlendMode = $.CubismBlendMode;\n  export const CubismRenderer = $.CubismRenderer;\n  export type CubismRenderer = $.CubismRenderer;\n  export const CubismTextureColor = $.CubismTextureColor;\n  export type CubismTextureColor = $.CubismTextureColor;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismLogDebug, CubismLogWarning } from '../utils/cubismdebug';\n\n/**\n * Key-Valueのペアを定義するクラス\n * csmMapクラスの内部データで使用する。\n */\nexport class csmPair<_KeyT, _ValT> {\n  /**\n   * コンストラクタ\n   * @param key Keyとしてセットする値\n   * @param value Valueとしてセットする値\n   */\n  public constructor(key?: _KeyT, value?: _ValT) {\n    this.first = key == undefined ? null : key;\n\n    this.second = value == undefined ? null : value;\n  }\n\n  public first: _KeyT; // keyとして用いる変数\n  public second: _ValT; // valueとして用いる変数\n}\n\n/**\n * マップ型\n */\nexport class csmMap<_KeyT, _ValT> {\n  /**\n   * 引数付きコンストラクタ\n   * @param size 初期化時点で確保するサイズ\n   */\n  public constructor(size?: number) {\n    if (size != undefined) {\n      if (size < 1) {\n        this._keyValues = [];\n        this._dummyValue = null;\n        this._size = 0;\n      } else {\n        this._keyValues = new Array(size);\n        this._size = size;\n      }\n    } else {\n      this._keyValues = [];\n      this._dummyValue = null;\n      this._size = 0;\n    }\n  }\n\n  /**\n   * デストラクタ\n   */\n  public release() {\n    this.clear();\n  }\n\n  /**\n   * キーを追加する\n   * @param key 新たに追加するキー\n   */\n  public appendKey(key: _KeyT): void {\n    let findIndex = -1;\n    for (let i = 0; i < this._size; i++) {\n      if (this._keyValues[i].first == key) {\n        findIndex = i;\n        break;\n      }\n    }\n\n    // 同じkeyが既に作られている場合は何もしない\n    if (findIndex != -1) {\n      CubismLogWarning('The key `{0}` is already append.', key);\n      return;\n    }\n\n    // 新しくKey/Valueのペアを作る\n    this.prepareCapacity(this._size + 1, false); // 1つ以上入る隙間を作る\n    // 新しいkey/valueのインデックスは_size\n\n    this._keyValues[this._size] = new csmPair<_KeyT, _ValT>(key);\n    this._size += 1;\n  }\n\n  /**\n   * 添字演算子[key]のオーバーロード(get)\n   * @param key 添字から特定されるValue値\n   */\n  public getValue(key: _KeyT): _ValT {\n    let found = -1;\n\n    for (let i = 0; i < this._size; i++) {\n      if (this._keyValues[i].first == key) {\n        found = i;\n        break;\n      }\n    }\n\n    if (found >= 0) {\n      return this._keyValues[found].second;\n    } else {\n      this.appendKey(key); // 新規キーを追加\n      return this._keyValues[this._size - 1].second;\n    }\n  }\n\n  /**\n   * 添字演算子[key]のオーバーロード(set)\n   * @param key 添字から特定されるValue値\n   * @param value 代入するValue値\n   */\n  public setValue(key: _KeyT, value: _ValT): void {\n    let found = -1;\n\n    for (let i = 0; i < this._size; i++) {\n      if (this._keyValues[i].first == key) {\n        found = i;\n        break;\n      }\n    }\n\n    if (found >= 0) {\n      this._keyValues[found].second = value;\n    } else {\n      this.appendKey(key); // 新規キーを追加\n      this._keyValues[this._size - 1].second = value;\n    }\n  }\n\n  /**\n   * 引数で渡したKeyを持つ要素が存在するか\n   * @param key 存在を確認するkey\n   * @return true 引数で渡したkeyを持つ要素が存在する\n   * @return false 引数で渡したkeyを持つ要素が存在しない\n   */\n  public isExist(key: _KeyT): boolean {\n    for (let i = 0; i < this._size; i++) {\n      if (this._keyValues[i].first == key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * keyValueのポインタを全て解放する\n   */\n  public clear(): void {\n    this._keyValues = void 0;\n    this._keyValues = null;\n    this._keyValues = [];\n\n    this._size = 0;\n  }\n\n  /**\n   * コンテナのサイズを取得する\n   *\n   * @return コンテナのサイズ\n   */\n  public getSize(): number {\n    return this._size;\n  }\n\n  /**\n   * コンテナのキャパシティを確保する\n   * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない。\n   * @param fitToSize trueなら指定したサイズに合わせる。falseならサイズを2倍確保しておく。\n   */\n  public prepareCapacity(newSize: number, fitToSize: boolean): void {\n    if (newSize > this._keyValues.length) {\n      if (this._keyValues.length == 0) {\n        if (!fitToSize && newSize < csmMap.DefaultSize)\n          newSize = csmMap.DefaultSize;\n        this._keyValues.length = newSize;\n      } else {\n        if (!fitToSize && newSize < this._keyValues.length * 2)\n          newSize = this._keyValues.length * 2;\n        this._keyValues.length = newSize;\n      }\n    }\n  }\n\n  /**\n   * コンテナの先頭要素を返す\n   */\n  public begin(): iterator<_KeyT, _ValT> {\n    const ite: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(this, 0);\n    return ite;\n  }\n\n  /**\n   * コンテナの終端要素を返す\n   */\n  public end(): iterator<_KeyT, _ValT> {\n    const ite: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(\n      this,\n      this._size\n    ); // 終了\n    return ite;\n  }\n\n  /**\n   * コンテナから要素を削除する\n   *\n   * @param ite 削除する要素\n   */\n  public erase(ite: iterator<_KeyT, _ValT>): iterator<_KeyT, _ValT> {\n    const index: number = ite._index;\n    if (index < 0 || this._size <= index) {\n      return ite; // 削除範囲外\n    }\n\n    // 削除\n    this._keyValues.splice(index, 1);\n    --this._size;\n\n    const ite2: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(\n      this,\n      index\n    ); // 終了\n    return ite2;\n  }\n\n  /**\n   * コンテナの値を32ビット符号付き整数型でダンプする\n   */\n  public dumpAsInt() {\n    for (let i = 0; i < this._size; i++) {\n      CubismLogDebug('{0} ,', this._keyValues[i]);\n      CubismLogDebug('\\n');\n    }\n  }\n\n  public static readonly DefaultSize = 10; // コンテナの初期化のデフォルトサイズ\n  public _keyValues: csmPair<_KeyT, _ValT>[]; // key-valueペアの配列\n  public _dummyValue: _ValT; // 空の値を返す為のダミー\n  public _size: number; // コンテナの要素数\n}\n\n/**\n * csmMap<T>のイテレータ\n */\nexport class iterator<_KeyT, _ValT> {\n  /**\n   * コンストラクタ\n   */\n  constructor(v?: csmMap<_KeyT, _ValT>, idx?: number) {\n    this._map = v != undefined ? v : new csmMap<_KeyT, _ValT>();\n\n    this._index = idx != undefined ? idx : 0;\n  }\n\n  /**\n   * =演算子のオーバーロード\n   */\n  public set(ite: iterator<_KeyT, _ValT>): iterator<_KeyT, _ValT> {\n    this._index = ite._index;\n    this._map = ite._map;\n    return this;\n  }\n\n  /**\n   * 前置き++演算子のオーバーロード\n   */\n  public preIncrement(): iterator<_KeyT, _ValT> {\n    ++this._index;\n    return this;\n  }\n\n  /**\n   * 前置き--演算子のオーバーロード\n   */\n  public preDecrement(): iterator<_KeyT, _ValT> {\n    --this._index;\n    return this;\n  }\n\n  /**\n   * 後置き++演算子のオーバーロード\n   */\n  public increment(): iterator<_KeyT, _ValT> {\n    const iteold = new iterator<_KeyT, _ValT>(this._map, this._index++); // 古い値を保存\n    return iteold;\n  }\n\n  /**\n   * 後置き--演算子のオーバーロード\n   */\n  public decrement(): iterator<_KeyT, _ValT> {\n    const iteold = new iterator<_KeyT, _ValT>(this._map, this._index); // 古い値を保存\n    this._map = iteold._map;\n    this._index = iteold._index;\n    return this;\n  }\n\n  /**\n   * *演算子のオーバーロード\n   */\n  public ptr(): csmPair<_KeyT, _ValT> {\n    return this._map._keyValues[this._index];\n  }\n\n  /**\n   * !=演算\n   */\n  public notEqual(ite: iterator<_KeyT, _ValT>): boolean {\n    return this._index != ite._index || this._map != ite._map;\n  }\n\n  _index: number; // コンテナのインデックス値\n  _map: csmMap<_KeyT, _ValT>; // コンテナ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './csmmap';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const csmMap = $.csmMap;\n  export type csmMap<K, V> = $.csmMap<K, V>;\n  export const csmPair = $.csmPair;\n  export type csmPair<K, V> = $.csmPair<K, V>;\n  export const iterator = $.iterator;\n  export type iterator<K, V> = $.iterator<K, V>;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport {\n  JsonArray,\n  JsonBoolean,\n  JsonFloat,\n  JsonMap,\n  JsonNullvalue,\n  JsonString,\n  Value\n} from './cubismjson';\n\n/**\n * CubismJsonで実装されているJsonパーサを使用せず、\n * TypeScript標準のJsonパーサなどを使用し出力された結果を\n * Cubism SDKで定義されているJSONエレメントの要素に\n * 置き換える処理をするクラス。\n */\nexport class CubismJsonExtension {\n  static parseJsonObject(obj: Value, map: JsonMap) {\n    Object.keys(obj).forEach(key => {\n      if (typeof obj[key] == 'boolean') {\n        const convValue = Boolean(obj[key]);\n        map.put(key, new JsonBoolean(convValue));\n      } else if (typeof obj[key] == 'string') {\n        const convValue = String(obj[key]);\n        map.put(key, new JsonString(convValue));\n      } else if (typeof obj[key] == 'number') {\n        const convValue = Number(obj[key]);\n        map.put(key, new JsonFloat(convValue));\n      } else if (obj[key] instanceof Array) {\n        // HACK: Array 単体で変換できないので unknown に変更してから Value にしている\n        map.put(\n          key,\n          CubismJsonExtension.parseJsonArray(obj[key] as unknown as Value)\n        );\n      } else if (obj[key] instanceof Object) {\n        map.put(\n          key,\n          CubismJsonExtension.parseJsonObject(obj[key], new JsonMap())\n        );\n      } else if (obj[key] == null) {\n        map.put(key, new JsonNullvalue());\n      } else {\n        // どれにも当てはまらない場合でも処理する\n        map.put(key, obj[key]);\n      }\n    });\n    return map;\n  }\n\n  protected static parseJsonArray(obj: Value) {\n    const arr = new JsonArray();\n    Object.keys(obj).forEach(key => {\n      const convKey = Number(key);\n      if (typeof convKey == 'number') {\n        if (typeof obj[key] == 'boolean') {\n          const convValue = Boolean(obj[key]);\n          arr.add(new JsonBoolean(convValue));\n        } else if (typeof obj[key] == 'string') {\n          const convValue = String(obj[key]);\n          arr.add(new JsonString(convValue));\n        } else if (typeof obj[key] == 'number') {\n          const convValue = Number(obj[key]);\n          arr.add(new JsonFloat(convValue));\n        } else if (obj[key] instanceof Array) {\n          // HACK: Array 単体で変換できないので unknown に変更してから Value にしている\n          arr.add(this.parseJsonArray(obj[key] as unknown as Value));\n        } else if (obj[key] instanceof Object) {\n          arr.add(this.parseJsonObject(obj[key], new JsonMap()));\n        } else if (obj[key] == null) {\n          arr.add(new JsonNullvalue());\n        } else {\n          // どれにも当てはまらない場合でも処理する\n          arr.add(obj[key]);\n        }\n      } else if (obj[key] instanceof Array) {\n        // HACK: Array 単体で変換できないので unknown に変更してから Value にしている\n        arr.add(this.parseJsonArray(obj[key] as unknown as Value));\n      } else if (obj[key] instanceof Object) {\n        arr.add(this.parseJsonObject(obj[key], new JsonMap()));\n      } else if (obj[key] == null) {\n        arr.add(new JsonNullvalue());\n      } else {\n        const convValue = Array(obj[key]);\n        // 配列ともObjectとも判定できなかった場合でも処理する\n        for (let i = 0; i < convValue.length; i++) {\n          arr.add(convValue[i]);\n        }\n      }\n    });\n    return arr;\n  }\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { strtod } from '../live2dcubismframework';\nimport { csmMap, iterator as csmMap_iterator } from '../type/csmmap';\nimport { csmString } from '../type/csmstring';\nimport { csmVector, iterator as csmVector_iterator } from '../type/csmvector';\nimport { CubismLogInfo } from './cubismdebug';\n\n// StaticInitializeNotForClientCall()で初期化する\nconst CSM_JSON_ERROR_TYPE_MISMATCH = 'Error: type mismatch';\nconst CSM_JSON_ERROR_INDEX_OF_BOUNDS = 'Error: index out of bounds';\n\n/**\n * パースしたJSONエレメントの要素の基底クラス。\n */\nexport abstract class Value {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {}\n\n  /**\n   * 要素を文字列型で返す(csmString型)\n   */\n  public abstract getString(defaultValue?: string, indent?: string): string;\n\n  /**\n   * 要素を文字列型で返す(string)\n   */\n  public getRawString(defaultValue?: string, indent?: string): string {\n    return this.getString(defaultValue, indent);\n  }\n\n  /**\n   * 要素を数値型で返す(number)\n   */\n  public toInt(defaultValue = 0): number {\n    return defaultValue;\n  }\n\n  /**\n   * 要素を数値型で返す(number)\n   */\n  public toFloat(defaultValue = 0): number {\n    return defaultValue;\n  }\n\n  /**\n   * 要素を真偽値で返す(boolean)\n   */\n  public toBoolean(defaultValue = false): boolean {\n    return defaultValue;\n  }\n\n  /**\n   * サイズを返す\n   */\n  public getSize(): number {\n    return 0;\n  }\n\n  /**\n   * 要素を配列で返す(Value[])\n   */\n  public getArray(defaultValue: Value[] = null): Value[] {\n    return defaultValue;\n  }\n\n  /**\n   * 要素をコンテナで返す(array)\n   */\n  public getVector(defaultValue = new csmVector<Value>()): csmVector<Value> {\n    return defaultValue;\n  }\n\n  /**\n   * 要素をマップで返す(csmMap<csmString, Value>)\n   */\n  public getMap(defaultValue?: csmMap<string, Value>): csmMap<string, Value> {\n    return defaultValue;\n  }\n\n  /**\n   * 添字演算子[index]\n   */\n  public getValueByIndex(index: number): Value {\n    return Value.errorValue.setErrorNotForClientCall(\n      CSM_JSON_ERROR_TYPE_MISMATCH\n    );\n  }\n\n  /**\n   * 添字演算子[string | csmString]\n   */\n  public getValueByString(s: string | csmString): Value {\n    return Value.nullValue.setErrorNotForClientCall(\n      CSM_JSON_ERROR_TYPE_MISMATCH\n    );\n  }\n\n  /**\n   * マップのキー一覧をコンテナで返す\n   *\n   * @return マップのキーの一覧\n   */\n  public getKeys(): csmVector<string> {\n    return Value.dummyKeys;\n  }\n\n  /**\n   * Valueの種類がエラー値ならtrue\n   */\n  public isError(): boolean {\n    return false;\n  }\n\n  /**\n   * Valueの種類がnullならtrue\n   */\n  public isNull(): boolean {\n    return false;\n  }\n\n  /**\n   * Valueの種類が真偽値ならtrue\n   */\n  public isBool(): boolean {\n    return false;\n  }\n\n  /**\n   * Valueの種類が数値型ならtrue\n   */\n  public isFloat(): boolean {\n    return false;\n  }\n\n  /**\n   * Valueの種類が文字列ならtrue\n   */\n  public isString(): boolean {\n    return false;\n  }\n\n  /**\n   * Valueの種類が配列ならtrue\n   */\n  public isArray(): boolean {\n    return false;\n  }\n\n  /**\n   * Valueの種類がマップ型ならtrue\n   */\n  public isMap(): boolean {\n    return false;\n  }\n\n  /**\n   * 引数の値と等しければtrue\n   */\n  public equals(value: csmString): boolean;\n  public equals(value: string): boolean;\n  public equals(value: number): boolean;\n  public equals(value: boolean): boolean;\n  public equals(value: any): boolean {\n    return false;\n  }\n\n  /**\n   * Valueの値が静的ならtrue、静的なら解放しない\n   */\n  public isStatic(): boolean {\n    return false;\n  }\n\n  /**\n   * Valueにエラー値をセットする\n   */\n  public setErrorNotForClientCall(errorStr: string): Value {\n    return JsonError.errorValue;\n  }\n\n  /**\n   * 初期化用メソッド\n   */\n  public static staticInitializeNotForClientCall(): void {\n    JsonBoolean.trueValue = new JsonBoolean(true);\n    JsonBoolean.falseValue = new JsonBoolean(false);\n    Value.errorValue = new JsonError('ERROR', true);\n    Value.nullValue = new JsonNullvalue();\n    Value.dummyKeys = new csmVector<string>();\n  }\n\n  /**\n   * リリース用メソッド\n   */\n  public static staticReleaseNotForClientCall(): void {\n    JsonBoolean.trueValue = null;\n    JsonBoolean.falseValue = null;\n    Value.errorValue = null;\n    Value.nullValue = null;\n    Value.dummyKeys = null;\n  }\n\n  protected _stringBuffer: string; // 文字列バッファ\n\n  private static dummyKeys: csmVector<string>; // ダミーキー\n\n  public static errorValue: Value; // 一時的な返り値として返すエラー。 CubismFramework::Disposeするまではdeleteしない\n  public static nullValue: Value; // 一時的な返り値として返すNULL。   CubismFramework::Disposeするまではdeleteしない\n\n  [key: string]: any; // 明示的に連想配列をany型で指定\n}\n\n/**\n * Ascii文字のみ対応した最小限の軽量JSONパーサ。\n * 仕様はJSONのサブセットとなる。\n * 設定ファイル(model3.json)などのロード用\n *\n * [未対応項目]\n * ・日本語などの非ASCII文字\n * ・eによる指数表現\n */\nexport class CubismJson {\n  /**\n   * コンストラクタ\n   */\n  public constructor(buffer?: ArrayBuffer, length?: number) {\n    this._error = null;\n    this._lineCount = 0;\n    this._root = null;\n\n    if (buffer != undefined) {\n      this.parseBytes(buffer, length, this._parseCallback);\n    }\n  }\n\n  /**\n   * バイトデータから直接ロードしてパースする\n   *\n   * @param buffer バッファ\n   * @param size バッファサイズ\n   * @return CubismJsonクラスのインスタンス。失敗したらNULL\n   */\n  public static create(buffer: ArrayBuffer, size: number) {\n    const json = new CubismJson();\n    const succeeded: boolean = json.parseBytes(\n      buffer,\n      size,\n      json._parseCallback\n    );\n\n    if (!succeeded) {\n      CubismJson.delete(json);\n      return null;\n    } else {\n      return json;\n    }\n  }\n\n  /**\n   * パースしたJSONオブジェクトの解放処理\n   *\n   * @param instance CubismJsonクラスのインスタンス\n   */\n  public static delete(instance: CubismJson) {\n    instance = null;\n  }\n\n  /**\n   * パースしたJSONのルート要素を返す\n   */\n  public getRoot(): Value {\n    return this._root;\n  }\n\n  /**\n   *  UnicodeのバイナリをStringに変換\n   *\n   * @param buffer 変換するバイナリデータ\n   * @return 変換後の文字列\n   */\n  public static arrayBufferToString(buffer: ArrayBuffer): string {\n    const uint8Array: Uint8Array = new Uint8Array(buffer);\n    let str = '';\n\n    for (let i = 0, len: number = uint8Array.length; i < len; ++i) {\n      str += '%' + this.pad(uint8Array[i].toString(16));\n    }\n\n    str = decodeURIComponent(str);\n    return str;\n  }\n\n  /**\n   * エンコード、パディング\n   */\n  private static pad(n: string): string {\n    return n.length < 2 ? '0' + n : n;\n  }\n\n  /**\n   * JSONのパースを実行する\n   * @param buffer    パース対象のデータバイト\n   * @param size      データバイトのサイズ\n   * return true : 成功\n   * return false: 失敗\n   */\n  public parseBytes(\n    buffer: ArrayBuffer,\n    size: number,\n    parseCallback?: parseJsonObject\n  ): boolean {\n    const endPos: number[] = new Array<number>(1); // 参照渡しにするため配列\n    const decodeBuffer: string = CubismJson.arrayBufferToString(buffer);\n\n    if (parseCallback == undefined) {\n      this._root = this.parseValue(decodeBuffer, size, 0, endPos);\n    } else {\n      // TypeScript標準のJSONパーサを使う\n      this._root = parseCallback(JSON.parse(decodeBuffer), new JsonMap());\n    }\n\n    if (this._error) {\n      let strbuf = '\\0';\n      strbuf = 'Json parse error : @line ' + (this._lineCount + 1) + '\\n';\n      this._root = new JsonString(strbuf);\n\n      CubismLogInfo('{0}', this._root.getRawString());\n      return false;\n    } else if (this._root == null) {\n      this._root = new JsonError(new csmString(this._error), false); // rootは解放されるのでエラーオブジェクトを別途作成する\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * パース時のエラー値を返す\n   */\n  public getParseError(): string {\n    return this._error;\n  }\n\n  /**\n   * ルート要素の次の要素がファイルの終端だったらtrueを返す\n   */\n  public checkEndOfFile(): boolean {\n    return this._root.getArray()[1].equals('EOF');\n  }\n\n  /**\n   * JSONエレメントからValue(float,String,Value*,Array,null,true,false)をパースする\n   * エレメントの書式に応じて内部でParseString(), ParseObject(), ParseArray()を呼ぶ\n   *\n   * @param   buffer      JSONエレメントのバッファ\n   * @param   length      パースする長さ\n   * @param   begin       パースを開始する位置\n   * @param   outEndPos   パース終了時の位置\n   * @return      パースから取得したValueオブジェクト\n   */\n  protected parseValue(\n    buffer: string,\n    length: number,\n    begin: number,\n    outEndPos: number[]\n  ) {\n    if (this._error) return null;\n\n    let o: Value = null;\n    let i: number = begin;\n    let f: number;\n\n    for (; i < length; i++) {\n      const c: string = buffer[i];\n      switch (c) {\n        case '-':\n        case '.':\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9': {\n          const afterString: string[] = new Array(1); // 参照渡しにするため\n          f = strtod(buffer.slice(i), afterString);\n          outEndPos[0] = buffer.indexOf(afterString[0]);\n          return new JsonFloat(f);\n        }\n        case '\"':\n          return new JsonString(\n            this.parseString(buffer, length, i + 1, outEndPos)\n          ); // \\\"の次の文字から\n        case '[':\n          o = this.parseArray(buffer, length, i + 1, outEndPos);\n          return o;\n        case '{':\n          o = this.parseObject(buffer, length, i + 1, outEndPos);\n          return o;\n        case 'n': // null以外にない\n          if (i + 3 < length) {\n            o = new JsonNullvalue(); // 解放できるようにする\n            outEndPos[0] = i + 4;\n          } else {\n            this._error = 'parse null';\n          }\n          return o;\n        case 't': // true以外にない\n          if (i + 3 < length) {\n            o = JsonBoolean.trueValue;\n            outEndPos[0] = i + 4;\n          } else {\n            this._error = 'parse true';\n          }\n          return o;\n        case 'f': // false以外にない\n          if (i + 4 < length) {\n            o = JsonBoolean.falseValue;\n            outEndPos[0] = i + 5;\n          } else {\n            this._error = \"illegal ',' position\";\n          }\n          return o;\n        case ',': // Array separator\n          this._error = \"illegal ',' position\";\n          return null;\n        case ']': // 不正な｝だがスキップする。配列の最後に不要な , があると思われる\n          outEndPos[0] = i; // 同じ文字を再処理\n          return null;\n        case '\\n':\n          this._lineCount++;\n        // falls through\n        case ' ':\n        case '\\t':\n        case '\\r':\n        default:\n          // スキップ\n          break;\n      }\n    }\n\n    this._error = 'illegal end of value';\n    return null;\n  }\n\n  /**\n   * 次の「\"」までの文字列をパースする。\n   *\n   * @param   string  ->  パース対象の文字列\n   * @param   length  ->  パースする長さ\n   * @param   begin   ->  パースを開始する位置\n   * @param  outEndPos   ->  パース終了時の位置\n   * @return      パースした文F字列要素\n   */\n  protected parseString(\n    string: string,\n    length: number,\n    begin: number,\n    outEndPos: number[]\n  ): string {\n    if (this._error) {\n      return null;\n    }\n\n    if (!string) {\n      this._error = 'string is null';\n      return null;\n    }\n\n    let i = begin;\n    let c: string, c2: string;\n    const ret: csmString = new csmString('');\n    let bufStart: number = begin; // sbufに登録されていない文字の開始位置\n\n    for (; i < length; i++) {\n      c = string[i];\n\n      switch (c) {\n        case '\"': {\n          // 終端の”、エスケープ文字は別に処理されるのでここに来ない\n          outEndPos[0] = i + 1; // ”の次の文字\n          ret.append(string.slice(bufStart), i - bufStart); // 前の文字までを登録する\n          return ret.s;\n        }\n        // falls through\n        case '//': {\n          // エスケープの場合\n          i++; // ２文字をセットで扱う\n\n          if (i - 1 > bufStart) {\n            ret.append(string.slice(bufStart), i - bufStart); // 前の文字までを登録する\n          }\n          bufStart = i + 1; // エスケープ（２文字)の次の文字から\n\n          if (i < length) {\n            c2 = string[i];\n\n            switch (c2) {\n              case '\\\\':\n                ret.expansion(1, '\\\\');\n                break;\n              case '\"':\n                ret.expansion(1, '\"');\n                break;\n              case '/':\n                ret.expansion(1, '/');\n                break;\n              case 'b':\n                ret.expansion(1, '\\b');\n                break;\n              case 'f':\n                ret.expansion(1, '\\f');\n                break;\n              case 'n':\n                ret.expansion(1, '\\n');\n                break;\n              case 'r':\n                ret.expansion(1, '\\r');\n                break;\n              case 't':\n                ret.expansion(1, '\\t');\n                break;\n              case 'u':\n                this._error = 'parse string/unicord escape not supported';\n                break;\n              default:\n                break;\n            }\n          } else {\n            this._error = 'parse string/escape error';\n          }\n        }\n        // falls through\n        default: {\n          break;\n        }\n      }\n    }\n\n    this._error = 'parse string/illegal end';\n    return null;\n  }\n\n  /**\n   * JSONのオブジェクトエレメントをパースしてValueオブジェクトを返す\n   *\n   * @param buffer    JSONエレメントのバッファ\n   * @param length    パースする長さ\n   * @param begin     パースを開始する位置\n   * @param outEndPos パース終了時の位置\n   * @return パースから取得したValueオブジェクト\n   */\n  protected parseObject(\n    buffer: string,\n    length: number,\n    begin: number,\n    outEndPos: number[]\n  ): Value {\n    if (this._error) {\n      return null;\n    }\n\n    if (!buffer) {\n      this._error = 'buffer is null';\n      return null;\n    }\n\n    const ret: JsonMap = new JsonMap();\n\n    // Key: Value\n    let key = '';\n    let i: number = begin;\n    let c = '';\n    const localRetEndPos2: number[] = Array(1);\n    let ok = false;\n\n    // , が続く限りループ\n    for (; i < length; i++) {\n      FOR_LOOP: for (; i < length; i++) {\n        c = buffer[i];\n\n        switch (c) {\n          case '\"':\n            key = this.parseString(buffer, length, i + 1, localRetEndPos2);\n            if (this._error) {\n              return null;\n            }\n\n            i = localRetEndPos2[0];\n            ok = true;\n            break FOR_LOOP; //-- loopから出る\n          case '}': // 閉じカッコ\n            outEndPos[0] = i + 1;\n            return ret; // 空\n          case ':':\n            this._error = \"illegal ':' position\";\n            break;\n          case '\\n':\n            this._lineCount++;\n          // falls through\n          default:\n            break; // スキップする文字\n        }\n      }\n      if (!ok) {\n        this._error = 'key not found';\n        return null;\n      }\n\n      ok = false;\n\n      // : をチェック\n      FOR_LOOP2: for (; i < length; i++) {\n        c = buffer[i];\n\n        switch (c) {\n          case ':':\n            ok = true;\n            i++;\n            break FOR_LOOP2;\n          case '}':\n            this._error = \"illegal '}' position\";\n            break;\n          // falls through\n          case '\\n':\n            this._lineCount++;\n          // case ' ': case '\\t' : case '\\r':\n          // falls through\n          default:\n            break; // スキップする文字\n        }\n      }\n\n      if (!ok) {\n        this._error = \"':' not found\";\n        return null;\n      }\n\n      // 値をチェック\n      const value: Value = this.parseValue(buffer, length, i, localRetEndPos2);\n      if (this._error) {\n        return null;\n      }\n\n      i = localRetEndPos2[0];\n\n      // ret.put(key, value);\n      ret.put(key, value);\n\n      FOR_LOOP3: for (; i < length; i++) {\n        c = buffer[i];\n\n        switch (c) {\n          case ',':\n            break FOR_LOOP3;\n          case '}':\n            outEndPos[0] = i + 1;\n            return ret; // 正常終了\n          case '\\n':\n            this._lineCount++;\n          // falls through\n          default:\n            break; // スキップ\n        }\n      }\n    }\n\n    this._error = 'illegal end of perseObject';\n    return null;\n  }\n\n  /**\n   * 次の「\"」までの文字列をパースする。\n   * @param buffer    JSONエレメントのバッファ\n   * @param length    パースする長さ\n   * @param begin     パースを開始する位置\n   * @param outEndPos パース終了時の位置\n   * @return パースから取得したValueオブジェクト\n   */\n  protected parseArray(\n    buffer: string,\n    length: number,\n    begin: number,\n    outEndPos: number[]\n  ): Value {\n    if (this._error) {\n      return null;\n    }\n\n    if (!buffer) {\n      this._error = 'buffer is null';\n      return null;\n    }\n\n    let ret: JsonArray = new JsonArray();\n\n    // key : value\n    let i: number = begin;\n    let c: string;\n    const localRetEndpos2: number[] = new Array(1);\n\n    // , が続く限りループ\n    for (; i < length; i++) {\n      // : をチェック\n      const value: Value = this.parseValue(buffer, length, i, localRetEndpos2);\n\n      if (this._error) {\n        return null;\n      }\n      i = localRetEndpos2[0];\n\n      if (value) {\n        ret.add(value);\n      }\n\n      // FOR_LOOP3:\n      // boolean breakflag = false;\n      FOR_LOOP: for (; i < length; i++) {\n        c = buffer[i];\n\n        switch (c) {\n          case ',':\n            // breakflag = true;\n            // break; // 次のKEY, VAlUEへ\n            break FOR_LOOP;\n          case ']':\n            outEndPos[0] = i + 1;\n            return ret; // 終了\n          case '\\n':\n            ++this._lineCount;\n          //case ' ': case '\\t': case '\\r':\n          // falls through\n          default:\n            break; // スキップ\n        }\n      }\n    }\n\n    ret = void 0;\n    this._error = 'illegal end of parseObject';\n    return null;\n  }\n\n  _parseCallback: parseJsonObject = CubismJsonExtension.parseJsonObject; // パース時に使う処理のコールバック関数\n\n  _error: string; // パース時のエラー\n  _lineCount: number; // エラー報告に用いる行数カウント\n  _root: Value; // パースされたルート要素\n}\n\ninterface parseJsonObject {\n  (obj: Value, map: JsonMap): JsonMap;\n}\n\n/**\n * パースしたJSONの要素をfloat値として扱う\n */\nexport class JsonFloat extends Value {\n  /**\n   * コンストラクタ\n   */\n  constructor(v: number) {\n    super();\n\n    this._value = v;\n  }\n\n  /**\n   * Valueの種類が数値型ならtrue\n   */\n  public isFloat(): boolean {\n    return true;\n  }\n\n  /**\n   * 要素を文字列で返す(csmString型)\n   */\n  public getString(defaultValue: string, indent: string): string {\n    const strbuf = '\\0';\n    this._value = parseFloat(strbuf);\n    this._stringBuffer = strbuf;\n\n    return this._stringBuffer;\n  }\n\n  /**\n   * 要素を数値型で返す(number)\n   */\n  public toInt(defaultValue = 0): number {\n    return parseInt(this._value.toString());\n  }\n\n  /**\n   * 要素を数値型で返す(number)\n   */\n  public toFloat(defaultValue = 0.0): number {\n    return this._value;\n  }\n\n  /**\n   * 引数の値と等しければtrue\n   */\n  public equals(value: csmString): boolean;\n  public equals(value: string): boolean;\n  public equals(value: number): boolean;\n  public equals(value: boolean): boolean;\n  public equals(value: any): boolean {\n    if ('number' === typeof value) {\n      // int\n      if (Math.round(value)) {\n        return false;\n      }\n      // float\n      else {\n        return value == this._value;\n      }\n    }\n    return false;\n  }\n\n  private _value: number; // JSON要素の値\n}\n\n/**\n * パースしたJSONの要素を真偽値として扱う\n */\nexport class JsonBoolean extends Value {\n  /**\n   * Valueの種類が真偽値ならtrue\n   */\n  public isBool(): boolean {\n    return true;\n  }\n\n  /**\n   * 要素を真偽値で返す(boolean)\n   */\n  public toBoolean(defaultValue = false): boolean {\n    return this._boolValue;\n  }\n\n  /**\n   * 要素を文字列で返す(csmString型)\n   */\n  public getString(defaultValue: string, indent: string): string {\n    this._stringBuffer = this._boolValue ? 'true' : 'false';\n\n    return this._stringBuffer;\n  }\n\n  /**\n   * 引数の値と等しければtrue\n   */\n  public equals(value: csmString): boolean;\n  public equals(value: string): boolean;\n  public equals(value: number): boolean;\n  public equals(value: boolean): boolean;\n  public equals(value: any): boolean {\n    if ('boolean' === typeof value) {\n      return value == this._boolValue;\n    }\n    return false;\n  }\n\n  /**\n   * Valueの値が静的ならtrue, 静的なら解放しない\n   */\n  public isStatic(): boolean {\n    return true;\n  }\n\n  /**\n   * 引数付きコンストラクタ\n   */\n  public constructor(v: boolean) {\n    super();\n\n    this._boolValue = v;\n  }\n\n  static trueValue: JsonBoolean; // true\n  static falseValue: JsonBoolean; // false\n\n  private _boolValue: boolean; // JSON要素の値\n}\n\n/**\n * パースしたJSONの要素を文字列として扱う\n */\nexport class JsonString extends Value {\n  /**\n   * 引数付きコンストラクタ\n   */\n  public constructor(s: string);\n  public constructor(s: csmString);\n  public constructor(s: any) {\n    super();\n\n    if ('string' === typeof s) {\n      this._stringBuffer = s;\n    }\n\n    if (s instanceof csmString) {\n      this._stringBuffer = s.s;\n    }\n  }\n\n  /**\n   * Valueの種類が文字列ならtrue\n   */\n  public isString(): boolean {\n    return true;\n  }\n\n  /**\n   * 要素を文字列で返す(csmString型)\n   */\n  public getString(defaultValue: string, indent: string): string {\n    return this._stringBuffer;\n  }\n\n  /**\n   * 引数の値と等しければtrue\n   */\n  public equals(value: csmString): boolean;\n  public equals(value: string): boolean;\n  public equals(value: number): boolean;\n  public equals(value: boolean): boolean;\n  public equals(value: any): boolean {\n    if ('string' === typeof value) {\n      return this._stringBuffer == value;\n    }\n\n    if (value instanceof csmString) {\n      return this._stringBuffer == value.s;\n    }\n\n    return false;\n  }\n}\n\n/**\n * JSONパース時のエラー結果。文字列型のようにふるまう\n */\nexport class JsonError extends JsonString {\n  /**\n   * Valueの値が静的ならtrue、静的なら解放しない\n   */\n  public isStatic(): boolean {\n    return this._isStatic;\n  }\n\n  /**\n   * エラー情報をセットする\n   */\n  public setErrorNotForClientCall(s: string): Value {\n    this._stringBuffer = s;\n    return this;\n  }\n\n  /**\n   * 引数付きコンストラクタ\n   */\n  public constructor(s: csmString | string, isStatic: boolean) {\n    if ('string' === typeof s) {\n      super(s);\n    } else {\n      super(s);\n    }\n    this._isStatic = isStatic;\n  }\n\n  /**\n   * Valueの種類がエラー値ならtrue\n   */\n  public isError(): boolean {\n    return true;\n  }\n\n  protected _isStatic: boolean; // 静的なValueかどうか\n}\n\n/**\n * パースしたJSONの要素をNULL値として持つ\n */\nexport class JsonNullvalue extends Value {\n  /**\n   * Valueの種類がNULL値ならtrue\n   */\n  public isNull(): boolean {\n    return true;\n  }\n\n  /**\n   * 要素を文字列で返す(csmString型)\n   */\n  public getString(defaultValue: string, indent: string): string {\n    return this._stringBuffer;\n  }\n\n  /**\n   * Valueの値が静的ならtrue, 静的なら解放しない\n   */\n  public isStatic(): boolean {\n    return true;\n  }\n\n  /**\n   * Valueにエラー値をセットする\n   */\n  public setErrorNotForClientCall(s: string): Value {\n    this._stringBuffer = s;\n    return JsonError.nullValue;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n\n    this._stringBuffer = 'NullValue';\n  }\n}\n\n/**\n * パースしたJSONの要素を配列として持つ\n */\nexport class JsonArray extends Value {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n    this._array = new csmVector<Value>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    for (\n      let ite: csmVector_iterator<Value> = this._array.begin();\n      ite.notEqual(this._array.end());\n      ite.preIncrement()\n    ) {\n      let v: Value = ite.ptr();\n\n      if (v && !v.isStatic()) {\n        v = void 0;\n        v = null;\n      }\n    }\n  }\n\n  /**\n   * Valueの種類が配列ならtrue\n   */\n  public isArray(): boolean {\n    return true;\n  }\n\n  /**\n   * 添字演算子[index]\n   */\n  public getValueByIndex(index: number): Value {\n    if (index < 0 || this._array.getSize() <= index) {\n      return Value.errorValue.setErrorNotForClientCall(\n        CSM_JSON_ERROR_INDEX_OF_BOUNDS\n      );\n    }\n\n    const v: Value = this._array.at(index);\n\n    if (v == null) {\n      return Value.nullValue;\n    }\n\n    return v;\n  }\n\n  /**\n   * 添字演算子[string | csmString]\n   */\n  public getValueByString(s: string | csmString): Value {\n    return Value.errorValue.setErrorNotForClientCall(\n      CSM_JSON_ERROR_TYPE_MISMATCH\n    );\n  }\n\n  /**\n   * 要素を文字列で返す(csmString型)\n   */\n  public getString(defaultValue: string, indent: string): string {\n    const stringBuffer: string = indent + '[\\n';\n\n    for (\n      let ite: csmVector_iterator<Value> = this._array.begin();\n      ite.notEqual(this._array.end());\n      ite.increment()\n    ) {\n      const v: Value = ite.ptr();\n      this._stringBuffer += indent + '' + v.getString(indent + ' ') + '\\n';\n    }\n\n    this._stringBuffer = stringBuffer + indent + ']\\n';\n\n    return this._stringBuffer;\n  }\n\n  /**\n   * 配列要素を追加する\n   * @param v 追加する要素\n   */\n  public add(v: Value): void {\n    this._array.pushBack(v);\n  }\n\n  /**\n   * 要素をコンテナで返す(csmVector<Value>)\n   */\n  public getVector(defaultValue: csmVector<Value> = null): csmVector<Value> {\n    return this._array;\n  }\n\n  /**\n   * 要素の数を返す\n   */\n  public getSize(): number {\n    return this._array.getSize();\n  }\n\n  private _array: csmVector<Value>; // JSON要素の値\n}\n\n/**\n * パースしたJSONの要素をマップとして持つ\n */\nexport class JsonMap extends Value {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n    this._map = new csmMap<string, Value>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    const ite: csmMap_iterator<string, Value> = this._map.begin();\n\n    while (ite.notEqual(this._map.end())) {\n      let v: Value = ite.ptr().second;\n\n      if (v && !v.isStatic()) {\n        v = void 0;\n        v = null;\n      }\n\n      ite.preIncrement();\n    }\n  }\n\n  /**\n   * Valueの値がMap型ならtrue\n   */\n  public isMap(): boolean {\n    return true;\n  }\n\n  /**\n   * 添字演算子[string | csmString]\n   */\n  public getValueByString(s: string | csmString): Value {\n    if (s instanceof csmString) {\n      const ret: Value = this._map.getValue(s.s);\n      if (ret == null) {\n        return Value.nullValue;\n      }\n      return ret;\n    }\n\n    for (\n      let iter: csmMap_iterator<string, Value> = this._map.begin();\n      iter.notEqual(this._map.end());\n      iter.preIncrement()\n    ) {\n      if (iter.ptr().first == s) {\n        if (iter.ptr().second == null) {\n          return Value.nullValue;\n        }\n        return iter.ptr().second;\n      }\n    }\n\n    return Value.nullValue;\n  }\n\n  /**\n   * 添字演算子[index]\n   */\n  public getValueByIndex(index: number): Value {\n    return Value.errorValue.setErrorNotForClientCall(\n      CSM_JSON_ERROR_TYPE_MISMATCH\n    );\n  }\n\n  /**\n   * 要素を文字列で返す(csmString型)\n   */\n  public getString(defaultValue: string, indent: string) {\n    this._stringBuffer = indent + '{\\n';\n\n    const ite: csmMap_iterator<string, Value> = this._map.begin();\n    while (ite.notEqual(this._map.end())) {\n      const key = ite.ptr().first;\n      const v: Value = ite.ptr().second;\n\n      this._stringBuffer +=\n        indent + ' ' + key + ' : ' + v.getString(indent + '   ') + ' \\n';\n      ite.preIncrement();\n    }\n\n    this._stringBuffer += indent + '}\\n';\n\n    return this._stringBuffer;\n  }\n\n  /**\n   * 要素をMap型で返す\n   */\n  public getMap(defaultValue?: csmMap<string, Value>): csmMap<string, Value> {\n    return this._map;\n  }\n\n  /**\n   * Mapに要素を追加する\n   */\n  public put(key: string, v: Value): void {\n    this._map.setValue(key, v);\n  }\n\n  /**\n   * Mapからキーのリストを取得する\n   */\n  public getKeys(): csmVector<string> {\n    if (!this._keys) {\n      this._keys = new csmVector<string>();\n\n      const ite: csmMap_iterator<string, Value> = this._map.begin();\n\n      while (ite.notEqual(this._map.end())) {\n        const key: string = ite.ptr().first;\n        this._keys.pushBack(key);\n        ite.preIncrement();\n      }\n    }\n    return this._keys;\n  }\n\n  /**\n   * Mapの要素数を取得する\n   */\n  public getSize(): number {\n    return this._keys.getSize();\n  }\n\n  private _map: csmMap<string, Value>; // JSON要素の値\n  private _keys: csmVector<string>; // JSON要素の値\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismjson';\nimport { CubismJsonExtension } from './cubismjsonextension';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismJson = $.CubismJson;\n  export type CubismJson = $.CubismJson;\n  export const JsonArray = $.JsonArray;\n  export type JsonArray = $.JsonArray;\n  export const JsonBoolean = $.JsonBoolean;\n  export type JsonBoolean = $.JsonBoolean;\n  export const JsonError = $.JsonError;\n  export type JsonError = $.JsonError;\n  export const JsonFloat = $.JsonFloat;\n  export type JsonFloat = $.JsonFloat;\n  export const JsonMap = $.JsonMap;\n  export type JsonMap = $.JsonMap;\n  export const JsonNullvalue = $.JsonNullvalue;\n  export type JsonNullvalue = $.JsonNullvalue;\n  export const JsonString = $.JsonString;\n  export type JsonString = $.JsonString;\n  export const Value = $.Value;\n  export type Value = $.Value;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdManager } from './id/cubismidmanager';\nimport { CubismRenderer } from './rendering/cubismrenderer';\nimport {\n  CSM_ASSERT,\n  CubismLogInfo,\n  CubismLogWarning\n} from './utils/cubismdebug';\nimport { Value } from './utils/cubismjson';\n\nexport function strtod(s: string, endPtr: string[]): number {\n  let index = 0;\n  for (let i = 1; ; i++) {\n    const testC: string = s.slice(i - 1, i);\n\n    // 指数・マイナスの可能性があるのでスキップする\n    if (testC == 'e' || testC == '-' || testC == 'E') {\n      continue;\n    } // 文字列の範囲を広げていく\n\n    const test: string = s.substring(0, i);\n    const number = Number(test);\n    if (isNaN(number)) {\n      // 数値として認識できなくなったので終了\n      break;\n    } // 最後に数値としてできたindexを格納しておく\n\n    index = i;\n  }\n  let d = parseFloat(s); // パースした数値\n\n  if (isNaN(d)) {\n    // 数値として認識できなくなったので終了\n    d = NaN;\n  }\n\n  endPtr[0] = s.slice(index); // 後続の文字列\n  return d;\n}\n\n// ファイルスコープの変数を初期化\n\nlet s_isStarted = false;\nlet s_isInitialized = false;\nlet s_option: Option = null;\nlet s_cubismIdManager: CubismIdManager = null;\n\n/**\n * Framework内で使う定数の宣言\n */\nexport const Constant = Object.freeze<Record<string, number>>({\n  vertexOffset: 0, // メッシュ頂点のオフセット値\n  vertexStep: 2 // メッシュ頂点のステップ値\n});\n\nexport function csmDelete<T>(address: T): void {\n  if (!address) {\n    return;\n  }\n\n  address = void 0;\n}\n\n/**\n * Live2D Cubism SDK Original Workflow SDKのエントリポイント\n * 利用開始時はCubismFramework.initialize()を呼び、CubismFramework.dispose()で終了する。\n */\nexport class CubismFramework {\n  /**\n   * Cubism FrameworkのAPIを使用可能にする。\n   *  APIを実行する前に必ずこの関数を実行すること。\n   *  一度準備が完了して以降は、再び実行しても内部処理がスキップされます。\n   *\n   * @param    option      Optionクラスのインスタンス\n   *\n   * @return   準備処理が完了したらtrueが返ります。\n   */\n  public static startUp(option: Option = null): boolean {\n    if (s_isStarted) {\n      CubismLogInfo('CubismFramework.startUp() is already done.');\n      return s_isStarted;\n    }\n\n    s_option = option;\n\n    if (s_option != null) {\n      Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);\n    }\n\n    s_isStarted = true;\n\n    // Live2D Cubism Coreバージョン情報を表示\n    if (s_isStarted) {\n      const version: number = Live2DCubismCore.Version.csmGetVersion();\n      const major: number = (version & 0xff000000) >> 24;\n      const minor: number = (version & 0x00ff0000) >> 16;\n      const patch: number = version & 0x0000ffff;\n      const versionNumber: number = version;\n\n      CubismLogInfo(\n        `Live2D Cubism Core version: {0}.{1}.{2} ({3})`,\n        ('00' + major).slice(-2),\n        ('00' + minor).slice(-2),\n        ('0000' + patch).slice(-4),\n        versionNumber\n      );\n    }\n\n    CubismLogInfo('CubismFramework.startUp() is complete.');\n\n    return s_isStarted;\n  }\n\n  /**\n   * StartUp()で初期化したCubismFrameworkの各パラメータをクリアします。\n   * Dispose()したCubismFrameworkを再利用する際に利用してください。\n   */\n  public static cleanUp(): void {\n    s_isStarted = false;\n    s_isInitialized = false;\n    s_option = null;\n    s_cubismIdManager = null;\n  }\n\n  /**\n   * Cubism Framework内のリソースを初期化してモデルを表示可能な状態にします。<br>\n   *     再度Initialize()するには先にDispose()を実行する必要があります。\n   *\n   * @param memorySize 初期化時メモリ量 [byte(s)]\n   *    複数モデル表示時などにモデルが更新されない際に使用してください。\n   *    指定する際は必ず1024*1024*16 byte(16MB)以上の値を指定してください。\n   *    それ以外はすべて1024*1024*16 byteに丸めます。\n   */\n  public static initialize(memorySize = 0): void {\n    CSM_ASSERT(s_isStarted);\n    if (!s_isStarted) {\n      CubismLogWarning('CubismFramework is not started.');\n      return;\n    }\n\n    // --- s_isInitializedによる連続初期化ガード ---\n    // 連続してリソース確保が行われないようにする。\n    // 再度Initialize()するには先にDispose()を実行する必要がある。\n    if (s_isInitialized) {\n      CubismLogWarning(\n        'CubismFramework.initialize() skipped, already initialized.'\n      );\n      return;\n    }\n\n    //---- static 初期化 ----\n    Value.staticInitializeNotForClientCall();\n\n    s_cubismIdManager = new CubismIdManager();\n\n    // --- HACK: 初期化時メモリ量の拡張(単位byte) ---\n    // 複数モデル表示時などにモデルが更新されない際に使用してください。\n    // 指定する際は必ず1024*1024*16 byte(16MB)以上の値を指定してください。\n    // それ以外はすべて1024*1024*16 byteに丸めます。\n    Live2DCubismCore.Memory.initializeAmountOfMemory(memorySize);\n\n    s_isInitialized = true;\n\n    CubismLogInfo('CubismFramework.initialize() is complete.');\n  }\n\n  /**\n   * Cubism Framework内の全てのリソースを解放します。\n   *      ただし、外部で確保されたリソースについては解放しません。\n   *      外部で適切に破棄する必要があります。\n   */\n  public static dispose(): void {\n    CSM_ASSERT(s_isStarted);\n    if (!s_isStarted) {\n      CubismLogWarning('CubismFramework is not started.');\n      return;\n    }\n\n    // --- s_isInitializedによる未初期化解放ガード ---\n    // dispose()するには先にinitialize()を実行する必要がある。\n    if (!s_isInitialized) {\n      // false...リソース未確保の場合\n      CubismLogWarning('CubismFramework.dispose() skipped, not initialized.');\n      return;\n    }\n\n    Value.staticReleaseNotForClientCall();\n\n    s_cubismIdManager.release();\n    s_cubismIdManager = null;\n\n    // レンダラの静的リソース（シェーダプログラム他）を解放する\n    CubismRenderer.staticRelease();\n\n    s_isInitialized = false;\n\n    CubismLogInfo('CubismFramework.dispose() is complete.');\n  }\n\n  /**\n   * Cubism FrameworkのAPIを使用する準備が完了したかどうか\n   * @return APIを使用する準備が完了していればtrueが返ります。\n   */\n  public static isStarted(): boolean {\n    return s_isStarted;\n  }\n\n  /**\n   * Cubism Frameworkのリソース初期化がすでに行われているかどうか\n   * @return リソース確保が完了していればtrueが返ります\n   */\n  public static isInitialized(): boolean {\n    return s_isInitialized;\n  }\n\n  /**\n   * Core APIにバインドしたログ関数を実行する\n   *\n   * @praram message ログメッセージ\n   */\n  public static coreLogFunction(message: string): void {\n    // Return if logging not possible.\n    if (!Live2DCubismCore.Logging.csmGetLogFunction()) {\n      return;\n    }\n\n    Live2DCubismCore.Logging.csmGetLogFunction()(message);\n  }\n\n  /**\n   * 現在のログ出力レベル設定の値を返す。\n   *\n   * @return  現在のログ出力レベル設定の値\n   */\n  public static getLoggingLevel(): LogLevel {\n    if (s_option != null) {\n      return s_option.loggingLevel;\n    }\n    return LogLevel.LogLevel_Off;\n  }\n\n  /**\n   * IDマネージャのインスタンスを取得する\n   * @return CubismManagerクラスのインスタンス\n   */\n  public static getIdManager(): CubismIdManager {\n    return s_cubismIdManager;\n  }\n\n  /**\n   * 静的クラスとして使用する\n   * インスタンス化させない\n   */\n  private constructor() {}\n}\n\nexport class Option {\n  logFunction: Live2DCubismCore.csmLogFunction; // ログ出力の関数オブジェクト\n  loggingLevel: LogLevel; // ログ出力レベルの設定\n}\n\n/**\n * ログ出力のレベル\n */\nexport enum LogLevel {\n  LogLevel_Verbose = 0, // 詳細ログ\n  LogLevel_Debug, // デバッグログ\n  LogLevel_Info, // Infoログ\n  LogLevel_Warning, // 警告ログ\n  LogLevel_Error, // エラーログ\n  LogLevel_Off // ログ出力無効\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './live2dcubismframework';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const Constant = $.Constant;\n  export const csmDelete = $.csmDelete;\n  export const CubismFramework = $.CubismFramework;\n  export type CubismFramework = $.CubismFramework;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { LogLevel } from '@framework/live2dcubismframework';\n\n/**\n * Sample Appで使用する定数\n */\n\n// Canvas width and height pixel values, or dynamic screen size ('auto').\nexport const CanvasSize: { width: number; height: number } | 'auto' = 'auto';\n\n// キャンバスの数\nexport const CanvasNum = 1;\n\n// 画面\nexport const ViewScale = 1.0;\nexport const ViewMaxScale = 2.0;\nexport const ViewMinScale = 0.8;\n\nexport const ViewLogicalLeft = -1.0;\nexport const ViewLogicalRight = 1.0;\nexport const ViewLogicalBottom = -1.0;\nexport const ViewLogicalTop = 1.0;\n\nexport const ViewLogicalMaxLeft = -2.0;\nexport const ViewLogicalMaxRight = 2.0;\nexport const ViewLogicalMaxBottom = -2.0;\nexport const ViewLogicalMaxTop = 2.0;\n\n// 相対パス\nexport const ResourcesPath = '../../Resources/';\n\n// モデルの後ろにある背景の画像ファイル\nexport const BackImageName = 'back_class_normal.png';\n\n// 歯車\nexport const GearImageName = 'icon_gear.png';\n\n// 終了ボタン\nexport const PowerImageName = 'CloseNormal.png';\n\n// モデル定義---------------------------------------------\n// モデルを配置したディレクトリ名の配列\n// ディレクトリ名とmodel3.jsonの名前を一致させておくこと\nexport const ModelDir: string[] = [\n  'Haru',\n  'Hiyori',\n  'Mark',\n  'Natori',\n  'Rice',\n  'Mao',\n  'Wanko',\n  'Ren'\n];\nexport const ModelDirSize: number = ModelDir.length;\n\n// 外部定義ファイル（json）と合わせる\nexport const MotionGroupIdle = 'Idle'; // アイドリング\nexport const MotionGroupTapBody = 'TapBody'; // 体をタップしたとき\n\n// 外部定義ファイル（json）と合わせる\nexport const HitAreaNameHead = 'Head';\nexport const HitAreaNameBody = 'Body';\n\n// モーションの優先度定数\nexport const PriorityNone = 0;\nexport const PriorityIdle = 1;\nexport const PriorityNormal = 2;\nexport const PriorityForce = 3;\n\n// MOC3の整合性検証オプション\nexport const MOCConsistencyValidationEnable = true;\n// motion3.jsonの整合性検証オプション\nexport const MotionConsistencyValidationEnable = true;\n\n// デバッグ用ログの表示オプション\nexport const DebugLogEnable = true;\nexport const DebugTouchLogEnable = false;\n\n// Frameworkから出力するログのレベル設定\nexport const CubismLoggingLevel: LogLevel = LogLevel.LogLevel_Verbose;\n\n// デフォルトのレンダーターゲットサイズ\nexport const RenderTargetWidth = 1900;\nexport const RenderTargetHeight = 1000;\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * プラットフォーム依存機能を抽象化する Cubism Platform Abstraction Layer.\n *\n * ファイル読み込みや時刻取得等のプラットフォームに依存する関数をまとめる。\n */\nexport class LAppPal {\n  /**\n   * ファイルをバイトデータとして読みこむ\n   *\n   * @param filePath 読み込み対象ファイルのパス\n   * @return\n   * {\n   *      buffer,   読み込んだバイトデータ\n   *      size        ファイルサイズ\n   * }\n   */\n  public static loadFileAsBytes(\n    filePath: string,\n    callback: (arrayBuffer: ArrayBuffer, size: number) => void\n  ): void {\n    fetch(filePath)\n      .then(response => response.arrayBuffer())\n      .then(arrayBuffer => callback(arrayBuffer, arrayBuffer.byteLength));\n  }\n\n  /**\n   * デルタ時間（前回フレームとの差分）を取得する\n   * @return デルタ時間[ms]\n   */\n  public static getDeltaTime(): number {\n    return this.deltaTime;\n  }\n\n  public static updateTime(): void {\n    this.currentFrame = Date.now();\n    this.deltaTime = (this.currentFrame - this.lastFrame) / 1000;\n    this.lastFrame = this.currentFrame;\n  }\n\n  /**\n   * メッセージを出力する\n   * @param message 文字列\n   */\n  public static printMessage(message: string): void {\n    console.log(message);\n  }\n\n  static lastUpdate = Date.now();\n\n  static currentFrame = 0.0;\n  static lastFrame = 0.0;\n  static deltaTime = 0.0;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * Cubism SDKのサンプルで使用するWebGLを管理するクラス\n */\nexport class LAppGlManager {\n  public constructor() {\n    this._gl = null;\n  }\n\n  public initialize(canvas: HTMLCanvasElement): boolean {\n    // glコンテキストを初期化\n    this._gl = canvas.getContext('webgl2');\n\n    if (!this._gl) {\n      // gl初期化失敗\n      alert('Cannot initialize WebGL. This browser does not support.');\n      this._gl = null;\n      // document.body.innerHTML =\n      //   'This browser does not support the <code>&lt;canvas&gt;</code> element.';\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * 解放する。\n   */\n  public release(): void {}\n\n  public getGl(): WebGLRenderingContext | WebGL2RenderingContext {\n    return this._gl;\n  }\n\n  private _gl: WebGLRenderingContext | WebGL2RenderingContext = null;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * @brief パラメータIDのデフォルト値を保持する定数<br>\n *         デフォルト値の仕様は以下のマニュアルに基づく<br>\n *         https://docs.live2d.com/cubism-editor-manual/standard-parametor-list/\n */\nexport const CubismDefaultParameterId = Object.freeze<Record<string, string>>({\n  // パーツID\n  HitAreaPrefix: 'HitArea',\n  HitAreaHead: 'Head',\n  HitAreaBody: 'Body',\n  PartsIdCore: 'Parts01Core',\n  PartsArmPrefix: 'Parts01Arm_',\n  PartsArmLPrefix: 'Parts01ArmL_',\n  PartsArmRPrefix: 'Parts01ArmR_',\n  // パラメータID\n  ParamAngleX: 'ParamAngleX',\n  ParamAngleY: 'ParamAngleY',\n  ParamAngleZ: 'ParamAngleZ',\n  ParamEyeLOpen: 'ParamEyeLOpen',\n  ParamEyeLSmile: 'ParamEyeLSmile',\n  ParamEyeROpen: 'ParamEyeROpen',\n  ParamEyeRSmile: 'ParamEyeRSmile',\n  ParamEyeBallX: 'ParamEyeBallX',\n  ParamEyeBallY: 'ParamEyeBallY',\n  ParamEyeBallForm: 'ParamEyeBallForm',\n  ParamBrowLY: 'ParamBrowLY',\n  ParamBrowRY: 'ParamBrowRY',\n  ParamBrowLX: 'ParamBrowLX',\n  ParamBrowRX: 'ParamBrowRX',\n  ParamBrowLAngle: 'ParamBrowLAngle',\n  ParamBrowRAngle: 'ParamBrowRAngle',\n  ParamBrowLForm: 'ParamBrowLForm',\n  ParamBrowRForm: 'ParamBrowRForm',\n  ParamMouthForm: 'ParamMouthForm',\n  ParamMouthOpenY: 'ParamMouthOpenY',\n  ParamCheek: 'ParamCheek',\n  ParamBodyAngleX: 'ParamBodyAngleX',\n  ParamBodyAngleY: 'ParamBodyAngleY',\n  ParamBodyAngleZ: 'ParamBodyAngleZ',\n  ParamBreath: 'ParamBreath',\n  ParamArmLA: 'ParamArmLA',\n  ParamArmRA: 'ParamArmRA',\n  ParamArmLB: 'ParamArmLB',\n  ParamArmRB: 'ParamArmRB',\n  ParamHandL: 'ParamHandL',\n  ParamHandR: 'ParamHandR',\n  ParamHairFront: 'ParamHairFront',\n  ParamHairSide: 'ParamHairSide',\n  ParamHairBack: 'ParamHairBack',\n  ParamHairFluffy: 'ParamHairFluffy',\n  ParamShoulderY: 'ParamShoulderY',\n  ParamBustX: 'ParamBustX',\n  ParamBustY: 'ParamBustY',\n  ParamBaseX: 'ParamBaseX',\n  ParamBaseY: 'ParamBaseY',\n  ParamNONE: 'NONE:'\n});\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismdefaultparameterid';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const HitAreaBody = $.CubismDefaultParameterId.HitAreaBody;\n  export const HitAreaHead = $.CubismDefaultParameterId.HitAreaHead;\n  export const HitAreaPrefix = $.CubismDefaultParameterId.HitAreaPrefix;\n  export const ParamAngleX = $.CubismDefaultParameterId.ParamAngleX;\n  export const ParamAngleY = $.CubismDefaultParameterId.ParamAngleY;\n  export const ParamAngleZ = $.CubismDefaultParameterId.ParamAngleZ;\n  export const ParamArmLA = $.CubismDefaultParameterId.ParamArmLA;\n  export const ParamArmLB = $.CubismDefaultParameterId.ParamArmLB;\n  export const ParamArmRA = $.CubismDefaultParameterId.ParamArmRA;\n  export const ParamArmRB = $.CubismDefaultParameterId.ParamArmRB;\n  export const ParamBaseX = $.CubismDefaultParameterId.ParamBaseX;\n  export const ParamBaseY = $.CubismDefaultParameterId.ParamBaseY;\n  export const ParamBodyAngleX = $.CubismDefaultParameterId.ParamBodyAngleX;\n  export const ParamBodyAngleY = $.CubismDefaultParameterId.ParamBodyAngleY;\n  export const ParamBodyAngleZ = $.CubismDefaultParameterId.ParamBodyAngleZ;\n  export const ParamBreath = $.CubismDefaultParameterId.ParamBreath;\n  export const ParamBrowLAngle = $.CubismDefaultParameterId.ParamBrowLAngle;\n  export const ParamBrowLForm = $.CubismDefaultParameterId.ParamBrowLForm;\n  export const ParamBrowLX = $.CubismDefaultParameterId.ParamBrowLX;\n  export const ParamBrowLY = $.CubismDefaultParameterId.ParamBrowLY;\n  export const ParamBrowRAngle = $.CubismDefaultParameterId.ParamBrowRAngle;\n  export const ParamBrowRForm = $.CubismDefaultParameterId.ParamBrowRForm;\n  export const ParamBrowRX = $.CubismDefaultParameterId.ParamBrowRX;\n  export const ParamBrowRY = $.CubismDefaultParameterId.ParamBrowRY;\n  export const ParamBustX = $.CubismDefaultParameterId.ParamBustX;\n  export const ParamBustY = $.CubismDefaultParameterId.ParamBustY;\n  export const ParamCheek = $.CubismDefaultParameterId.ParamCheek;\n  export const ParamEyeBallForm = $.CubismDefaultParameterId.ParamEyeBallForm;\n  export const ParamEyeBallX = $.CubismDefaultParameterId.ParamEyeBallX;\n  export const ParamEyeBallY = $.CubismDefaultParameterId.ParamEyeBallY;\n  export const ParamEyeLOpen = $.CubismDefaultParameterId.ParamEyeLOpen;\n  export const ParamEyeLSmile = $.CubismDefaultParameterId.ParamEyeLSmile;\n  export const ParamEyeROpen = $.CubismDefaultParameterId.ParamEyeROpen;\n  export const ParamEyeRSmile = $.CubismDefaultParameterId.ParamEyeRSmile;\n  export const ParamHairBack = $.CubismDefaultParameterId.ParamHairBack;\n  export const ParamHairFluffy = $.CubismDefaultParameterId.ParamHairFluffy;\n  export const ParamHairFront = $.CubismDefaultParameterId.ParamHairFront;\n  export const ParamHairSide = $.CubismDefaultParameterId.ParamHairSide;\n  export const ParamHandL = $.CubismDefaultParameterId.ParamHandL;\n  export const ParamHandR = $.CubismDefaultParameterId.ParamHandR;\n  export const ParamMouthForm = $.CubismDefaultParameterId.ParamMouthForm;\n  export const ParamMouthOpenY = $.CubismDefaultParameterId.ParamMouthOpenY;\n  export const ParamNONE = $.CubismDefaultParameterId.ParamNONE;\n  export const ParamShoulderY = $.CubismDefaultParameterId.ParamShoulderY;\n  export const PartsArmLPrefix = $.CubismDefaultParameterId.PartsArmLPrefix;\n  export const PartsArmPrefix = $.CubismDefaultParameterId.PartsArmPrefix;\n  export const PartsArmRPrefix = $.CubismDefaultParameterId.PartsArmRPrefix;\n  export const PartsIdCore = $.CubismDefaultParameterId.PartsIdCore;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from './id/cubismid';\nimport { csmMap } from './type/csmmap';\n\n/**\n * モデル設定情報を取り扱う関数を宣言した純粋仮想クラス。\n *\n * このクラスを継承することで、モデル設定情報を取り扱うクラスになる。\n */\nexport abstract class ICubismModelSetting {\n  /**\n   * Mocファイルの名前を取得する\n   * @return Mocファイルの名前\n   */\n  public abstract getModelFileName(): string;\n\n  /**\n   * モデルが使用するテクスチャの数を取得する\n   * テクスチャの数\n   */\n  public abstract getTextureCount(): number;\n\n  /**\n   * テクスチャが配置されたディレクトリの名前を取得する\n   * @return テクスチャが配置されたディレクトリの名前\n   */\n  public abstract getTextureDirectory(): string;\n\n  /**\n   * モデルが使用するテクスチャの名前を取得する\n   * @param index 配列のインデックス値\n   * @return テクスチャの名前\n   */\n  public abstract getTextureFileName(index: number): string;\n\n  /**\n   * モデルに設定された当たり判定の数を取得する\n   * @return モデルに設定された当たり判定の数\n   */\n  public abstract getHitAreasCount(): number;\n\n  /**\n   * 当たり判定に設定されたIDを取得する\n   *\n   * @param index 配列のindex\n   * @return 当たり判定に設定されたID\n   */\n  public abstract getHitAreaId(index: number): CubismIdHandle;\n\n  /**\n   * 当たり判定に設定された名前を取得する\n   * @param index 配列のインデックス値\n   * @return 当たり判定に設定された名前\n   */\n  public abstract getHitAreaName(index: number): string;\n\n  /**\n   * 物理演算設定ファイルの名前を取得する\n   * @return 物理演算設定ファイルの名前\n   */\n  public abstract getPhysicsFileName(): string;\n\n  /**\n   * パーツ切り替え設定ファイルの名前を取得する\n   * @return パーツ切り替え設定ファイルの名前\n   */\n  public abstract getPoseFileName(): string;\n\n  /**\n   * 表情設定ファイルの数を取得する\n   * @return 表情設定ファイルの数\n   */\n  public abstract getExpressionCount(): number;\n\n  /**\n   * 表情設定ファイルを識別する名前（別名）を取得する\n   * @param index 配列のインデックス値\n   * @return 表情の名前\n   */\n  public abstract getExpressionName(index: number): string;\n\n  /**\n   * 表情設定ファイルの名前を取得する\n   * @param index 配列のインデックス値\n   * @return 表情設定ファイルの名前\n   */\n  public abstract getExpressionFileName(index: number): string;\n\n  /**\n   * モーショングループの数を取得する\n   * @return モーショングループの数\n   */\n  public abstract getMotionGroupCount(): number;\n\n  /**\n   * モーショングループの名前を取得する\n   * @param index 配列のインデックス値\n   * @return モーショングループの名前\n   */\n  public abstract getMotionGroupName(index: number): string;\n\n  /**\n   * モーショングループに含まれるモーションの数を取得する\n   * @param groupName モーショングループの名前\n   * @return モーショングループの数\n   */\n  public abstract getMotionCount(groupName: string): number;\n\n  /**\n   * グループ名とインデックス値からモーションファイル名を取得する\n   * @param groupName モーショングループの名前\n   * @param index     配列のインデックス値\n   * @return モーションファイルの名前\n   */\n  public abstract getMotionFileName(groupName: string, index: number): string;\n\n  /**\n   * モーションに対応するサウンドファイルの名前を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return サウンドファイルの名前\n   */\n  public abstract getMotionSoundFileName(\n    groupName: string,\n    index: number\n  ): string;\n\n  /**\n   * モーション開始時のフェードイン処理時間を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return フェードイン処理時間[秒]\n   */\n  public abstract getMotionFadeInTimeValue(\n    groupName: string,\n    index: number\n  ): number;\n\n  /**\n   * モーション終了時のフェードアウト処理時間を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return フェードアウト処理時間[秒]\n   */\n  public abstract getMotionFadeOutTimeValue(\n    groupName: string,\n    index: number\n  ): number;\n\n  /**\n   * ユーザーデータのファイル名を取得する\n   * @return ユーザーデータのファイル名\n   */\n  public abstract getUserDataFile(): string;\n\n  /**\n   * レイアウト情報を取得する\n   * @param outLayoutMap csmMapクラスのインスタンス\n   * @return true レイアウト情報が存在する\n   * @return false レイアウト情報が存在しない\n   */\n  public abstract getLayoutMap(outLayoutMap: csmMap<string, number>): boolean;\n\n  /**\n   * 目パチに関連付けられたパラメータの数を取得する\n   * @return 目パチに関連付けられたパラメータの数\n   */\n  public abstract getEyeBlinkParameterCount(): number;\n\n  /**\n   * 目パチに関連付けられたパラメータのIDを取得する\n   * @param index 配列のインデックス値\n   * @return パラメータID\n   */\n  public abstract getEyeBlinkParameterId(index: number): CubismIdHandle;\n\n  /**\n   * リップシンクに関連付けられたパラメータの数を取得する\n   * @return リップシンクに関連付けられたパラメータの数\n   */\n  public abstract getLipSyncParameterCount(): number;\n\n  /**\n   * リップシンクに関連付けられたパラメータの数を取得する\n   * @param index 配列のインデックス値\n   * @return パラメータID\n   */\n  public abstract getLipSyncParameterId(index: number): CubismIdHandle;\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './icubismmodelsetting';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const ICubismModelSetting = $.ICubismModelSetting;\n  export type ICubismModelSetting = $.ICubismModelSetting;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { ICubismModelSetting } from './icubismmodelsetting';\nimport { CubismIdHandle } from './id/cubismid';\nimport { CubismFramework } from './live2dcubismframework';\nimport { csmMap, iterator } from './type/csmmap';\nimport { csmVector } from './type/csmvector';\nimport { CubismJson, Value } from './utils/cubismjson';\n\nexport enum FrequestNode {\n  FrequestNode_Groups, // getRoot().getValueByString(Groups)\n  FrequestNode_Moc, // getRoot().getValueByString(FileReferences).getValueByString(Moc)\n  FrequestNode_Motions, // getRoot().getValueByString(FileReferences).getValueByString(Motions)\n  FrequestNode_Expressions, // getRoot().getValueByString(FileReferences).getValueByString(Expressions)\n  FrequestNode_Textures, // getRoot().getValueByString(FileReferences).getValueByString(Textures)\n  FrequestNode_Physics, // getRoot().getValueByString(FileReferences).getValueByString(Physics)\n  FrequestNode_Pose, // getRoot().getValueByString(FileReferences).getValueByString(Pose)\n  FrequestNode_HitAreas // getRoot().getValueByString(HitAreas)\n}\n\n/**\n * Model3Jsonパーサー\n *\n * model3.jsonファイルをパースして値を取得する\n */\nexport class CubismModelSettingJson extends ICubismModelSetting {\n  /**\n   * 引数付きコンストラクタ\n   *\n   * @param buffer    Model3Jsonをバイト配列として読み込んだデータバッファ\n   * @param size      Model3Jsonのデータサイズ\n   */\n  public constructor(buffer: ArrayBuffer, size: number) {\n    super();\n    this._json = CubismJson.create(buffer, size);\n\n    if (this.getJson()) {\n      this._jsonValue = new csmVector<Value>();\n\n      // 順番はenum FrequestNodeと一致させる\n      this._jsonValue.pushBack(\n        this.getJson().getRoot().getValueByString(this.groups)\n      );\n      this._jsonValue.pushBack(\n        this.getJson()\n          .getRoot()\n          .getValueByString(this.fileReferences)\n          .getValueByString(this.moc)\n      );\n      this._jsonValue.pushBack(\n        this.getJson()\n          .getRoot()\n          .getValueByString(this.fileReferences)\n          .getValueByString(this.motions)\n      );\n      this._jsonValue.pushBack(\n        this.getJson()\n          .getRoot()\n          .getValueByString(this.fileReferences)\n          .getValueByString(this.expressions)\n      );\n      this._jsonValue.pushBack(\n        this.getJson()\n          .getRoot()\n          .getValueByString(this.fileReferences)\n          .getValueByString(this.textures)\n      );\n      this._jsonValue.pushBack(\n        this.getJson()\n          .getRoot()\n          .getValueByString(this.fileReferences)\n          .getValueByString(this.physics)\n      );\n      this._jsonValue.pushBack(\n        this.getJson()\n          .getRoot()\n          .getValueByString(this.fileReferences)\n          .getValueByString(this.pose)\n      );\n      this._jsonValue.pushBack(\n        this.getJson().getRoot().getValueByString(this.hitAreas)\n      );\n    }\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    CubismJson.delete(this._json);\n\n    this._jsonValue = null;\n  }\n\n  /**\n   * CubismJsonオブジェクトを取得する\n   *\n   * @return CubismJson\n   */\n  public getJson(): CubismJson {\n    return this._json;\n  }\n\n  /**\n   * Mocファイルの名前を取得する\n   * @return Mocファイルの名前\n   */\n  public getModelFileName(): string {\n    if (!this.isExistModelFile()) {\n      return '';\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();\n  }\n\n  /**\n   * モデルが使用するテクスチャの数を取得する\n   * テクスチャの数\n   */\n  public getTextureCount(): number {\n    if (!this.isExistTextureFiles()) {\n      return 0;\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();\n  }\n\n  /**\n   * テクスチャが配置されたディレクトリの名前を取得する\n   * @return テクスチャが配置されたディレクトリの名前\n   */\n  public getTextureDirectory(): string {\n    const texturePath = this._jsonValue\n      .at(FrequestNode.FrequestNode_Textures)\n      .getValueByIndex(0)\n      .getRawString();\n\n    const pathArray = texturePath.split('/');\n    // 最後の要素はテクスチャ名なので不要\n    const arrayLength = pathArray.length - 1;\n    let textureDirectoryStr = '';\n\n    // 分割したパスを結合\n    for (let i = 0; i < arrayLength; i++) {\n      textureDirectoryStr += pathArray[i];\n      if (i < arrayLength - 1) {\n        textureDirectoryStr += '/';\n      }\n    }\n\n    return textureDirectoryStr;\n  }\n\n  /**\n   * モデルが使用するテクスチャの名前を取得する\n   * @param index 配列のインデックス値\n   * @return テクスチャの名前\n   */\n  public getTextureFileName(index: number): string {\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Textures)\n      .getValueByIndex(index)\n      .getRawString();\n  }\n\n  /**\n   * モデルに設定された当たり判定の数を取得する\n   * @return モデルに設定された当たり判定の数\n   */\n  public getHitAreasCount(): number {\n    if (!this.isExistHitAreas()) {\n      return 0;\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();\n  }\n\n  /**\n   * 当たり判定に設定されたIDを取得する\n   *\n   * @param index 配列のindex\n   * @return 当たり判定に設定されたID\n   */\n  public getHitAreaId(index: number): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._jsonValue\n        .at(FrequestNode.FrequestNode_HitAreas)\n        .getValueByIndex(index)\n        .getValueByString(this.id)\n        .getRawString()\n    );\n  }\n\n  /**\n   * 当たり判定に設定された名前を取得する\n   * @param index 配列のインデックス値\n   * @return 当たり判定に設定された名前\n   */\n  public getHitAreaName(index: number): string {\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_HitAreas)\n      .getValueByIndex(index)\n      .getValueByString(this.name)\n      .getRawString();\n  }\n\n  /**\n   * 物理演算設定ファイルの名前を取得する\n   * @return 物理演算設定ファイルの名前\n   */\n  public getPhysicsFileName(): string {\n    if (!this.isExistPhysicsFile()) {\n      return '';\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_Physics).getRawString();\n  }\n\n  /**\n   * パーツ切り替え設定ファイルの名前を取得する\n   * @return パーツ切り替え設定ファイルの名前\n   */\n  public getPoseFileName(): string {\n    if (!this.isExistPoseFile()) {\n      return '';\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();\n  }\n\n  /**\n   * 表情設定ファイルの数を取得する\n   * @return 表情設定ファイルの数\n   */\n  public getExpressionCount(): number {\n    if (!this.isExistExpressionFile()) {\n      return 0;\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getSize();\n  }\n\n  /**\n   * 表情設定ファイルを識別する名前（別名）を取得する\n   * @param index 配列のインデックス値\n   * @return 表情の名前\n   */\n  public getExpressionName(index: number): string {\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Expressions)\n      .getValueByIndex(index)\n      .getValueByString(this.name)\n      .getRawString();\n  }\n\n  /**\n   * 表情設定ファイルの名前を取得する\n   * @param index 配列のインデックス値\n   * @return 表情設定ファイルの名前\n   */\n  public getExpressionFileName(index: number): string {\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Expressions)\n      .getValueByIndex(index)\n      .getValueByString(this.filePath)\n      .getRawString();\n  }\n\n  /**\n   * モーショングループの数を取得する\n   * @return モーショングループの数\n   */\n  public getMotionGroupCount(): number {\n    if (!this.isExistMotionGroups()) {\n      return 0;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getKeys()\n      .getSize();\n  }\n\n  /**\n   * モーショングループの名前を取得する\n   * @param index 配列のインデックス値\n   * @return モーショングループの名前\n   */\n  public getMotionGroupName(index: number): string {\n    if (!this.isExistMotionGroups()) {\n      return null;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getKeys()\n      .at(index);\n  }\n\n  /**\n   * モーショングループに含まれるモーションの数を取得する\n   * @param groupName モーショングループの名前\n   * @return モーショングループの数\n   */\n  public getMotionCount(groupName: string): number {\n    if (!this.isExistMotionGroupName(groupName)) {\n      return 0;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getSize();\n  }\n\n  /**\n   * グループ名とインデックス値からモーションファイル名を取得する\n   * @param groupName モーショングループの名前\n   * @param index     配列のインデックス値\n   * @return モーションファイルの名前\n   */\n  public getMotionFileName(groupName: string, index: number): string {\n    if (!this.isExistMotionGroupName(groupName)) {\n      return '';\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(this.filePath)\n      .getRawString();\n  }\n\n  /**\n   * モーションに対応するサウンドファイルの名前を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return サウンドファイルの名前\n   */\n  public getMotionSoundFileName(groupName: string, index: number): string {\n    if (!this.isExistMotionSoundFile(groupName, index)) {\n      return '';\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(this.soundPath)\n      .getRawString();\n  }\n\n  /**\n   * モーション開始時のフェードイン処理時間を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return フェードイン処理時間[秒]\n   */\n  public getMotionFadeInTimeValue(groupName: string, index: number): number {\n    if (!this.isExistMotionFadeIn(groupName, index)) {\n      return -1.0;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(this.fadeInTime)\n      .toFloat();\n  }\n\n  /**\n   * モーション終了時のフェードアウト処理時間を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return フェードアウト処理時間[秒]\n   */\n  public getMotionFadeOutTimeValue(groupName: string, index: number): number {\n    if (!this.isExistMotionFadeOut(groupName, index)) {\n      return -1.0;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(this.fadeOutTime)\n      .toFloat();\n  }\n\n  /**\n   * ユーザーデータのファイル名を取得する\n   * @return ユーザーデータのファイル名\n   */\n  public getUserDataFile(): string {\n    if (!this.isExistUserDataFile()) {\n      return '';\n    }\n\n    return this.getJson()\n      .getRoot()\n      .getValueByString(this.fileReferences)\n      .getValueByString(this.userData)\n      .getRawString();\n  }\n\n  /**\n   * レイアウト情報を取得する\n   * @param outLayoutMap csmMapクラスのインスタンス\n   * @return true レイアウト情報が存在する\n   * @return false レイアウト情報が存在しない\n   */\n  public getLayoutMap(outLayoutMap: csmMap<string, number>): boolean {\n    // 存在しない要素にアクセスするとエラーになるためValueがnullの場合はnullを代入する\n    const map: csmMap<string, Value> = this.getJson()\n      .getRoot()\n      .getValueByString(this.layout)\n      .getMap();\n\n    if (map == null) {\n      return false;\n    }\n\n    let ret = false;\n\n    for (\n      const ite: iterator<string, Value> = map.begin();\n      ite.notEqual(map.end());\n      ite.preIncrement()\n    ) {\n      outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());\n      ret = true;\n    }\n\n    return ret;\n  }\n\n  /**\n   * 目パチに関連付けられたパラメータの数を取得する\n   * @return 目パチに関連付けられたパラメータの数\n   */\n  public getEyeBlinkParameterCount(): number {\n    if (!this.isExistEyeBlinkParameters()) {\n      return 0;\n    }\n\n    let num = 0;\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      i++\n    ) {\n      const refI: Value = this._jsonValue\n        .at(FrequestNode.FrequestNode_Groups)\n        .getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n\n      if (refI.getValueByString(this.name).getRawString() == this.eyeBlink) {\n        num = refI.getValueByString(this.ids).getVector().getSize();\n        break;\n      }\n    }\n\n    return num;\n  }\n\n  /**\n   * 目パチに関連付けられたパラメータのIDを取得する\n   * @param index 配列のインデックス値\n   * @return パラメータID\n   */\n  public getEyeBlinkParameterId(index: number): CubismIdHandle {\n    if (!this.isExistEyeBlinkParameters()) {\n      return null;\n    }\n\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      i++\n    ) {\n      const refI: Value = this._jsonValue\n        .at(FrequestNode.FrequestNode_Groups)\n        .getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n\n      if (refI.getValueByString(this.name).getRawString() == this.eyeBlink) {\n        return CubismFramework.getIdManager().getId(\n          refI.getValueByString(this.ids).getValueByIndex(index).getRawString()\n        );\n      }\n    }\n    return null;\n  }\n\n  /**\n   * リップシンクに関連付けられたパラメータの数を取得する\n   * @return リップシンクに関連付けられたパラメータの数\n   */\n  public getLipSyncParameterCount(): number {\n    if (!this.isExistLipSyncParameters()) {\n      return 0;\n    }\n\n    let num = 0;\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      i++\n    ) {\n      const refI: Value = this._jsonValue\n        .at(FrequestNode.FrequestNode_Groups)\n        .getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n\n      if (refI.getValueByString(this.name).getRawString() == this.lipSync) {\n        num = refI.getValueByString(this.ids).getVector().getSize();\n        break;\n      }\n    }\n\n    return num;\n  }\n\n  /**\n   * リップシンクに関連付けられたパラメータの数を取得する\n   * @param index 配列のインデックス値\n   * @return パラメータID\n   */\n  public getLipSyncParameterId(index: number): CubismIdHandle {\n    if (!this.isExistLipSyncParameters()) {\n      return null;\n    }\n\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      i++\n    ) {\n      const refI: Value = this._jsonValue\n        .at(FrequestNode.FrequestNode_Groups)\n        .getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n\n      if (refI.getValueByString(this.name).getRawString() == this.lipSync) {\n        return CubismFramework.getIdManager().getId(\n          refI.getValueByString(this.ids).getValueByIndex(index).getRawString()\n        );\n      }\n    }\n    return null;\n  }\n\n  /**\n   * モデルファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistModelFile(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Moc);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * テクスチャファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistTextureFiles(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Textures);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 当たり判定のキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistHitAreas(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_HitAreas);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 物理演算ファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistPhysicsFile(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Physics);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * ポーズ設定ファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistPoseFile(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Pose);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 表情設定ファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistExpressionFile(): boolean {\n    const node: Value = this._jsonValue.at(\n      FrequestNode.FrequestNode_Expressions\n    );\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * モーショングループのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistMotionGroups(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Motions);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーショングループのキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistMotionGroupName(groupName: string): boolean {\n    const node: Value = this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーションに対応するサウンドファイルのキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @param index 配列のインデックス値\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistMotionSoundFile(groupName: string, index: number): boolean {\n    const node: Value = this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(this.soundPath);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーションに対応するフェードイン時間のキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @param index 配列のインデックス値\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistMotionFadeIn(groupName: string, index: number): boolean {\n    const node: Value = this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(this.fadeInTime);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーションに対応するフェードアウト時間のキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @param index 配列のインデックス値\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistMotionFadeOut(groupName: string, index: number): boolean {\n    const node: Value = this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(this.fadeOutTime);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * UserDataのファイル名が存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistUserDataFile(): boolean {\n    const node: Value = this.getJson()\n      .getRoot()\n      .getValueByString(this.fileReferences)\n      .getValueByString(this.userData);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 目ぱちに対応付けられたパラメータが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistEyeBlinkParameters(): boolean {\n    if (\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()\n    ) {\n      return false;\n    }\n\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      ++i\n    ) {\n      if (\n        this._jsonValue\n          .at(FrequestNode.FrequestNode_Groups)\n          .getValueByIndex(i)\n          .getValueByString(this.name)\n          .getRawString() == this.eyeBlink\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * リップシンクに対応付けられたパラメータが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistLipSyncParameters(): boolean {\n    if (\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()\n    ) {\n      return false;\n    }\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      ++i\n    ) {\n      if (\n        this._jsonValue\n          .at(FrequestNode.FrequestNode_Groups)\n          .getValueByIndex(i)\n          .getValueByString(this.name)\n          .getRawString() == this.lipSync\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  protected _json: CubismJson;\n  protected _jsonValue: csmVector<Value>;\n\n  /**\n   * Model3Jsonのキー文字列\n   */\n  protected readonly version = 'Version';\n  protected readonly fileReferences = 'FileReferences';\n\n  protected readonly groups = 'Groups';\n  protected readonly layout = 'Layout';\n  protected readonly hitAreas = 'HitAreas';\n\n  protected readonly moc = 'Moc';\n  protected readonly textures = 'Textures';\n  protected readonly physics = 'Physics';\n  protected readonly pose = 'Pose';\n  protected readonly expressions = 'Expressions';\n  protected readonly motions = 'Motions';\n\n  protected readonly userData = 'UserData';\n  protected readonly name = 'Name';\n  protected readonly filePath = 'File';\n  protected readonly id = 'Id';\n  protected readonly ids = 'Ids';\n  protected readonly target = 'Target';\n\n  // Motions\n  protected readonly idle = 'Idle';\n  protected readonly tapBody = 'TapBody';\n  protected readonly pinchIn = 'PinchIn';\n  protected readonly pinchOut = 'PinchOut';\n  protected readonly shake = 'Shake';\n  protected readonly flickHead = 'FlickHead';\n  protected readonly parameter = 'Parameter';\n\n  protected readonly soundPath = 'Sound';\n  protected readonly fadeInTime = 'FadeInTime';\n  protected readonly fadeOutTime = 'FadeOutTime';\n\n  // Layout\n  protected readonly centerX = 'CenterX';\n  protected readonly centerY = 'CenterY';\n  protected readonly x = 'X';\n  protected readonly y = 'Y';\n  protected readonly width = 'Width';\n  protected readonly height = 'Height';\n\n  protected readonly lipSync = 'LipSync';\n  protected readonly eyeBlink = 'EyeBlink';\n\n  protected readonly initParameter = 'init_param';\n  protected readonly initPartsVisible = 'init_parts_visible';\n  protected readonly val = 'val';\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodelsettingjson';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismModelSettingJson = $.CubismModelSettingJson;\n  export type CubismModelSettingJson = $.CubismModelSettingJson;\n  export const FrequestNode = $.FrequestNode;\n  export type FrequestNode = $.FrequestNode;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmVector } from '../type/csmvector';\n\n/**\n * 呼吸機能\n *\n * 呼吸機能を提供する。\n */\nexport class CubismBreath {\n  /**\n   * インスタンスの作成\n   */\n  public static create(): CubismBreath {\n    return new CubismBreath();\n  }\n\n  /**\n   * インスタンスの破棄\n   * @param instance 対象のCubismBreath\n   */\n  public static delete(instance: CubismBreath): void {\n    if (instance != null) {\n      instance = null;\n    }\n  }\n\n  /**\n   * 呼吸のパラメータの紐づけ\n   * @param breathParameters 呼吸を紐づけたいパラメータのリスト\n   */\n  public setParameters(breathParameters: csmVector<BreathParameterData>): void {\n    this._breathParameters = breathParameters;\n  }\n\n  /**\n   * 呼吸に紐づいているパラメータの取得\n   * @return 呼吸に紐づいているパラメータのリスト\n   */\n  public getParameters(): csmVector<BreathParameterData> {\n    return this._breathParameters;\n  }\n\n  /**\n   * モデルのパラメータの更新\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  public updateParameters(model: CubismModel, deltaTimeSeconds: number): void {\n    this._currentTime += deltaTimeSeconds;\n\n    const t: number = this._currentTime * 2.0 * Math.PI;\n\n    for (let i = 0; i < this._breathParameters.getSize(); ++i) {\n      const data: BreathParameterData = this._breathParameters.at(i);\n\n      model.addParameterValueById(\n        data.parameterId,\n        data.offset + data.peak * Math.sin(t / data.cycle),\n        data.weight\n      );\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._currentTime = 0.0;\n  }\n\n  _breathParameters: csmVector<BreathParameterData>; // 呼吸にひもづいているパラメータのリスト\n  _currentTime: number; // 積算時間[秒]\n}\n\n/**\n * 呼吸のパラメータ情報\n */\nexport class BreathParameterData {\n  /**\n   * コンストラクタ\n   * @param parameterId   呼吸をひもづけるパラメータID\n   * @param offset        呼吸を正弦波としたときの、波のオフセット\n   * @param peak          呼吸を正弦波としたときの、波の高さ\n   * @param cycle         呼吸を正弦波としたときの、波の周期\n   * @param weight        パラメータへの重み\n   */\n  constructor(\n    parameterId?: CubismIdHandle,\n    offset?: number,\n    peak?: number,\n    cycle?: number,\n    weight?: number\n  ) {\n    this.parameterId = parameterId == undefined ? null : parameterId;\n    this.offset = offset == undefined ? 0.0 : offset;\n    this.peak = peak == undefined ? 0.0 : peak;\n    this.cycle = cycle == undefined ? 0.0 : cycle;\n    this.weight = weight == undefined ? 0.0 : weight;\n  }\n\n  parameterId: CubismIdHandle; // 呼吸をひもづけるパラメータID\\\n  offset: number; // 呼吸を正弦波としたときの、波のオフセット\n  peak: number; // 呼吸を正弦波としたときの、波の高さ\n  cycle: number; // 呼吸を正弦波としたときの、波の周期\n  weight: number; // パラメータへの重み\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismbreath';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const BreathParameterData = $.BreathParameterData;\n  export type BreathParameterData = $.BreathParameterData;\n  export const CubismBreath = $.CubismBreath;\n  export type CubismBreath = $.CubismBreath;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { ICubismModelSetting } from '../icubismmodelsetting';\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmVector } from '../type/csmvector';\n\n/**\n * 自動まばたき機能\n *\n * 自動まばたき機能を提供する。\n */\nexport class CubismEyeBlink {\n  /**\n   * インスタンスを作成する\n   * @param modelSetting モデルの設定情報\n   * @return 作成されたインスタンス\n   * @note 引数がNULLの場合、パラメータIDが設定されていない空のインスタンスを作成する。\n   */\n  public static create(\n    modelSetting: ICubismModelSetting = null\n  ): CubismEyeBlink {\n    return new CubismEyeBlink(modelSetting);\n  }\n\n  /**\n   * インスタンスの破棄\n   * @param eyeBlink 対象のCubismEyeBlink\n   */\n  public static delete(eyeBlink: CubismEyeBlink): void {\n    if (eyeBlink != null) {\n      eyeBlink = null;\n    }\n  }\n\n  /**\n   * まばたきの間隔の設定\n   * @param blinkingInterval まばたきの間隔の時間[秒]\n   */\n  public setBlinkingInterval(blinkingInterval: number): void {\n    this._blinkingIntervalSeconds = blinkingInterval;\n  }\n\n  /**\n   * まばたきのモーションの詳細設定\n   * @param closing   まぶたを閉じる動作の所要時間[秒]\n   * @param closed    まぶたを閉じている動作の所要時間[秒]\n   * @param opening   まぶたを開く動作の所要時間[秒]\n   */\n  public setBlinkingSetting(\n    closing: number,\n    closed: number,\n    opening: number\n  ): void {\n    this._closingSeconds = closing;\n    this._closedSeconds = closed;\n    this._openingSeconds = opening;\n  }\n\n  /**\n   * まばたきさせるパラメータIDのリストの設定\n   * @param parameterIds パラメータのIDのリスト\n   */\n  public setParameterIds(parameterIds: csmVector<CubismIdHandle>): void {\n    this._parameterIds = parameterIds;\n  }\n\n  /**\n   * まばたきさせるパラメータIDのリストの取得\n   * @return パラメータIDのリスト\n   */\n  public getParameterIds(): csmVector<CubismIdHandle> {\n    return this._parameterIds;\n  }\n\n  /**\n   * モデルのパラメータの更新\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  public updateParameters(model: CubismModel, deltaTimeSeconds: number): void {\n    this._userTimeSeconds += deltaTimeSeconds;\n    let parameterValue: number;\n    let t = 0.0;\n    const blinkingState: EyeState = this._blinkingState;\n\n    switch (blinkingState) {\n      case EyeState.EyeState_Closing:\n        t =\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\n          this._closingSeconds;\n\n        if (t >= 1.0) {\n          t = 1.0;\n          this._blinkingState = EyeState.EyeState_Closed;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n\n        parameterValue = 1.0 - t;\n\n        break;\n      case EyeState.EyeState_Closed:\n        t =\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\n          this._closedSeconds;\n\n        if (t >= 1.0) {\n          this._blinkingState = EyeState.EyeState_Opening;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n\n        parameterValue = 0.0;\n\n        break;\n      case EyeState.EyeState_Opening:\n        t =\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\n          this._openingSeconds;\n\n        if (t >= 1.0) {\n          t = 1.0;\n          this._blinkingState = EyeState.EyeState_Interval;\n          this._nextBlinkingTime = this.determinNextBlinkingTiming();\n        }\n\n        parameterValue = t;\n\n        break;\n      case EyeState.EyeState_Interval:\n        if (this._nextBlinkingTime < this._userTimeSeconds) {\n          this._blinkingState = EyeState.EyeState_Closing;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n\n        parameterValue = 1.0;\n\n        break;\n      case EyeState.EyeState_First:\n      default:\n        this._blinkingState = EyeState.EyeState_Interval;\n        this._nextBlinkingTime = this.determinNextBlinkingTiming();\n\n        parameterValue = 1.0;\n        break;\n    }\n\n    if (!CubismEyeBlink.CloseIfZero) {\n      parameterValue = -parameterValue;\n    }\n\n    for (let i = 0; i < this._parameterIds.getSize(); ++i) {\n      model.setParameterValueById(this._parameterIds.at(i), parameterValue);\n    }\n  }\n\n  /**\n   * コンストラクタ\n   * @param modelSetting モデルの設定情報\n   */\n  public constructor(modelSetting: ICubismModelSetting) {\n    this._blinkingState = EyeState.EyeState_First;\n    this._nextBlinkingTime = 0.0;\n    this._stateStartTimeSeconds = 0.0;\n    this._blinkingIntervalSeconds = 4.0;\n    this._closingSeconds = 0.1;\n    this._closedSeconds = 0.05;\n    this._openingSeconds = 0.15;\n    this._userTimeSeconds = 0.0;\n    this._parameterIds = new csmVector<CubismIdHandle>();\n\n    if (modelSetting == null) {\n      return;\n    }\n\n    for (let i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {\n      this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));\n    }\n  }\n\n  /**\n   * 次の瞬きのタイミングの決定\n   *\n   * @return 次のまばたきを行う時刻[秒]\n   */\n  public determinNextBlinkingTiming(): number {\n    const r: number = Math.random();\n    return (\n      this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0)\n    );\n  }\n\n  _blinkingState: number; // 現在の状態\n  _parameterIds: csmVector<CubismIdHandle>; // 操作対象のパラメータのIDのリスト\n  _nextBlinkingTime: number; // 次のまばたきの時刻[秒]\n  _stateStartTimeSeconds: number; // 現在の状態が開始した時刻[秒]\n  _blinkingIntervalSeconds: number; // まばたきの間隔[秒]\n  _closingSeconds: number; // まぶたを閉じる動作の所要時間[秒]\n  _closedSeconds: number; // まぶたを閉じている動作の所要時間[秒]\n  _openingSeconds: number; // まぶたを開く動作の所要時間[秒]\n  _userTimeSeconds: number; // デルタ時間の積算値[秒]\n\n  /**\n   * IDで指定された目のパラメータが、0のときに閉じるなら true 、1の時に閉じるなら false 。\n   */\n  static readonly CloseIfZero: boolean = true;\n}\n\n/**\n * まばたきの状態\n *\n * まばたきの状態を表す列挙型\n */\nexport enum EyeState {\n  EyeState_First = 0, // 初期状態\n  EyeState_Interval, // まばたきしていない状態\n  EyeState_Closing, // まぶたが閉じていく途中の状態\n  EyeState_Closed, // まぶたが閉じている状態\n  EyeState_Opening // まぶたが開いていく途中の状態\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismeyeblink';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismEyeBlink = $.CubismEyeBlink;\n  export type CubismEyeBlink = $.CubismEyeBlink;\n  export const EyeState = $.EyeState;\n  export type EyeState = $.EyeState;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmVector, iterator } from '../type/csmvector';\nimport { CubismJson, Value } from '../utils/cubismjson';\n\nconst Epsilon = 0.001;\nconst DefaultFadeInSeconds = 0.5;\n\n// Pose.jsonのタグ\nconst FadeIn = 'FadeInTime';\nconst Link = 'Link';\nconst Groups = 'Groups';\nconst Id = 'Id';\n\n/**\n * パーツの不透明度の設定\n *\n * パーツの不透明度の管理と設定を行う。\n */\nexport class CubismPose {\n  /**\n   * インスタンスの作成\n   * @param pose3json pose3.jsonのデータ\n   * @param size pose3.jsonのデータのサイズ[byte]\n   * @return 作成されたインスタンス\n   */\n  public static create(pose3json: ArrayBuffer, size: number): CubismPose {\n    const json: CubismJson = CubismJson.create(pose3json, size);\n    if (!json) {\n      return null;\n    }\n\n    const ret: CubismPose = new CubismPose();\n    const root: Value = json.getRoot();\n\n    // フェード時間の指定\n    if (!root.getValueByString(FadeIn).isNull()) {\n      ret._fadeTimeSeconds = root\n        .getValueByString(FadeIn)\n        .toFloat(DefaultFadeInSeconds);\n\n      if (ret._fadeTimeSeconds < 0.0) {\n        ret._fadeTimeSeconds = DefaultFadeInSeconds;\n      }\n    }\n\n    // パーツグループ\n    const poseListInfo: Value = root.getValueByString(Groups);\n    const poseCount: number = poseListInfo.getSize();\n\n    for (let poseIndex = 0; poseIndex < poseCount; ++poseIndex) {\n      const idListInfo: Value = poseListInfo.getValueByIndex(poseIndex);\n      const idCount: number = idListInfo.getSize();\n      let groupCount = 0;\n\n      for (let groupIndex = 0; groupIndex < idCount; ++groupIndex) {\n        const partInfo: Value = idListInfo.getValueByIndex(groupIndex);\n        const partData: PartData = new PartData();\n        const parameterId: CubismIdHandle =\n          CubismFramework.getIdManager().getId(\n            partInfo.getValueByString(Id).getRawString()\n          );\n\n        partData.partId = parameterId;\n\n        // リンクするパーツの設定\n        if (!partInfo.getValueByString(Link).isNull()) {\n          const linkListInfo: Value = partInfo.getValueByString(Link);\n          const linkCount: number = linkListInfo.getSize();\n\n          for (let linkIndex = 0; linkIndex < linkCount; ++linkIndex) {\n            const linkPart: PartData = new PartData();\n            const linkId: CubismIdHandle = CubismFramework.getIdManager().getId(\n              linkListInfo.getValueByIndex(linkIndex).getString()\n            );\n\n            linkPart.partId = linkId;\n\n            partData.link.pushBack(linkPart);\n          }\n        }\n\n        ret._partGroups.pushBack(partData.clone());\n\n        ++groupCount;\n      }\n\n      ret._partGroupCounts.pushBack(groupCount);\n    }\n\n    CubismJson.delete(json);\n\n    return ret;\n  }\n\n  /**\n   * インスタンスを破棄する\n   * @param pose 対象のCubismPose\n   */\n  public static delete(pose: CubismPose): void {\n    if (pose != null) {\n      pose = null;\n    }\n  }\n\n  /**\n   * モデルのパラメータの更新\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  public updateParameters(model: CubismModel, deltaTimeSeconds: number): void {\n    // 前回のモデルと同じでない場合は初期化が必要\n    if (model != this._lastModel) {\n      // パラメータインデックスの初期化\n      this.reset(model);\n    }\n\n    this._lastModel = model;\n\n    // 設定から時間を変更すると、経過時間がマイナスになる事があるので、経過時間0として対応\n    if (deltaTimeSeconds < 0.0) {\n      deltaTimeSeconds = 0.0;\n    }\n\n    let beginIndex = 0;\n\n    for (let i = 0; i < this._partGroupCounts.getSize(); i++) {\n      const partGroupCount: number = this._partGroupCounts.at(i);\n\n      this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);\n\n      beginIndex += partGroupCount;\n    }\n\n    this.copyPartOpacities(model);\n  }\n\n  /**\n   * 表示を初期化\n   * @param model 対象のモデル\n   * @note 不透明度の初期値が0でないパラメータは、不透明度を１に設定する\n   */\n  public reset(model: CubismModel): void {\n    let beginIndex = 0;\n\n    for (let i = 0; i < this._partGroupCounts.getSize(); ++i) {\n      const groupCount: number = this._partGroupCounts.at(i);\n\n      for (let j: number = beginIndex; j < beginIndex + groupCount; ++j) {\n        this._partGroups.at(j).initialize(model);\n\n        const partsIndex: number = this._partGroups.at(j).partIndex;\n        const paramIndex: number = this._partGroups.at(j).parameterIndex;\n\n        if (partsIndex < 0) {\n          continue;\n        }\n\n        model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);\n        model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1.0 : 0.0);\n\n        for (let k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {\n          this._partGroups.at(j).link.at(k).initialize(model);\n        }\n      }\n\n      beginIndex += groupCount;\n    }\n  }\n\n  /**\n   * パーツの不透明度をコピー\n   *\n   * @param model 対象のモデル\n   */\n  public copyPartOpacities(model: CubismModel): void {\n    for (\n      let groupIndex = 0;\n      groupIndex < this._partGroups.getSize();\n      ++groupIndex\n    ) {\n      const partData: PartData = this._partGroups.at(groupIndex);\n\n      if (partData.link.getSize() == 0) {\n        continue; // 連動するパラメータはない\n      }\n\n      const partIndex: number = this._partGroups.at(groupIndex).partIndex;\n      const opacity: number = model.getPartOpacityByIndex(partIndex);\n\n      for (\n        let linkIndex = 0;\n        linkIndex < partData.link.getSize();\n        ++linkIndex\n      ) {\n        const linkPart: PartData = partData.link.at(linkIndex);\n        const linkPartIndex: number = linkPart.partIndex;\n\n        if (linkPartIndex < 0) {\n          continue;\n        }\n\n        model.setPartOpacityByIndex(linkPartIndex, opacity);\n      }\n    }\n  }\n\n  /**\n   * パーツのフェード操作を行う。\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   * @param beginIndex フェード操作を行うパーツグループの先頭インデックス\n   * @param partGroupCount フェード操作を行うパーツグループの個数\n   */\n  public doFade(\n    model: CubismModel,\n    deltaTimeSeconds: number,\n    beginIndex: number,\n    partGroupCount: number\n  ): void {\n    let visiblePartIndex = -1;\n    let newOpacity = 1.0;\n\n    const phi = 0.5;\n    const backOpacityThreshold = 0.15;\n\n    // 現在、表示状態になっているパーツを取得\n    for (let i: number = beginIndex; i < beginIndex + partGroupCount; ++i) {\n      const partIndex: number = this._partGroups.at(i).partIndex;\n      const paramIndex: number = this._partGroups.at(i).parameterIndex;\n\n      if (model.getParameterValueByIndex(paramIndex) > Epsilon) {\n        if (visiblePartIndex >= 0) {\n          break;\n        }\n\n        visiblePartIndex = i;\n        // ゼロ除算の回避\n        if (this._fadeTimeSeconds == 0) {\n          newOpacity = 1.0;\n          continue;\n        }\n\n        newOpacity = model.getPartOpacityByIndex(partIndex);\n\n        // 新しい不透明度を計算\n        newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;\n\n        if (newOpacity > 1.0) {\n          newOpacity = 1.0;\n        }\n      }\n    }\n\n    if (visiblePartIndex < 0) {\n      visiblePartIndex = 0;\n      newOpacity = 1.0;\n    }\n\n    // 表示パーツ、非表示パーツの不透明度を設定する\n    for (let i: number = beginIndex; i < beginIndex + partGroupCount; ++i) {\n      const partsIndex: number = this._partGroups.at(i).partIndex;\n\n      // 表示パーツの設定\n      if (visiblePartIndex == i) {\n        model.setPartOpacityByIndex(partsIndex, newOpacity); // 先に設定\n      }\n      // 非表示パーツの設定\n      else {\n        let opacity: number = model.getPartOpacityByIndex(partsIndex);\n        let a1: number; // 計算によって求められる不透明度\n\n        if (newOpacity < phi) {\n          a1 = (newOpacity * (phi - 1)) / phi + 1.0; // (0,1),(phi,phi)を通る直線式\n        } else {\n          a1 = ((1 - newOpacity) * phi) / (1.0 - phi); // (1,0),(phi,phi)を通る直線式\n        }\n\n        // 背景の見える割合を制限する場合\n        const backOpacity: number = (1.0 - a1) * (1.0 - newOpacity);\n\n        if (backOpacity > backOpacityThreshold) {\n          a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);\n        }\n\n        if (opacity > a1) {\n          opacity = a1; // 計算の不透明度よりも大きければ（濃ければ）不透明度を上げる\n        }\n\n        model.setPartOpacityByIndex(partsIndex, opacity);\n      }\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._fadeTimeSeconds = DefaultFadeInSeconds;\n    this._lastModel = null;\n    this._partGroups = new csmVector<PartData>();\n    this._partGroupCounts = new csmVector<number>();\n  }\n\n  _partGroups: csmVector<PartData>; // パーツグループ\n  _partGroupCounts: csmVector<number>; // それぞれのパーツグループの個数\n  _fadeTimeSeconds: number; // フェード時間[秒]\n  _lastModel: CubismModel; // 前回操作したモデル\n}\n\n/**\n * パーツにまつわるデータを管理\n */\nexport class PartData {\n  /**\n   * コンストラクタ\n   */\n  constructor(v?: PartData) {\n    this.parameterIndex = 0;\n    this.partIndex = 0;\n    this.link = new csmVector<PartData>();\n\n    if (v != undefined) {\n      this.partId = v.partId;\n\n      for (\n        const ite: iterator<PartData> = v.link.begin();\n        ite.notEqual(v.link.end());\n        ite.preIncrement()\n      ) {\n        this.link.pushBack(ite.ptr().clone());\n      }\n    }\n  }\n\n  /**\n   * =演算子のオーバーロード\n   */\n  public assignment(v: PartData): PartData {\n    this.partId = v.partId;\n\n    for (\n      const ite: iterator<PartData> = v.link.begin();\n      ite.notEqual(v.link.end());\n      ite.preIncrement()\n    ) {\n      this.link.pushBack(ite.ptr().clone());\n    }\n\n    return this;\n  }\n\n  /**\n   * 初期化\n   * @param model 初期化に使用するモデル\n   */\n  public initialize(model: CubismModel): void {\n    this.parameterIndex = model.getParameterIndex(this.partId);\n    this.partIndex = model.getPartIndex(this.partId);\n\n    model.setParameterValueByIndex(this.parameterIndex, 1);\n  }\n\n  /**\n   * オブジェクトのコピーを生成する\n   */\n  public clone(): PartData {\n    const clonePartData: PartData = new PartData();\n\n    clonePartData.partId = this.partId;\n    clonePartData.parameterIndex = this.parameterIndex;\n    clonePartData.partIndex = this.partIndex;\n    clonePartData.link = new csmVector<PartData>();\n\n    for (\n      let ite: iterator<PartData> = this.link.begin();\n      ite.notEqual(this.link.end());\n      ite.increment()\n    ) {\n      clonePartData.link.pushBack(ite.ptr().clone());\n    }\n\n    return clonePartData;\n  }\n\n  partId: CubismIdHandle; // パーツID\n  parameterIndex: number; // パラメータのインデックス\n  partIndex: number; // パーツのインデックス\n  link: csmVector<PartData>; // 連動するパラメータ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismpose';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismPose = $.CubismPose;\n  export type CubismPose = $.CubismPose;\n  export const PartData = $.PartData;\n  export type PartData = $.PartData;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { csmMap, iterator } from '../type/csmmap';\nimport { CubismMatrix44 } from './cubismmatrix44';\n\n/**\n * モデル座標設定用の4x4行列\n *\n * モデル座標設定用の4x4行列クラス\n */\nexport class CubismModelMatrix extends CubismMatrix44 {\n  /**\n   * コンストラクタ\n   *\n   * @param w 横幅\n   * @param h 縦幅\n   */\n  constructor(w?: number, h?: number) {\n    super();\n\n    this._width = w !== undefined ? w : 0.0;\n    this._height = h !== undefined ? h : 0.0;\n\n    this.setHeight(2.0);\n  }\n\n  /**\n   * 横幅を設定\n   *\n   * @param w 横幅\n   */\n  public setWidth(w: number): void {\n    const scaleX: number = w / this._width;\n    const scaleY: number = scaleX;\n    this.scale(scaleX, scaleY);\n  }\n\n  /**\n   * 縦幅を設定\n   * @param h 縦幅\n   */\n  public setHeight(h: number): void {\n    const scaleX: number = h / this._height;\n    const scaleY: number = scaleX;\n    this.scale(scaleX, scaleY);\n  }\n\n  /**\n   * 位置を設定\n   *\n   * @param x X軸の位置\n   * @param y Y軸の位置\n   */\n  public setPosition(x: number, y: number): void {\n    this.translate(x, y);\n  }\n\n  /**\n   * 中心位置を設定\n   *\n   * @param x X軸の中心位置\n   * @param y Y軸の中心位置\n   *\n   * @note widthかheightを設定したあとでないと、拡大率が正しく取得できないためずれる。\n   */\n  public setCenterPosition(x: number, y: number) {\n    this.centerX(x);\n    this.centerY(y);\n  }\n\n  /**\n   * 上辺の位置を設定する\n   *\n   * @param y 上辺のY軸位置\n   */\n  public top(y: number): void {\n    this.setY(y);\n  }\n\n  /**\n   * 下辺の位置を設定する\n   *\n   * @param y 下辺のY軸位置\n   */\n  public bottom(y: number) {\n    const h: number = this._height * this.getScaleY();\n\n    this.translateY(y - h);\n  }\n\n  /**\n   * 左辺の位置を設定\n   *\n   * @param x 左辺のX軸位置\n   */\n  public left(x: number): void {\n    this.setX(x);\n  }\n\n  /**\n   * 右辺の位置を設定\n   *\n   * @param x 右辺のX軸位置\n   */\n  public right(x: number): void {\n    const w = this._width * this.getScaleX();\n\n    this.translateX(x - w);\n  }\n\n  /**\n   * X軸の中心位置を設定\n   *\n   * @param x X軸の中心位置\n   */\n  public centerX(x: number): void {\n    const w = this._width * this.getScaleX();\n\n    this.translateX(x - w / 2.0);\n  }\n\n  /**\n   * X軸の位置を設定\n   *\n   * @param x X軸の位置\n   */\n  public setX(x: number): void {\n    this.translateX(x);\n  }\n\n  /**\n   * Y軸の中心位置を設定\n   *\n   * @param y Y軸の中心位置\n   */\n  public centerY(y: number): void {\n    const h: number = this._height * this.getScaleY();\n\n    this.translateY(y - h / 2.0);\n  }\n\n  /**\n   * Y軸の位置を設定する\n   *\n   * @param y Y軸の位置\n   */\n  public setY(y: number): void {\n    this.translateY(y);\n  }\n\n  /**\n   * レイアウト情報から位置を設定\n   *\n   * @param layout レイアウト情報\n   */\n  public setupFromLayout(layout: csmMap<string, number>): void {\n    const keyWidth = 'width';\n    const keyHeight = 'height';\n    const keyX = 'x';\n    const keyY = 'y';\n    const keyCenterX = 'center_x';\n    const keyCenterY = 'center_y';\n    const keyTop = 'top';\n    const keyBottom = 'bottom';\n    const keyLeft = 'left';\n    const keyRight = 'right';\n\n    for (\n      const ite: iterator<string, number> = layout.begin();\n      ite.notEqual(layout.end());\n      ite.preIncrement()\n    ) {\n      const key: string = ite.ptr().first;\n      const value: number = ite.ptr().second;\n\n      if (key == keyWidth) {\n        this.setWidth(value);\n      } else if (key == keyHeight) {\n        this.setHeight(value);\n      }\n    }\n\n    for (\n      const ite: iterator<string, number> = layout.begin();\n      ite.notEqual(layout.end());\n      ite.preIncrement()\n    ) {\n      const key: string = ite.ptr().first;\n      const value: number = ite.ptr().second;\n\n      if (key == keyX) {\n        this.setX(value);\n      } else if (key == keyY) {\n        this.setY(value);\n      } else if (key == keyCenterX) {\n        this.centerX(value);\n      } else if (key == keyCenterY) {\n        this.centerY(value);\n      } else if (key == keyTop) {\n        this.top(value);\n      } else if (key == keyBottom) {\n        this.bottom(value);\n      } else if (key == keyLeft) {\n        this.left(value);\n      } else if (key == keyRight) {\n        this.right(value);\n      }\n    }\n  }\n\n  private _width: number; // 横幅\n  private _height: number; // 縦幅\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodelmatrix';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismModelMatrix = $.CubismModelMatrix;\n  export type CubismModelMatrix = $.CubismModelMatrix;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMath } from './cubismmath';\n\nconst FrameRate = 30;\nconst Epsilon = 0.01;\n\n/**\n * 顔の向きの制御機能\n *\n * 顔の向きの制御機能を提供するクラス。\n */\nexport class CubismTargetPoint {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._faceTargetX = 0.0;\n    this._faceTargetY = 0.0;\n    this._faceX = 0.0;\n    this._faceY = 0.0;\n    this._faceVX = 0.0;\n    this._faceVY = 0.0;\n    this._lastTimeSeconds = 0.0;\n    this._userTimeSeconds = 0.0;\n  }\n\n  /**\n   * 更新処理\n   */\n  public update(deltaTimeSeconds: number): void {\n    // デルタ時間を加算する\n    this._userTimeSeconds += deltaTimeSeconds;\n\n    // 首を中央から左右に振るときの平均的な速さは 秒速度。加速・減速を考慮して、その２倍を最高速度とする\n    // 顔の振り具合を、中央（0.0）から、左右は（+-1.0）とする\n    const faceParamMaxV: number = 40.0 / 10.0; // 7.5秒間に40分移動(5.3/sc)\n    const maxV: number = (faceParamMaxV * 1.0) / FrameRate; // 1frameあたりに変化できる速度の上限\n\n    if (this._lastTimeSeconds == 0.0) {\n      this._lastTimeSeconds = this._userTimeSeconds;\n      return;\n    }\n\n    const deltaTimeWeight: number =\n      (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;\n    this._lastTimeSeconds = this._userTimeSeconds;\n\n    // 最高速度になるまでの時間を\n    const timeToMaxSpeed = 0.15;\n    const frameToMaxSpeed: number = timeToMaxSpeed * FrameRate; // sec * frame/sec\n    const maxA: number = (deltaTimeWeight * maxV) / frameToMaxSpeed; // 1frameあたりの加速度\n\n    // 目指す向きは、（dx, dy）方向のベクトルとなる\n    const dx: number = this._faceTargetX - this._faceX;\n    const dy: number = this._faceTargetY - this._faceY;\n\n    if (CubismMath.abs(dx) <= Epsilon && CubismMath.abs(dy) <= Epsilon) {\n      return; // 変化なし\n    }\n\n    // 速度の最大よりも大きい場合は、速度を落とす\n    const d: number = CubismMath.sqrt(dx * dx + dy * dy);\n\n    // 進行方向の最大速度ベクトル\n    const vx: number = (maxV * dx) / d;\n    const vy: number = (maxV * dy) / d;\n\n    // 現在の速度から、新規速度への変化（加速度）を求める\n    let ax: number = vx - this._faceVX;\n    let ay: number = vy - this._faceVY;\n\n    const a: number = CubismMath.sqrt(ax * ax + ay * ay);\n\n    // 加速のとき\n    if (a < -maxA || a > maxA) {\n      ax *= maxA / a;\n      ay *= maxA / a;\n    }\n\n    // 加速度を元の速度に足して、新速度とする\n    this._faceVX += ax;\n    this._faceVY += ay;\n\n    // 目的の方向に近づいたとき、滑らかに減速するための処理\n    // 設定された加速度で止まる事の出来る距離と速度の関係から\n    // 現在とりうる最高速度を計算し、それ以上の時は速度を落とす\n    // ※本来、人間は筋力で力（加速度）を調整できるため、より自由度が高いが、簡単な処理で済ませている\n    {\n      // 加速度、速度、距離の関係式。\n      //            2  6           2               3\n      //      sqrt(a  t  + 16 a h t  - 8 a h) - a t\n      // v = --------------------------------------\n      //                    2\n      //                 4 t  - 2\n      // (t=1)\n      // \t時刻tは、あらかじめ加速度、速度を1/60(フレームレート、単位なし)で\n      // \t考えているので、t＝１として消してよい（※未検証）\n\n      const maxV: number =\n        0.5 *\n        (CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) -\n          maxA);\n      const curV: number = CubismMath.sqrt(\n        this._faceVX * this._faceVX + this._faceVY * this._faceVY\n      );\n\n      if (curV > maxV) {\n        // 現在の速度 > 最高速度のとき、最高速度まで減速\n        this._faceVX *= maxV / curV;\n        this._faceVY *= maxV / curV;\n      }\n    }\n\n    this._faceX += this._faceVX;\n    this._faceY += this._faceVY;\n  }\n\n  /**\n   * X軸の顔の向きの値を取得\n   *\n   * @return X軸の顔の向きの値（-1.0 ~ 1.0）\n   */\n  public getX(): number {\n    return this._faceX;\n  }\n\n  /**\n   * Y軸の顔の向きの値を取得\n   *\n   * @return Y軸の顔の向きの値（-1.0 ~ 1.0）\n   */\n  public getY(): number {\n    return this._faceY;\n  }\n\n  /**\n   * 顔の向きの目標値を設定\n   *\n   * @param x X軸の顔の向きの値（-1.0 ~ 1.0）\n   * @param y Y軸の顔の向きの値（-1.0 ~ 1.0）\n   */\n  public set(x: number, y: number): void {\n    this._faceTargetX = x;\n    this._faceTargetY = y;\n  }\n\n  private _faceTargetX: number; // 顔の向きのX目標値（この値に近づいていく）\n  private _faceTargetY: number; // 顔の向きのY目標値（この値に近づいていく）\n  private _faceX: number; // 顔の向きX（-1.0 ~ 1.0）\n  private _faceY: number; // 顔の向きY（-1.0 ~ 1.0）\n  private _faceVX: number; // 顔の向きの変化速度X\n  private _faceVY: number; // 顔の向きの変化速度Y\n  private _lastTimeSeconds: number; // 最後の実行時間[秒]\n  private _userTimeSeconds: number; // デルタ時間の積算値[秒]\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismtargetpoint';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismTargetPoint = $.CubismTargetPoint;\n  export type CubismTargetPoint = $.CubismTargetPoint;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMath } from '../math/cubismmath';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmString } from '../type/csmstring';\nimport { csmVector } from '../type/csmvector';\nimport { CSM_ASSERT, CubismDebug } from '../utils/cubismdebug';\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\n\n/** モーション再生開始コールバック関数定義 */\nexport type BeganMotionCallback = (self: ACubismMotion) => void;\n\n/** モーション再生終了コールバック関数定義 */\nexport type FinishedMotionCallback = (self: ACubismMotion) => void;\n\n/**\n * モーションの抽象基底クラス\n *\n * モーションの抽象基底クラス。MotionQueueManagerによってモーションの再生を管理する。\n */\nexport abstract class ACubismMotion {\n  /**\n   * インスタンスの破棄\n   */\n  public static delete(motion: ACubismMotion): void {\n    motion.release();\n    motion = null;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._fadeInSeconds = -1.0;\n    this._fadeOutSeconds = -1.0;\n    this._weight = 1.0;\n    this._offsetSeconds = 0.0; // 再生の開始時刻\n    this._isLoop = false; // ループするか\n    this._isLoopFadeIn = true; // ループ時にフェードインが有効かどうかのフラグ。初期値では有効。\n    this._previousLoopState = this._isLoop;\n    this._firedEventValues = new csmVector<csmString>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    this._weight = 0.0;\n  }\n\n  /**\n   * モデルのパラメータ\n   * @param model 対象のモデル\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   */\n  public updateParameters(\n    model: CubismModel,\n    motionQueueEntry: CubismMotionQueueEntry,\n    userTimeSeconds: number\n  ): void {\n    if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {\n      return;\n    }\n\n    this.setupMotionQueueEntry(motionQueueEntry, userTimeSeconds);\n\n    const fadeWeight = this.updateFadeWeight(motionQueueEntry, userTimeSeconds);\n\n    //---- 全てのパラメータIDをループする ----\n    this.doUpdateParameters(\n      model,\n      userTimeSeconds,\n      fadeWeight,\n      motionQueueEntry\n    );\n\n    // 後処理\n    // 終了時刻を過ぎたら終了フラグを立てる(CubismMotionQueueManager)\n    if (\n      motionQueueEntry.getEndTime() > 0 &&\n      motionQueueEntry.getEndTime() < userTimeSeconds\n    ) {\n      motionQueueEntry.setIsFinished(true); // 終了\n    }\n  }\n\n  /**\n   * @brief モデルの再生開始処理\n   *\n   * モーションの再生を開始するためのセットアップを行う。\n   *\n   * @param[in]   motionQueueEntry    CubismMotionQueueManagerで管理されているモーション\n   * @param[in]   userTimeSeconds     デルタ時間の積算値[秒]\n   */\n  public setupMotionQueueEntry(\n    motionQueueEntry: CubismMotionQueueEntry,\n    userTimeSeconds: number\n  ) {\n    if (motionQueueEntry == null || motionQueueEntry.isStarted()) {\n      return;\n    }\n\n    if (!motionQueueEntry.isAvailable()) {\n      return;\n    }\n\n    motionQueueEntry.setIsStarted(true);\n    motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds); // モーションの開始時刻を記録\n    motionQueueEntry.setFadeInStartTime(userTimeSeconds); // フェードインの開始時刻\n\n    if (motionQueueEntry.getEndTime() < 0.0) {\n      // 開始していないうちに終了設定している場合がある\n      this.adjustEndTime(motionQueueEntry);\n    }\n\n    // 再生開始コールバック\n    if (motionQueueEntry._motion._onBeganMotion) {\n      motionQueueEntry._motion._onBeganMotion(motionQueueEntry._motion);\n    }\n  }\n\n  /**\n   * @brief モデルのウェイト更新\n   *\n   * モーションのウェイトを更新する。\n   *\n   * @param[in]   motionQueueEntry    CubismMotionQueueManagerで管理されているモーション\n   * @param[in]   userTimeSeconds     デルタ時間の積算値[秒]\n   */\n  public updateFadeWeight(\n    motionQueueEntry: CubismMotionQueueEntry,\n    userTimeSeconds: number\n  ): number {\n    if (motionQueueEntry == null) {\n      CubismDebug.print(LogLevel.LogLevel_Error, 'motionQueueEntry is null.');\n    }\n\n    let fadeWeight: number = this._weight; // 現在の値と掛け合わせる割合\n\n    //---- フェードイン・アウトの処理 ----\n    // 単純なサイン関数でイージングする\n    const fadeIn: number =\n      this._fadeInSeconds == 0.0\n        ? 1.0\n        : CubismMath.getEasingSine(\n            (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\n              this._fadeInSeconds\n          );\n\n    const fadeOut: number =\n      this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0\n        ? 1.0\n        : CubismMath.getEasingSine(\n            (motionQueueEntry.getEndTime() - userTimeSeconds) /\n              this._fadeOutSeconds\n          );\n\n    fadeWeight = fadeWeight * fadeIn * fadeOut;\n\n    motionQueueEntry.setState(userTimeSeconds, fadeWeight);\n\n    CSM_ASSERT(0.0 <= fadeWeight && fadeWeight <= 1.0);\n\n    return fadeWeight;\n  }\n\n  /**\n   * フェードインの時間を設定する\n   * @param fadeInSeconds フェードインにかかる時間[秒]\n   */\n  public setFadeInTime(fadeInSeconds: number): void {\n    this._fadeInSeconds = fadeInSeconds;\n  }\n\n  /**\n   * フェードアウトの時間を設定する\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\n   */\n  public setFadeOutTime(fadeOutSeconds: number): void {\n    this._fadeOutSeconds = fadeOutSeconds;\n  }\n\n  /**\n   * フェードアウトにかかる時間の取得\n   * @return フェードアウトにかかる時間[秒]\n   */\n  public getFadeOutTime(): number {\n    return this._fadeOutSeconds;\n  }\n\n  /**\n   * フェードインにかかる時間の取得\n   * @return フェードインにかかる時間[秒]\n   */\n  public getFadeInTime(): number {\n    return this._fadeInSeconds;\n  }\n\n  /**\n   * モーション適用の重みの設定\n   * @param weight 重み（0.0 - 1.0）\n   */\n  public setWeight(weight: number): void {\n    this._weight = weight;\n  }\n\n  /**\n   * モーション適用の重みの取得\n   * @return 重み（0.0 - 1.0）\n   */\n  public getWeight(): number {\n    return this._weight;\n  }\n\n  /**\n   * モーションの長さの取得\n   * @return モーションの長さ[秒]\n   *\n   * @note ループの時は「-1」。\n   *       ループでない場合は、オーバーライドする。\n   *       正の値の時は取得される時間で終了する。\n   *       「-1」の時は外部から停止命令がない限り終わらない処理となる。\n   */\n  public getDuration(): number {\n    return -1.0;\n  }\n\n  /**\n   * モーションのループ1回分の長さの取得\n   * @return モーションのループ一回分の長さ[秒]\n   *\n   * @note ループしない場合は、getDuration()と同じ値を返す\n   *       ループ一回分の長さが定義できない場合(プログラム的に動き続けるサブクラスなど)の場合は「-1」を返す\n   */\n  public getLoopDuration(): number {\n    return -1.0;\n  }\n\n  /**\n   * モーション再生の開始時刻の設定\n   * @param offsetSeconds モーション再生の開始時刻[秒]\n   */\n  public setOffsetTime(offsetSeconds: number): void {\n    this._offsetSeconds = offsetSeconds;\n  }\n\n  /**\n   * ループ情報の設定\n   * @param loop ループ情報\n   */\n  public setLoop(loop: boolean): void {\n    this._isLoop = loop;\n  }\n\n  /**\n   * ループ情報の取得\n   * @return true ループする\n   * @return false ループしない\n   */\n  public getLoop(): boolean {\n    return this._isLoop;\n  }\n\n  /**\n   * ループ時のフェードイン情報の設定\n   * @param loopFadeIn  ループ時のフェードイン情報\n   */\n  public setLoopFadeIn(loopFadeIn: boolean) {\n    this._isLoopFadeIn = loopFadeIn;\n  }\n\n  /**\n   * ループ時のフェードイン情報の取得\n   *\n   * @return  true    する\n   * @return  false   しない\n   */\n  public getLoopFadeIn(): boolean {\n    return this._isLoopFadeIn;\n  }\n\n  /**\n   * モデルのパラメータ更新\n   *\n   * イベント発火のチェック。\n   * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\n   *\n   * @param beforeCheckTimeSeconds 前回のイベントチェック時間[秒]\n   * @param motionTimeSeconds 今回の再生時間[秒]\n   */\n  public getFiredEvent(\n    beforeCheckTimeSeconds: number,\n    motionTimeSeconds: number\n  ): csmVector<csmString> {\n    return this._firedEventValues;\n  }\n\n  /**\n   * モーションを更新して、モデルにパラメータ値を反映する\n   * @param model 対象のモデル\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   * @param weight モーションの重み\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   * @return true モデルへパラメータ値の反映あり\n   * @return false モデルへのパラメータ値の反映なし（モーションの変化なし）\n   */\n  public abstract doUpdateParameters(\n    model: CubismModel,\n    userTimeSeconds: number,\n    weight: number,\n    motionQueueEntry: CubismMotionQueueEntry\n  ): void;\n\n  /**\n   * モーション再生開始コールバックの登録\n   *\n   * モーション再生開始コールバックを登録する。\n   * 以下の状態の際には呼び出されない:\n   *   1. 再生中のモーションが「ループ」として設定されているとき\n   *   2. コールバックが登録されていない時\n   *\n   * @param onBeganMotionHandler モーション再生開始コールバック関数\n   */\n  public setBeganMotionHandler = (onBeganMotionHandler: BeganMotionCallback) =>\n    (this._onBeganMotion = onBeganMotionHandler);\n\n  /**\n   * モーション再生開始コールバックの取得\n   *\n   * モーション再生開始コールバックを取得する。\n   *\n   * @return 登録されているモーション再生開始コールバック関数\n   */\n  public getBeganMotionHandler = () => this._onBeganMotion;\n\n  /**\n   * モーション再生終了コールバックの登録\n   *\n   * モーション再生終了コールバックを登録する。\n   * isFinishedフラグを設定するタイミングで呼び出される。\n   * 以下の状態の際には呼び出されない:\n   *   1. 再生中のモーションが「ループ」として設定されているとき\n   *   2. コールバックが登録されていない時\n   *\n   * @param onFinishedMotionHandler モーション再生終了コールバック関数\n   */\n  public setFinishedMotionHandler = (\n    onFinishedMotionHandler: FinishedMotionCallback\n  ) => (this._onFinishedMotion = onFinishedMotionHandler);\n\n  /**\n   * モーション再生終了コールバックの取得\n   *\n   * モーション再生終了コールバックを取得する。\n   *\n   * @return 登録されているモーション再生終了コールバック関数\n   */\n  public getFinishedMotionHandler = () => this._onFinishedMotion;\n\n  /**\n   * 透明度のカーブが存在するかどうかを確認する\n   *\n   * @return true  -> キーが存在する\n   *          false -> キーが存在しない\n   */\n  public isExistModelOpacity(): boolean {\n    return false;\n  }\n\n  /**\n   * 透明度のカーブのインデックスを返す\n   *\n   * @return success:透明度のカーブのインデックス\n   */\n  public getModelOpacityIndex(): number {\n    return -1;\n  }\n\n  /**\n   * 透明度のIdを返す\n   *\n   * @param index モーションカーブのインデックス\n   * @return success:透明度のId\n   */\n  public getModelOpacityId(index: number): CubismIdHandle {\n    return null;\n  }\n\n  /**\n   * 指定時間の透明度の値を返す\n   *\n   * @return success:モーションの現在時間におけるOpacityの値\n   *\n   * @note  更新後の値を取るにはUpdateParameters() の後に呼び出す。\n   */\n  protected getModelOpacityValue(): number {\n    return 1.0;\n  }\n\n  /**\n   * 終了時刻の調整\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   */\n  protected adjustEndTime(motionQueueEntry: CubismMotionQueueEntry) {\n    const duration = this.getDuration();\n\n    // duration == -1 の場合はループする\n    const endTime =\n      duration <= 0.0 ? -1 : motionQueueEntry.getStartTime() + duration;\n\n    motionQueueEntry.setEndTime(endTime);\n  }\n\n  public _fadeInSeconds: number; // フェードインにかかる時間[秒]\n  public _fadeOutSeconds: number; // フェードアウトにかかる時間[秒]\n  public _weight: number; // モーションの重み\n  public _offsetSeconds: number; // モーション再生の開始時間[秒]\n  public _isLoop: boolean; // ループが有効かのフラグ\n  public _isLoopFadeIn: boolean; // ループ時にフェードインが有効かどうかのフラグ\n  public _previousLoopState: boolean; // 前回の `_isLoop` の状態\n  public _firedEventValues: csmVector<csmString>;\n\n  // モーション再生開始コールバック関数\n  public _onBeganMotion?: BeganMotionCallback;\n  // モーション再生終了コールバック関数\n  public _onFinishedMotion?: FinishedMotionCallback;\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './acubismmotion';\nimport { CubismIdHandle } from '../id/cubismid';\nimport { LogLevel } from '../live2dcubismframework';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const ACubismMotion = $.ACubismMotion;\n  export type ACubismMotion = $.ACubismMotion;\n  export type BeganMotionCallback = $.BeganMotionCallback;\n  export type FinishedMotionCallback = $.FinishedMotionCallback;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmVector } from '../type/csmvector';\nimport { CubismJson, Value } from '../utils/cubismjson';\nimport { ACubismMotion } from './acubismmotion';\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\n\n// exp3.jsonのキーとデフォルト\nconst ExpressionKeyFadeIn = 'FadeInTime';\nconst ExpressionKeyFadeOut = 'FadeOutTime';\nconst ExpressionKeyParameters = 'Parameters';\nconst ExpressionKeyId = 'Id';\nconst ExpressionKeyValue = 'Value';\nconst ExpressionKeyBlend = 'Blend';\nconst BlendValueAdd = 'Add';\nconst BlendValueMultiply = 'Multiply';\nconst BlendValueOverwrite = 'Overwrite';\nconst DefaultFadeTime = 1.0;\n\n/**\n * 表情のモーション\n *\n * 表情のモーションクラス。\n */\nexport class CubismExpressionMotion extends ACubismMotion {\n  static readonly DefaultAdditiveValue = 0.0; // 加算適用の初期値\n  static readonly DefaultMultiplyValue = 1.0; // 乗算適用の初期値\n\n  /**\n   * インスタンスを作成する。\n   * @param buffer expファイルが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @return 作成されたインスタンス\n   */\n  public static create(\n    buffer: ArrayBuffer,\n    size: number\n  ): CubismExpressionMotion {\n    const expression: CubismExpressionMotion = new CubismExpressionMotion();\n    expression.parse(buffer, size);\n    return expression;\n  }\n\n  /**\n   * モデルのパラメータの更新の実行\n   * @param model 対象のモデル\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   * @param weight モーションの重み\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   */\n  public doUpdateParameters(\n    model: CubismModel,\n    userTimeSeconds: number,\n    weight: number,\n    motionQueueEntry: CubismMotionQueueEntry\n  ): void {\n    for (let i = 0; i < this._parameters.getSize(); ++i) {\n      const parameter: ExpressionParameter = this._parameters.at(i);\n\n      switch (parameter.blendType) {\n        case ExpressionBlendType.Additive: {\n          model.addParameterValueById(\n            parameter.parameterId,\n            parameter.value,\n            weight\n          );\n          break;\n        }\n        case ExpressionBlendType.Multiply: {\n          model.multiplyParameterValueById(\n            parameter.parameterId,\n            parameter.value,\n            weight\n          );\n          break;\n        }\n        case ExpressionBlendType.Overwrite: {\n          model.setParameterValueById(\n            parameter.parameterId,\n            parameter.value,\n            weight\n          );\n          break;\n        }\n        default:\n          // 仕様にない値を設定した時はすでに加算モードになっている\n          break;\n      }\n    }\n  }\n\n  /**\n   * @brief 表情によるモデルのパラメータの計算\n   *\n   * モデルの表情に関するパラメータを計算する。\n   *\n   * @param[in]   model                        対象のモデル\n   * @param[in]   userTimeSeconds              デルタ時間の積算値[秒]\n   * @param[in]   motionQueueEntry             CubismMotionQueueManagerで管理されているモーション\n   * @param[in]   expressionParameterValues    モデルに適用する各パラメータの値\n   * @param[in]   expressionIndex              表情のインデックス\n   * @param[in]   fadeWeight                   表情のウェイト\n   */\n  public calculateExpressionParameters(\n    model: CubismModel,\n    userTimeSeconds: number,\n    motionQueueEntry: CubismMotionQueueEntry,\n    expressionParameterValues: csmVector<ExpressionParameterValue>,\n    expressionIndex: number,\n    fadeWeight: number\n  ) {\n    if (motionQueueEntry == null || expressionParameterValues == null) {\n      return;\n    }\n\n    if (!motionQueueEntry.isAvailable()) {\n      return;\n    }\n\n    // CubismExpressionMotion._fadeWeight は廃止予定です。\n    // 互換性のために処理は残りますが、実際には使用しておりません。\n    this._fadeWeight = this.updateFadeWeight(motionQueueEntry, userTimeSeconds);\n\n    // モデルに適用する値を計算\n    for (let i = 0; i < expressionParameterValues.getSize(); ++i) {\n      const expressionParameterValue = expressionParameterValues.at(i);\n\n      if (expressionParameterValue.parameterId == null) {\n        continue;\n      }\n\n      const currentParameterValue = (expressionParameterValue.overwriteValue =\n        model.getParameterValueById(expressionParameterValue.parameterId));\n\n      const expressionParameters = this.getExpressionParameters();\n      let parameterIndex = -1;\n      for (let j = 0; j < expressionParameters.getSize(); ++j) {\n        if (\n          expressionParameterValue.parameterId !=\n          expressionParameters.at(j).parameterId\n        ) {\n          continue;\n        }\n\n        parameterIndex = j;\n\n        break;\n      }\n\n      // 再生中のExpressionが参照していないパラメータは初期値を適用\n      if (parameterIndex < 0) {\n        if (expressionIndex == 0) {\n          expressionParameterValue.additiveValue =\n            CubismExpressionMotion.DefaultAdditiveValue;\n          expressionParameterValue.multiplyValue =\n            CubismExpressionMotion.DefaultMultiplyValue;\n          expressionParameterValue.overwriteValue = currentParameterValue;\n        } else {\n          expressionParameterValue.additiveValue = this.calculateValue(\n            expressionParameterValue.additiveValue,\n            CubismExpressionMotion.DefaultAdditiveValue,\n            fadeWeight\n          );\n          expressionParameterValue.multiplyValue = this.calculateValue(\n            expressionParameterValue.multiplyValue,\n            CubismExpressionMotion.DefaultMultiplyValue,\n            fadeWeight\n          );\n          expressionParameterValue.overwriteValue = this.calculateValue(\n            expressionParameterValue.overwriteValue,\n            currentParameterValue,\n            fadeWeight\n          );\n        }\n        continue;\n      }\n\n      // 値を計算\n      const value = expressionParameters.at(parameterIndex).value;\n      let newAdditiveValue, newMultiplyValue, newOverwriteValue;\n      switch (expressionParameters.at(parameterIndex).blendType) {\n        case ExpressionBlendType.Additive:\n          newAdditiveValue = value;\n          newMultiplyValue = CubismExpressionMotion.DefaultMultiplyValue;\n          newOverwriteValue = currentParameterValue;\n          break;\n\n        case ExpressionBlendType.Multiply:\n          newAdditiveValue = CubismExpressionMotion.DefaultAdditiveValue;\n          newMultiplyValue = value;\n          newOverwriteValue = currentParameterValue;\n          break;\n\n        case ExpressionBlendType.Overwrite:\n          newAdditiveValue = CubismExpressionMotion.DefaultAdditiveValue;\n          newMultiplyValue = CubismExpressionMotion.DefaultMultiplyValue;\n          newOverwriteValue = value;\n          break;\n\n        default:\n          return;\n      }\n\n      if (expressionIndex == 0) {\n        expressionParameterValue.additiveValue = newAdditiveValue;\n        expressionParameterValue.multiplyValue = newMultiplyValue;\n        expressionParameterValue.overwriteValue = newOverwriteValue;\n      } else {\n        expressionParameterValue.additiveValue =\n          expressionParameterValue.additiveValue * (1.0 - fadeWeight) +\n          newAdditiveValue * fadeWeight;\n        expressionParameterValue.multiplyValue =\n          expressionParameterValue.multiplyValue * (1.0 - fadeWeight) +\n          newMultiplyValue * fadeWeight;\n        expressionParameterValue.overwriteValue =\n          expressionParameterValue.overwriteValue * (1.0 - fadeWeight) +\n          newOverwriteValue * fadeWeight;\n      }\n    }\n  }\n\n  /**\n   * @brief 表情が参照しているパラメータを取得\n   *\n   * 表情が参照しているパラメータを取得する\n   *\n   * @return 表情パラメータ\n   */\n  public getExpressionParameters() {\n    return this._parameters;\n  }\n\n  /**\n   * @brief 表情のフェードの値を取得\n   *\n   * 現在の表情のフェードのウェイト値を取得する\n   *\n   * @return 表情のフェードのウェイト値\n   *\n   * @deprecated CubismExpressionMotion.fadeWeightが削除予定のため非推奨。\n   * CubismExpressionMotionManager.getFadeWeight(index: number): number を使用してください。\n   * @see CubismExpressionMotionManager#getFadeWeight(index: number)\n   */\n  public getFadeWeight() {\n    return this._fadeWeight;\n  }\n\n  protected parse(buffer: ArrayBuffer, size: number) {\n    const json: CubismJson = CubismJson.create(buffer, size);\n    if (!json) {\n      return;\n    }\n\n    const root: Value = json.getRoot();\n\n    this.setFadeInTime(\n      root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime)\n    ); // フェードイン\n    this.setFadeOutTime(\n      root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime)\n    ); // フェードアウト\n\n    // 各パラメータについて\n    const parameterCount = root\n      .getValueByString(ExpressionKeyParameters)\n      .getSize();\n    this._parameters.prepareCapacity(parameterCount);\n\n    for (let i = 0; i < parameterCount; ++i) {\n      const param: Value = root\n        .getValueByString(ExpressionKeyParameters)\n        .getValueByIndex(i);\n      const parameterId: CubismIdHandle = CubismFramework.getIdManager().getId(\n        param.getValueByString(ExpressionKeyId).getRawString()\n      ); // パラメータID\n\n      const value: number = param\n        .getValueByString(ExpressionKeyValue)\n        .toFloat(); // 値\n\n      // 計算方法の設定\n      let blendType: ExpressionBlendType;\n\n      if (\n        param.getValueByString(ExpressionKeyBlend).isNull() ||\n        param.getValueByString(ExpressionKeyBlend).getString() == BlendValueAdd\n      ) {\n        blendType = ExpressionBlendType.Additive;\n      } else if (\n        param.getValueByString(ExpressionKeyBlend).getString() ==\n        BlendValueMultiply\n      ) {\n        blendType = ExpressionBlendType.Multiply;\n      } else if (\n        param.getValueByString(ExpressionKeyBlend).getString() ==\n        BlendValueOverwrite\n      ) {\n        blendType = ExpressionBlendType.Overwrite;\n      } else {\n        // その他 仕様にない値を設定した時は加算モードにすることで復旧\n        blendType = ExpressionBlendType.Additive;\n      }\n\n      // 設定オブジェクトを作成してリストに追加する\n      const item: ExpressionParameter = new ExpressionParameter();\n\n      item.parameterId = parameterId;\n      item.blendType = blendType;\n      item.value = value;\n\n      this._parameters.pushBack(item);\n    }\n\n    CubismJson.delete(json); // JSONデータは不要になったら削除する\n  }\n\n  /**\n   * @brief ブレンド計算\n   *\n   * 入力された値でブレンド計算をする。\n   *\n   * @param source 現在の値\n   * @param destination 適用する値\n   * @param weight ウェイト\n   * @return 計算結果\n   */\n  public calculateValue(\n    source: number,\n    destination: number,\n    fadeWeight: number\n  ): number {\n    return source * (1.0 - fadeWeight) + destination * fadeWeight;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  protected constructor() {\n    super();\n    this._parameters = new csmVector<ExpressionParameter>();\n    this._fadeWeight = 0.0;\n  }\n\n  private _parameters: csmVector<ExpressionParameter>; // 表情のパラメータ情報リスト\n\n  /**\n   * 表情の現在のウェイト\n   *\n   * @deprecated 不具合を引き起こす要因となるため非推奨。\n   */\n  private _fadeWeight: number;\n}\n\n/**\n * 表情パラメータ値の計算方式\n */\nexport enum ExpressionBlendType {\n  Additive = 0, // 加算\n  Multiply = 1, // 乗算\n  Overwrite = 2 // 上書き\n}\n\n/**\n * 表情のパラメータ情報\n */\nexport class ExpressionParameter {\n  parameterId: CubismIdHandle; // パラメータID\n  blendType: ExpressionBlendType; // パラメータの演算種類\n  value: number; // 値\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismexpressionmotion';\nimport { ExpressionParameterValue } from './cubismexpressionmotionmanager';\nimport { CubismDefaultParameterId } from '../cubismdefaultparameterid';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismExpressionMotion = $.CubismExpressionMotion;\n  export type CubismExpressionMotion = $.CubismExpressionMotion;\n  export const ExpressionBlendType = $.ExpressionBlendType;\n  export type ExpressionBlendType = $.ExpressionBlendType;\n  export const ExpressionParameter = $.ExpressionParameter;\n  export type ExpressionParameter = $.ExpressionParameter;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { ACubismMotion } from './acubismmotion';\nimport { CubismMotionQueueEntryHandle } from './cubismmotionqueuemanager';\n\n/**\n * CubismMotionQueueManagerで再生している各モーションの管理クラス。\n */\nexport class CubismMotionQueueEntry {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._autoDelete = false;\n    this._motion = null;\n    this._available = true;\n    this._finished = false;\n    this._started = false;\n    this._startTimeSeconds = -1.0;\n    this._fadeInStartTimeSeconds = 0.0;\n    this._endTimeSeconds = -1.0;\n    this._stateTimeSeconds = 0.0;\n    this._stateWeight = 0.0;\n    this._lastEventCheckSeconds = 0.0;\n    this._motionQueueEntryHandle = this;\n    this._fadeOutSeconds = 0.0;\n    this._isTriggeredFadeOut = false;\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    if (this._autoDelete && this._motion) {\n      ACubismMotion.delete(this._motion); //\n    }\n  }\n\n  /**\n   * フェードアウト時間と開始判定の設定\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\n   */\n  public setFadeOut(fadeOutSeconds: number): void {\n    this._fadeOutSeconds = fadeOutSeconds;\n    this._isTriggeredFadeOut = true;\n  }\n\n  /**\n   * フェードアウトの開始\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   */\n  public startFadeOut(fadeOutSeconds: number, userTimeSeconds: number): void {\n    const newEndTimeSeconds: number = userTimeSeconds + fadeOutSeconds;\n    this._isTriggeredFadeOut = true;\n\n    if (\n      this._endTimeSeconds < 0.0 ||\n      newEndTimeSeconds < this._endTimeSeconds\n    ) {\n      this._endTimeSeconds = newEndTimeSeconds;\n    }\n  }\n\n  /**\n   * モーションの終了の確認\n   *\n   * @return true モーションが終了した\n   * @return false 終了していない\n   */\n  public isFinished(): boolean {\n    return this._finished;\n  }\n\n  /**\n   * モーションの開始の確認\n   * @return true モーションが開始した\n   * @return false 開始していない\n   */\n  public isStarted(): boolean {\n    return this._started;\n  }\n\n  /**\n   * モーションの開始時刻の取得\n   * @return モーションの開始時刻[秒]\n   */\n  public getStartTime(): number {\n    return this._startTimeSeconds;\n  }\n\n  /**\n   * フェードインの開始時刻の取得\n   * @return フェードインの開始時刻[秒]\n   */\n  public getFadeInStartTime(): number {\n    return this._fadeInStartTimeSeconds;\n  }\n\n  /**\n   * フェードインの終了時刻の取得\n   * @return フェードインの終了時刻の取得\n   */\n  public getEndTime(): number {\n    return this._endTimeSeconds;\n  }\n\n  /**\n   * モーションの開始時刻の設定\n   * @param startTime モーションの開始時刻\n   */\n  public setStartTime(startTime: number): void {\n    this._startTimeSeconds = startTime;\n  }\n\n  /**\n   * フェードインの開始時刻の設定\n   * @param startTime フェードインの開始時刻[秒]\n   */\n  public setFadeInStartTime(startTime: number): void {\n    this._fadeInStartTimeSeconds = startTime;\n  }\n\n  /**\n   * フェードインの終了時刻の設定\n   * @param endTime フェードインの終了時刻[秒]\n   */\n  public setEndTime(endTime: number): void {\n    this._endTimeSeconds = endTime;\n  }\n\n  /**\n   * モーションの終了の設定\n   * @param f trueならモーションの終了\n   */\n  public setIsFinished(f: boolean): void {\n    this._finished = f;\n  }\n\n  /**\n   * モーション開始の設定\n   * @param f trueならモーションの開始\n   */\n  public setIsStarted(f: boolean): void {\n    this._started = f;\n  }\n\n  /**\n   * モーションの有効性の確認\n   * @return true モーションは有効\n   * @return false モーションは無効\n   */\n  public isAvailable(): boolean {\n    return this._available;\n  }\n\n  /**\n   * モーションの有効性の設定\n   * @param v trueならモーションは有効\n   */\n  public setIsAvailable(v: boolean): void {\n    this._available = v;\n  }\n\n  /**\n   * モーションの状態の設定\n   * @param timeSeconds 現在時刻[秒]\n   * @param weight モーション尾重み\n   */\n  public setState(timeSeconds: number, weight: number): void {\n    this._stateTimeSeconds = timeSeconds;\n    this._stateWeight = weight;\n  }\n\n  /**\n   * モーションの現在時刻の取得\n   * @return モーションの現在時刻[秒]\n   */\n  public getStateTime(): number {\n    return this._stateTimeSeconds;\n  }\n\n  /**\n   * モーションの重みの取得\n   * @return モーションの重み\n   */\n  public getStateWeight(): number {\n    return this._stateWeight;\n  }\n\n  /**\n   * 最後にイベントの発火をチェックした時間を取得\n   *\n   * @return 最後にイベントの発火をチェックした時間[秒]\n   */\n  public getLastCheckEventSeconds(): number {\n    return this._lastEventCheckSeconds;\n  }\n\n  /**\n   * 最後にイベントをチェックした時間を設定\n   * @param checkSeconds 最後にイベントをチェックした時間[秒]\n   */\n  public setLastCheckEventSeconds(checkSeconds: number): void {\n    this._lastEventCheckSeconds = checkSeconds;\n  }\n\n  /**\n   * フェードアウト開始判定の取得\n   * @return フェードアウト開始するかどうか\n   */\n  public isTriggeredFadeOut(): boolean {\n    return this._isTriggeredFadeOut;\n  }\n\n  /**\n   * フェードアウト時間の取得\n   * @return フェードアウト時間[秒]\n   */\n  public getFadeOutSeconds(): number {\n    return this._fadeOutSeconds;\n  }\n\n  /**\n   * モーションの取得\n   *\n   * @return モーション\n   */\n  public getCubismMotion(): ACubismMotion {\n    return this._motion;\n  }\n\n  _autoDelete: boolean; // 自動削除\n  _motion: ACubismMotion; // モーション\n\n  _available: boolean; // 有効化フラグ\n  _finished: boolean; // 終了フラグ\n  _started: boolean; // 開始フラグ\n  _startTimeSeconds: number; // モーション再生開始時刻[秒]\n  _fadeInStartTimeSeconds: number; // フェードイン開始時刻（ループの時は初回のみ）[秒]\n  _endTimeSeconds: number; // 終了予定時刻[秒]\n  _stateTimeSeconds: number; // 時刻の状態[秒]\n  _stateWeight: number; // 重みの状態\n  _lastEventCheckSeconds: number; // 最終のMotion側のチェックした時間\n  private _fadeOutSeconds: number; // フェードアウト時間[秒]\n  private _isTriggeredFadeOut: boolean; // フェードアウト開始フラグ\n\n  _motionQueueEntryHandle: CubismMotionQueueEntryHandle; // インスタンスごとに一意の値を持つ識別番号\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmotionqueueentry';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMotionQueueEntry = $.CubismMotionQueueEntry;\n  export type CubismMotionQueueEntry = $.CubismMotionQueueEntry;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { ACubismMotion } from './acubismmotion';\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\nimport { csmVector, iterator } from '../type/csmvector';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmString } from '../type/csmstring';\n\n/**\n * モーション再生の管理\n *\n * モーション再生の管理用クラス。CubismMotionモーションなどACubismMotionのサブクラスを再生するために使用する。\n *\n * @note 再生中に別のモーションが StartMotion()された場合は、新しいモーションに滑らかに変化し旧モーションは中断する。\n *       表情用モーション、体用モーションなどを分けてモーション化した場合など、\n *       複数のモーションを同時に再生させる場合は、複数のCubismMotionQueueManagerインスタンスを使用する。\n */\nexport class CubismMotionQueueManager {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._userTimeSeconds = 0.0;\n    this._eventCallBack = null;\n    this._eventCustomData = null;\n    this._motions = new csmVector<CubismMotionQueueEntry>();\n  }\n\n  /**\n   * デストラクタ\n   */\n  public release(): void {\n    for (let i = 0; i < this._motions.getSize(); ++i) {\n      if (this._motions.at(i)) {\n        this._motions.at(i).release();\n        this._motions.set(i, null);\n      }\n    }\n\n    this._motions = null;\n  }\n\n  /**\n   * 指定したモーションの開始\n   *\n   * 指定したモーションを開始する。同じタイプのモーションが既にある場合は、既存のモーションに終了フラグを立て、フェードアウトを開始させる。\n   *\n   * @param   motion          開始するモーション\n   * @param   autoDelete      再生が終了したモーションのインスタンスを削除するなら true\n   * @param   userTimeSeconds Deprecated: デルタ時間の積算値[秒] 関数内で参照していないため使用は非推奨。\n   * @return                      開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」\n   */\n  public startMotion(\n    motion: ACubismMotion,\n    autoDelete: boolean,\n    userTimeSeconds?: number\n  ): CubismMotionQueueEntryHandle {\n    if (motion == null) {\n      return InvalidMotionQueueEntryHandleValue;\n    }\n\n    let motionQueueEntry: CubismMotionQueueEntry = null;\n\n    // 既にモーションがあれば終了フラグを立てる\n    for (let i = 0; i < this._motions.getSize(); ++i) {\n      motionQueueEntry = this._motions.at(i);\n      if (motionQueueEntry == null) {\n        continue;\n      }\n\n      motionQueueEntry.setFadeOut(motionQueueEntry._motion.getFadeOutTime()); // フェードアウト設定\n    }\n\n    motionQueueEntry = new CubismMotionQueueEntry(); // 終了時に破棄する\n    motionQueueEntry._autoDelete = autoDelete;\n    motionQueueEntry._motion = motion;\n\n    this._motions.pushBack(motionQueueEntry);\n\n    return motionQueueEntry._motionQueueEntryHandle;\n  }\n\n  /**\n   * 全てのモーションの終了の確認\n   * @return true 全て終了している\n   * @return false 終了していない\n   */\n  public isFinished(): boolean {\n    // ------- 処理を行う -------\n    // 既にモーションがあれば終了フラグを立てる\n\n    for (\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\n      ite.notEqual(this._motions.end());\n\n    ) {\n      let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\n\n      if (motionQueueEntry == null) {\n        ite = this._motions.erase(ite); // 削除\n        continue;\n      }\n\n      const motion: ACubismMotion = motionQueueEntry._motion;\n\n      if (motion == null) {\n        motionQueueEntry.release();\n        motionQueueEntry = null;\n        ite = this._motions.erase(ite); // 削除\n        continue;\n      }\n\n      // ----- 終了済みの処理があれば削除する ------\n      if (!motionQueueEntry.isFinished()) {\n        return false;\n      } else {\n        ite.preIncrement();\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * 指定したモーションの終了の確認\n   * @param motionQueueEntryNumber モーションの識別番号\n   * @return true 全て終了している\n   * @return false 終了していない\n   */\n  public isFinishedByHandle(\n    motionQueueEntryNumber: CubismMotionQueueEntryHandle\n  ): boolean {\n    for (\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\n      ite.notEqual(this._motions.end());\n      ite.increment()\n    ) {\n      const motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\n\n      if (motionQueueEntry == null) {\n        continue;\n      }\n\n      if (\n        motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber &&\n        !motionQueueEntry.isFinished()\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * 全てのモーションを停止する\n   */\n  public stopAllMotions(): void {\n    // ------- 処理を行う -------\n    // 既にモーションがあれば終了フラグを立てる\n\n    for (\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\n      ite.notEqual(this._motions.end());\n\n    ) {\n      let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\n\n      if (motionQueueEntry == null) {\n        ite = this._motions.erase(ite);\n\n        continue;\n      }\n\n      // ----- 終了済みの処理があれば削除する ------\n      motionQueueEntry.release();\n      motionQueueEntry = null;\n      ite = this._motions.erase(ite); // 削除\n    }\n  }\n\n  /**\n   * @brief CubismMotionQueueEntryの配列の取得\n   *\n   * CubismMotionQueueEntryの配列を取得する。\n   *\n   * @return  CubismMotionQueueEntryの配列へのポインタ\n   *          NULL   見つからなかった\n   */\n  public getCubismMotionQueueEntries(): csmVector<CubismMotionQueueEntry> {\n    return this._motions;\n  }\n\n  /**\n   * 指定したCubismMotionQueueEntryの取得\n\n   * @param   motionQueueEntryNumber  モーションの識別番号\n   * @return  指定したCubismMotionQueueEntry\n   * @return  null   見つからなかった\n   */\n  public getCubismMotionQueueEntry(\n    motionQueueEntryNumber: any\n  ): CubismMotionQueueEntry {\n    //------- 処理を行う -------\n    for (\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\n      ite.notEqual(this._motions.end());\n      ite.preIncrement()\n    ) {\n      const motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\n\n      if (motionQueueEntry == null) {\n        continue;\n      }\n\n      if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber) {\n        return motionQueueEntry;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * イベントを受け取るCallbackの登録\n   *\n   * @param callback コールバック関数\n   * @param customData コールバックに返されるデータ\n   */\n  public setEventCallback(\n    callback: CubismMotionEventFunction,\n    customData: any = null\n  ): void {\n    this._eventCallBack = callback;\n    this._eventCustomData = customData;\n  }\n\n  /**\n   * モーションを更新して、モデルにパラメータ値を反映する。\n   *\n   * @param   model   対象のモデル\n   * @param   userTimeSeconds   デルタ時間の積算値[秒]\n   * @return  true    モデルへパラメータ値の反映あり\n   * @return  false   モデルへパラメータ値の反映なし(モーションの変化なし)\n   */\n  public doUpdateMotion(model: CubismModel, userTimeSeconds: number): boolean {\n    let updated = false;\n\n    // ------- 処理を行う --------\n    // 既にモーションがあれば終了フラグを立てる\n\n    for (\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\n      ite.notEqual(this._motions.end());\n\n    ) {\n      let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\n\n      if (motionQueueEntry == null) {\n        ite = this._motions.erase(ite); // 削除\n        continue;\n      }\n\n      const motion: ACubismMotion = motionQueueEntry._motion;\n\n      if (motion == null) {\n        motionQueueEntry.release();\n        motionQueueEntry = null;\n        ite = this._motions.erase(ite); // 削除\n\n        continue;\n      }\n\n      // ------ 値を反映する ------\n      motion.updateParameters(model, motionQueueEntry, userTimeSeconds);\n      updated = true;\n\n      // ------ ユーザトリガーイベントを検査する ----\n      const firedList: csmVector<csmString> = motion.getFiredEvent(\n        motionQueueEntry.getLastCheckEventSeconds() -\n          motionQueueEntry.getStartTime(),\n        userTimeSeconds - motionQueueEntry.getStartTime()\n      );\n\n      for (let i = 0; i < firedList.getSize(); ++i) {\n        this._eventCallBack(this, firedList.at(i), this._eventCustomData);\n      }\n\n      motionQueueEntry.setLastCheckEventSeconds(userTimeSeconds);\n\n      // ------ 終了済みの処理があれば削除する ------\n      if (motionQueueEntry.isFinished()) {\n        motionQueueEntry.release();\n        motionQueueEntry = null;\n        ite = this._motions.erase(ite); // 削除\n      } else {\n        if (motionQueueEntry.isTriggeredFadeOut()) {\n          motionQueueEntry.startFadeOut(\n            motionQueueEntry.getFadeOutSeconds(),\n            userTimeSeconds\n          );\n        }\n        ite.preIncrement();\n      }\n    }\n\n    return updated;\n  }\n  _userTimeSeconds: number; // デルタ時間の積算値[秒]\n\n  _motions: csmVector<CubismMotionQueueEntry>; // モーション\n  _eventCallBack: CubismMotionEventFunction; // コールバック関数\n  _eventCustomData: any; // コールバックに戻されるデータ\n}\n\n/**\n * イベントのコールバック関数を定義\n *\n * イベントのコールバックに登録できる関数の型情報\n * @param caller        発火したイベントを再生させたCubismMotionQueueManager\n * @param eventValue    発火したイベントの文字列データ\n * @param customData   コールバックに返される登録時に指定されたデータ\n */\nexport interface CubismMotionEventFunction {\n  (\n    caller: CubismMotionQueueManager,\n    eventValue: csmString,\n    customData: any\n  ): void;\n}\n\n/**\n * モーションの識別番号\n *\n * モーションの識別番号の定義\n */\nexport declare type CubismMotionQueueEntryHandle = any;\nexport const InvalidMotionQueueEntryHandleValue: CubismMotionQueueEntryHandle =\n  -1;\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmotionqueuemanager';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMotionQueueManager = $.CubismMotionQueueManager;\n  export type CubismMotionQueueManager = $.CubismMotionQueueManager;\n  export const InvalidMotionQueueEntryHandleValue =\n    $.InvalidMotionQueueEntryHandleValue;\n  export type CubismMotionQueueEntryHandle = $.CubismMotionQueueEntryHandle;\n  export type CubismMotionEventFunction = $.CubismMotionEventFunction;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismId, CubismIdHandle } from '../id/cubismid';\nimport { LogLevel, csmDelete } from '../live2dcubismframework';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmVector, iterator } from '../type/csmvector';\nimport { ACubismMotion } from './acubismmotion';\nimport { CubismExpressionMotion } from './cubismexpressionmotion';\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\nimport {\n  CubismMotionQueueEntryHandle,\n  CubismMotionQueueManager\n} from './cubismmotionqueuemanager';\nimport { CubismLogInfo } from '../utils/cubismdebug';\n\n/**\n * @brief パラメータに適用する表情の値を持たせる構造体\n */\nexport class ExpressionParameterValue {\n  parameterId: CubismIdHandle; // パラメーターID\n  additiveValue: number; // 加算値\n  multiplyValue: number; // 乗算値\n  overwriteValue: number; // 上書き値\n}\n\n/**\n * @brief 表情モーションの管理\n *\n * 表情モーションの管理をおこなうクラス。\n */\nexport class CubismExpressionMotionManager extends CubismMotionQueueManager {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n    this._currentPriority = 0;\n    this._reservePriority = 0;\n    this._expressionParameterValues = new csmVector<ExpressionParameterValue>();\n    this._fadeWeights = new csmVector<number>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    if (this._expressionParameterValues) {\n      csmDelete(this._expressionParameterValues);\n      this._expressionParameterValues = null;\n    }\n\n    if (this._fadeWeights) {\n      csmDelete(this._fadeWeights);\n      this._fadeWeights = null;\n    }\n  }\n\n  /**\n   * @deprecated\n   * ExpressionではPriorityを使用していないため、この関数は非推奨となりました。\n   *\n   * @brief 再生中のモーションの優先度の取得\n   *\n   * 再生中のモーションの優先度を取得する。\n   *\n   * @return モーションの優先度\n   */\n  public getCurrentPriority(): number {\n    CubismLogInfo(\n      'CubismExpressionMotionManager.getCurrentPriority() is deprecated because a priority value is not actually used during expression motion playback.'\n    );\n    return this._currentPriority;\n  }\n\n  /**\n   * @deprecated\n   * ExpressionではPriorityを使用していないため、この関数は非推奨となりました。\n   *\n   * @brief 予約中のモーションの優先度の取得\n   *\n   * 予約中のモーションの優先度を取得する。\n   *\n   * @return  モーションの優先度\n   */\n  public getReservePriority(): number {\n    CubismLogInfo(\n      'CubismExpressionMotionManager.getReservePriority() is deprecated because a priority value is not actually used during expression motion playback.'\n    );\n    return this._reservePriority;\n  }\n\n  /**\n   * @brief 再生中のモーションのウェイトを取得する。\n   *\n   * @param[in]    index    表情のインデックス\n   * @return               表情モーションのウェイト\n   */\n  public getFadeWeight(index: number): number {\n    if (\n      index < 0 ||\n      this._fadeWeights.getSize() < 1 ||\n      index >= this._fadeWeights.getSize()\n    ) {\n      console.warn(\n        'Failed to get the fade weight value. The element at that index does not exist.'\n      );\n      return -1;\n    }\n\n    return this._fadeWeights.at(index);\n  }\n\n  /**\n   * @brief モーションのウェイトの設定。\n   *\n   * @param[in]    index    表情のインデックス\n   * @param[in]    index    表情モーションのウェイト\n   */\n  public setFadeWeight(index: number, expressionFadeWeight: number): void {\n    if (\n      index < 0 ||\n      this._fadeWeights.getSize() < 1 ||\n      this._fadeWeights.getSize() <= index\n    ) {\n      console.warn(\n        'Failed to set the fade weight value. The element at that index does not exist.'\n      );\n      return;\n    }\n\n    this._fadeWeights.set(index, expressionFadeWeight);\n  }\n\n  /**\n   * @deprecated\n   * ExpressionではPriorityを使用していないため、この関数は非推奨となりました。\n   *\n   * @brief 予約中のモーションの優先度の設定\n   *\n   * 予約中のモーションの優先度を設定する。\n   *\n   * @param[in]   priority     優先度\n   */\n  public setReservePriority(priority: number) {\n    CubismLogInfo(\n      'CubismExpressionMotionManager.setReservePriority() is deprecated because a priority value is not actually used during expression motion playback.'\n    );\n    this._reservePriority = priority;\n  }\n\n  /**\n   * @deprecated\n   * ExpressionではPriorityを使用していないため、この関数は非推奨となりました。\n   * CubismExpressionMotionManager.startMotion() を使用してください。\n   *\n   * @brief 優先度を設定してモーションの開始\n   *\n   * 優先度を設定してモーションを開始する。\n   *\n   * @param[in]   motion          モーション\n   * @param[in]   autoDelete      再生が終了したモーションのインスタンスを削除するならtrue\n   * @param[in]   priority        優先度\n   * @return                      開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」\n   */\n  public startMotionPriority(\n    motion: ACubismMotion,\n    autoDelete: boolean,\n    priority: number\n  ): CubismMotionQueueEntryHandle {\n    CubismLogInfo(\n      'CubismExpressionMotionManager.startMotionPriority() is deprecated because a priority value is not actually used during expression motion playback.'\n    );\n    if (priority == this.getReservePriority()) {\n      this.setReservePriority(0);\n    }\n    this._currentPriority = priority;\n\n    return this.startMotion(motion, autoDelete);\n  }\n\n  /**\n   * @brief モーションの更新\n   *\n   * モーションを更新して、モデルにパラメータ値を反映する。\n   *\n   * @param[in]   model   対象のモデル\n   * @param[in]   deltaTimeSeconds    デルタ時間[秒]\n   * @return  true    更新されている\n   *          false   更新されていない\n   */\n  public updateMotion(model: CubismModel, deltaTimeSeconds: number): boolean {\n    this._userTimeSeconds += deltaTimeSeconds;\n    let updated = false;\n    const motions = this.getCubismMotionQueueEntries();\n\n    let expressionWeight = 0.0;\n    let expressionIndex = 0;\n\n    if (this._fadeWeights.getSize() !== motions.getSize()) {\n      const difference = motions.getSize() - this._fadeWeights.getSize();\n      for (let i = 0; i < difference; i++) {\n        this._fadeWeights.pushBack(0.0);\n      }\n    }\n\n    // ------- 処理を行う --------\n    // 既にモーションがあれば終了フラグを立てる\n    for (\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\n      ite.notEqual(this._motions.end());\n\n    ) {\n      const motionQueueEntry = ite.ptr();\n\n      if (motionQueueEntry == null) {\n        ite = motions.erase(ite); //削除\n        continue;\n      }\n\n      const expressionMotion = <CubismExpressionMotion>(\n        motionQueueEntry.getCubismMotion()\n      );\n\n      if (expressionMotion == null) {\n        csmDelete(motionQueueEntry);\n        ite = motions.erase(ite); //削除\n        continue;\n      }\n\n      const expressionParameters = expressionMotion.getExpressionParameters();\n\n      if (motionQueueEntry.isAvailable()) {\n        // 再生中のExpressionが参照しているパラメータをすべてリストアップ\n        for (let i = 0; i < expressionParameters.getSize(); ++i) {\n          if (expressionParameters.at(i).parameterId == null) {\n            continue;\n          }\n\n          let index = -1;\n          // リストにパラメータIDが存在するか検索\n          for (let j = 0; j < this._expressionParameterValues.getSize(); ++j) {\n            if (\n              this._expressionParameterValues.at(j).parameterId !=\n              expressionParameters.at(i).parameterId\n            ) {\n              continue;\n            }\n\n            index = j;\n            break;\n          }\n\n          if (index >= 0) {\n            continue;\n          }\n\n          // パラメータがリストに存在しないなら新規追加\n          const item: ExpressionParameterValue = new ExpressionParameterValue();\n          item.parameterId = expressionParameters.at(i).parameterId;\n          item.additiveValue = CubismExpressionMotion.DefaultAdditiveValue;\n          item.multiplyValue = CubismExpressionMotion.DefaultMultiplyValue;\n          item.overwriteValue = model.getParameterValueById(item.parameterId);\n          this._expressionParameterValues.pushBack(item);\n        }\n      }\n\n      // ------ 値を計算する ------\n      expressionMotion.setupMotionQueueEntry(\n        motionQueueEntry,\n        this._userTimeSeconds\n      );\n      this.setFadeWeight(\n        expressionIndex,\n        expressionMotion.updateFadeWeight(\n          motionQueueEntry,\n          this._userTimeSeconds\n        )\n      );\n      expressionMotion.calculateExpressionParameters(\n        model,\n        this._userTimeSeconds,\n        motionQueueEntry,\n        this._expressionParameterValues,\n        expressionIndex,\n        this.getFadeWeight(expressionIndex)\n      );\n\n      expressionWeight +=\n        expressionMotion.getFadeInTime() == 0.0\n          ? 1.0\n          : CubismMath.getEasingSine(\n              (this._userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\n                expressionMotion.getFadeInTime()\n            );\n\n      updated = true;\n\n      if (motionQueueEntry.isTriggeredFadeOut()) {\n        // フェードアウト開始\n        motionQueueEntry.startFadeOut(\n          motionQueueEntry.getFadeOutSeconds(),\n          this._userTimeSeconds\n        );\n      }\n\n      ite.preIncrement();\n      ++expressionIndex;\n    }\n\n    // ----- 最新のExpressionのフェードが完了していればそれ以前を削除する ------\n    if (motions.getSize() > 1) {\n      const latestFadeWeight: number = this.getFadeWeight(\n        this._fadeWeights.getSize() - 1\n      );\n      if (latestFadeWeight >= 1.0) {\n        // 配列の最後の要素は削除しない\n        for (let i = motions.getSize() - 2; i >= 0; --i) {\n          const motionQueueEntry = motions.at(i);\n          csmDelete(motionQueueEntry);\n          motions.remove(i);\n          this._fadeWeights.remove(i);\n        }\n      }\n    }\n\n    if (expressionWeight > 1.0) {\n      expressionWeight = 1.0;\n    }\n\n    // モデルに各値を適用\n    for (let i = 0; i < this._expressionParameterValues.getSize(); ++i) {\n      const expressionParameterValue = this._expressionParameterValues.at(i);\n      model.setParameterValueById(\n        expressionParameterValue.parameterId,\n        (expressionParameterValue.overwriteValue +\n          expressionParameterValue.additiveValue) *\n          expressionParameterValue.multiplyValue,\n        expressionWeight\n      );\n\n      expressionParameterValue.additiveValue =\n        CubismExpressionMotion.DefaultAdditiveValue;\n      expressionParameterValue.multiplyValue =\n        CubismExpressionMotion.DefaultMultiplyValue;\n    }\n\n    return updated;\n  }\n\n  private _expressionParameterValues: csmVector<ExpressionParameterValue>; ///< モデルに適用する各パラメータの値\n  private _fadeWeights: csmVector<number>; ///< 再生中の表情のウェイト\n  private _currentPriority: number; ///< @deprecated 現在再生中のモーションの優先度。Expressionでは使用しないため非推奨。\n  private _reservePriority: number; ///< @deprecated 再生予定のモーションの優先度。再生中は0になる。モーションファイルを別スレッドで読み込むときの機能。Expressionでは使用しないため非推奨。\n  private _startExpressionTime: number; ///< 表情の再生開始時刻\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismexpressionmotionmanager';\nimport { CubismMath } from '../math/cubismmath';\nimport { CubismDebug, CubismLogError } from '../utils/cubismdebug';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismExpressionMotionManager = $.CubismExpressionMotionManager;\n  export type CubismExpressionMotionManager = $.CubismExpressionMotionManager;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { csmString } from '../type/csmstring';\nimport { csmVector } from '../type/csmvector';\n\n/**\n * @brief モーションカーブの種類\n *\n * モーションカーブの種類。\n */\nexport enum CubismMotionCurveTarget {\n  CubismMotionCurveTarget_Model, // モデルに対して\n  CubismMotionCurveTarget_Parameter, // パラメータに対して\n  CubismMotionCurveTarget_PartOpacity // パーツの不透明度に対して\n}\n\n/**\n * @brief モーションカーブのセグメントの種類\n *\n * モーションカーブのセグメントの種類。\n */\nexport enum CubismMotionSegmentType {\n  CubismMotionSegmentType_Linear = 0, // リニア\n  CubismMotionSegmentType_Bezier = 1, // ベジェ曲線\n  CubismMotionSegmentType_Stepped = 2, // ステップ\n  CubismMotionSegmentType_InverseStepped = 3 // インバースステップ\n}\n\n/**\n * @brief モーションカーブの制御点\n *\n * モーションカーブの制御点。\n */\nexport class CubismMotionPoint {\n  time = 0.0; // 時間[秒]\n  value = 0.0; // 値\n}\n\n/**\n * モーションカーブのセグメントの評価関数\n *\n * @param   points      モーションカーブの制御点リスト\n * @param   time        評価する時間[秒]\n */\nexport interface csmMotionSegmentEvaluationFunction {\n  (points: CubismMotionPoint[], time: number): number;\n}\n\n/**\n * @brief モーションカーブのセグメント\n *\n * モーションカーブのセグメント。\n */\nexport class CubismMotionSegment {\n  /**\n   * @brief コンストラクタ\n   *\n   * コンストラクタ。\n   */\n  public constructor() {\n    this.evaluate = null;\n    this.basePointIndex = 0;\n    this.segmentType = 0;\n  }\n\n  evaluate: csmMotionSegmentEvaluationFunction; // 使用する評価関数\n  basePointIndex: number; // 最初のセグメントへのインデックス\n  segmentType: number; // セグメントの種類\n}\n\n/**\n * @brief モーションカーブ\n *\n * モーションカーブ。\n */\nexport class CubismMotionCurve {\n  public constructor() {\n    this.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\n    this.segmentCount = 0;\n    this.baseSegmentIndex = 0;\n    this.fadeInTime = 0.0;\n    this.fadeOutTime = 0.0;\n  }\n\n  type: CubismMotionCurveTarget; // カーブの種類\n  id: CubismIdHandle; // カーブのID\n  segmentCount: number; // セグメントの個数\n  baseSegmentIndex: number; // 最初のセグメントのインデックス\n  fadeInTime: number; // フェードインにかかる時間[秒]\n  fadeOutTime: number; // フェードアウトにかかる時間[秒]\n}\n\n/**\n * イベント。\n */\nexport class CubismMotionEvent {\n  fireTime = 0.0;\n  value: csmString;\n}\n\n/**\n * @brief モーションデータ\n *\n * モーションデータ。\n */\nexport class CubismMotionData {\n  public constructor() {\n    this.duration = 0.0;\n    this.loop = false;\n    this.curveCount = 0;\n    this.eventCount = 0;\n    this.fps = 0.0;\n\n    this.curves = new csmVector<CubismMotionCurve>();\n    this.segments = new csmVector<CubismMotionSegment>();\n    this.points = new csmVector<CubismMotionPoint>();\n    this.events = new csmVector<CubismMotionEvent>();\n  }\n\n  duration: number; // モーションの長さ[秒]\n  loop: boolean; // ループするかどうか\n  curveCount: number; // カーブの個数\n  eventCount: number; // UserDataの個数\n  fps: number; // フレームレート\n  curves: csmVector<CubismMotionCurve>; // カーブのリスト\n  segments: csmVector<CubismMotionSegment>; // セグメントのリスト\n  points: csmVector<CubismMotionPoint>; // ポイントのリスト\n  events: csmVector<CubismMotionEvent>; // イベントのリスト\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmotioninternal';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMotionCurve = $.CubismMotionCurve;\n  export type CubismMotionCurve = $.CubismMotionCurve;\n  export const CubismMotionCurveTarget = $.CubismMotionCurveTarget;\n  export type CubismMotionCurveTarget = $.CubismMotionCurveTarget;\n  export const CubismMotionData = $.CubismMotionData;\n  export type CubismMotionData = $.CubismMotionData;\n  export const CubismMotionEvent = $.CubismMotionEvent;\n  export type CubismMotionEvent = $.CubismMotionEvent;\n  export const CubismMotionPoint = $.CubismMotionPoint;\n  export type CubismMotionPoint = $.CubismMotionPoint;\n  export const CubismMotionSegment = $.CubismMotionSegment;\n  export type CubismMotionSegment = $.CubismMotionSegment;\n  export const CubismMotionSegmentType = $.CubismMotionSegmentType;\n  export type CubismMotionSegmentType = $.CubismMotionSegmentType;\n  export type csmMotionSegmentEvaluationFunction =\n    $.csmMotionSegmentEvaluationFunction;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { csmString } from '../type/csmstring';\nimport { CSM_ASSERT, CubismLogWarning } from '../utils/cubismdebug';\nimport { CubismJson, JsonMap } from '../utils/cubismjson';\nimport { CubismMotionSegmentType } from './cubismmotioninternal';\n\n// JSON keys\nconst Meta = 'Meta';\nconst Duration = 'Duration';\nconst Loop = 'Loop';\nconst AreBeziersRestricted = 'AreBeziersRestricted';\nconst CurveCount = 'CurveCount';\nconst Fps = 'Fps';\nconst TotalSegmentCount = 'TotalSegmentCount';\nconst TotalPointCount = 'TotalPointCount';\nconst Curves = 'Curves';\nconst Target = 'Target';\nconst Id = 'Id';\nconst FadeInTime = 'FadeInTime';\nconst FadeOutTime = 'FadeOutTime';\nconst Segments = 'Segments';\nconst UserData = 'UserData';\nconst UserDataCount = 'UserDataCount';\nconst TotalUserDataSize = 'TotalUserDataSize';\nconst Time = 'Time';\nconst Value = 'Value';\n\n/**\n * motion3.jsonのコンテナ。\n */\nexport class CubismMotionJson {\n  /**\n   * コンストラクタ\n   * @param buffer motion3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  public constructor(buffer: ArrayBuffer, size: number) {\n    this._json = CubismJson.create(buffer, size);\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    CubismJson.delete(this._json);\n  }\n\n  /**\n   * モーションの長さを取得する\n   * @return モーションの長さ[秒]\n   */\n  public getMotionDuration(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(Duration)\n      .toFloat();\n  }\n\n  /**\n   * モーションのループ情報の取得\n   * @return true ループする\n   * @return false ループしない\n   */\n  public isMotionLoop(): boolean {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(Loop)\n      .toBoolean();\n  }\n\n  /**\n   *  motion3.jsonファイルの整合性チェック\n   *\n   * @return 正常なファイルの場合はtrueを返す。\n   */\n  hasConsistency(): boolean {\n    let result = true;\n\n    if (!this._json || !this._json.getRoot()) {\n      return false;\n    }\n\n    const actualCurveListSize = this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getVector()\n      .getSize();\n    let actualTotalSegmentCount = 0;\n    let actualTotalPointCount = 0;\n\n    // カウント処理\n    for (\n      let curvePosition = 0;\n      curvePosition < actualCurveListSize;\n      ++curvePosition\n    ) {\n      for (\n        let segmentPosition = 0;\n        segmentPosition < this.getMotionCurveSegmentCount(curvePosition);\n\n      ) {\n        if (segmentPosition == 0) {\n          actualTotalPointCount += 1;\n          segmentPosition += 2;\n        }\n\n        const segment = this.getMotionCurveSegment(\n          curvePosition,\n          segmentPosition\n        ) as CubismMotionSegmentType;\n\n        switch (segment) {\n          case CubismMotionSegmentType.CubismMotionSegmentType_Linear:\n            actualTotalPointCount += 1;\n            segmentPosition += 3;\n            break;\n          case CubismMotionSegmentType.CubismMotionSegmentType_Bezier:\n            actualTotalPointCount += 3;\n            segmentPosition += 7;\n            break;\n          case CubismMotionSegmentType.CubismMotionSegmentType_Stepped:\n            actualTotalPointCount += 1;\n            segmentPosition += 3;\n            break;\n          case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped:\n            actualTotalPointCount += 1;\n            segmentPosition += 3;\n            break;\n          default:\n            CSM_ASSERT(0);\n            break;\n        }\n\n        ++actualTotalSegmentCount;\n      }\n    }\n\n    // 個数チェック\n    if (actualCurveListSize != this.getMotionCurveCount()) {\n      CubismLogWarning('The number of curves does not match the metadata.');\n      result = false;\n    }\n    if (actualTotalSegmentCount != this.getMotionTotalSegmentCount()) {\n      CubismLogWarning('The number of segment does not match the metadata.');\n      result = false;\n    }\n    if (actualTotalPointCount != this.getMotionTotalPointCount()) {\n      CubismLogWarning('The number of point does not match the metadata.');\n      result = false;\n    }\n\n    return result;\n  }\n\n  public getEvaluationOptionFlag(flagType: EvaluationOptionFlag): boolean {\n    if (\n      EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted == flagType\n    ) {\n      return this._json\n        .getRoot()\n        .getValueByString(Meta)\n        .getValueByString(AreBeziersRestricted)\n        .toBoolean();\n    }\n\n    return false;\n  }\n\n  /**\n   * モーションカーブの個数の取得\n   * @return モーションカーブの個数\n   */\n  public getMotionCurveCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(CurveCount)\n      .toInt();\n  }\n\n  /**\n   * モーションのフレームレートの取得\n   * @return フレームレート[FPS]\n   */\n  public getMotionFps(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(Fps)\n      .toFloat();\n  }\n\n  /**\n   * モーションのセグメントの総合計の取得\n   * @return モーションのセグメントの取得\n   */\n  public getMotionTotalSegmentCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(TotalSegmentCount)\n      .toInt();\n  }\n\n  /**\n   * モーションのカーブの制御店の総合計の取得\n   * @return モーションのカーブの制御点の総合計\n   */\n  public getMotionTotalPointCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(TotalPointCount)\n      .toInt();\n  }\n\n  /**\n   * モーションのフェードイン時間の存在\n   * @return true 存在する\n   * @return false 存在しない\n   */\n  public isExistMotionFadeInTime(): boolean {\n    return !this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(FadeInTime)\n      .isNull();\n  }\n\n  /**\n   * モーションのフェードアウト時間の存在\n   * @return true 存在する\n   * @return false 存在しない\n   */\n  public isExistMotionFadeOutTime(): boolean {\n    return !this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(FadeOutTime)\n      .isNull();\n  }\n\n  /**\n   * モーションのフェードイン時間の取得\n   * @return フェードイン時間[秒]\n   */\n  public getMotionFadeInTime(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(FadeInTime)\n      .toFloat();\n  }\n\n  /**\n   * モーションのフェードアウト時間の取得\n   * @return フェードアウト時間[秒]\n   */\n  public getMotionFadeOutTime(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(FadeOutTime)\n      .toFloat();\n  }\n\n  /**\n   * モーションのカーブの種類の取得\n   * @param curveIndex カーブのインデックス\n   * @return カーブの種類\n   */\n  public getMotionCurveTarget(curveIndex: number): string {\n    return this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getValueByIndex(curveIndex)\n      .getValueByString(Target)\n      .getRawString();\n  }\n\n  /**\n   * モーションのカーブのIDの取得\n   * @param curveIndex カーブのインデックス\n   * @return カーブのID\n   */\n  public getMotionCurveId(curveIndex: number): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._json\n        .getRoot()\n        .getValueByString(Curves)\n        .getValueByIndex(curveIndex)\n        .getValueByString(Id)\n        .getRawString()\n    );\n  }\n\n  /**\n   * モーションのカーブのフェードイン時間の存在\n   * @param curveIndex カーブのインデックス\n   * @return true 存在する\n   * @return false 存在しない\n   */\n  public isExistMotionCurveFadeInTime(curveIndex: number): boolean {\n    return !this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getValueByIndex(curveIndex)\n      .getValueByString(FadeInTime)\n      .isNull();\n  }\n\n  /**\n   * モーションのカーブのフェードアウト時間の存在\n   * @param curveIndex カーブのインデックス\n   * @return true 存在する\n   * @return false 存在しない\n   */\n  public isExistMotionCurveFadeOutTime(curveIndex: number): boolean {\n    return !this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getValueByIndex(curveIndex)\n      .getValueByString(FadeOutTime)\n      .isNull();\n  }\n\n  /**\n   * モーションのカーブのフェードイン時間の取得\n   * @param curveIndex カーブのインデックス\n   * @return フェードイン時間[秒]\n   */\n  public getMotionCurveFadeInTime(curveIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getValueByIndex(curveIndex)\n      .getValueByString(FadeInTime)\n      .toFloat();\n  }\n\n  /**\n   * モーションのカーブのフェードアウト時間の取得\n   * @param curveIndex カーブのインデックス\n   * @return フェードアウト時間[秒]\n   */\n  public getMotionCurveFadeOutTime(curveIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getValueByIndex(curveIndex)\n      .getValueByString(FadeOutTime)\n      .toFloat();\n  }\n\n  /**\n   * モーションのカーブのセグメントの個数を取得する\n   * @param curveIndex カーブのインデックス\n   * @return モーションのカーブのセグメントの個数\n   */\n  public getMotionCurveSegmentCount(curveIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getValueByIndex(curveIndex)\n      .getValueByString(Segments)\n      .getVector()\n      .getSize();\n  }\n\n  /**\n   * モーションのカーブのセグメントの値の取得\n   * @param curveIndex カーブのインデックス\n   * @param segmentIndex セグメントのインデックス\n   * @return セグメントの値\n   */\n  public getMotionCurveSegment(\n    curveIndex: number,\n    segmentIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getValueByIndex(curveIndex)\n      .getValueByString(Segments)\n      .getValueByIndex(segmentIndex)\n      .toFloat();\n  }\n\n  /**\n   * イベントの個数の取得\n   * @return イベントの個数\n   */\n  public getEventCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(UserDataCount)\n      .toInt();\n  }\n\n  /**\n   *  イベントの総文字数の取得\n   * @return イベントの総文字数\n   */\n  public getTotalEventValueSize(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(TotalUserDataSize)\n      .toInt();\n  }\n\n  /**\n   * イベントの時間の取得\n   * @param userDataIndex イベントのインデックス\n   * @return イベントの時間[秒]\n   */\n  public getEventTime(userDataIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(UserData)\n      .getValueByIndex(userDataIndex)\n      .getValueByString(Time)\n      .toFloat();\n  }\n\n  /**\n   * イベントの取得\n   * @param userDataIndex イベントのインデックス\n   * @return イベントの文字列\n   */\n  public getEventValue(userDataIndex: number): csmString {\n    return new csmString(\n      this._json\n        .getRoot()\n        .getValueByString(UserData)\n        .getValueByIndex(userDataIndex)\n        .getValueByString(Value)\n        .getRawString()\n    );\n  }\n\n  _json: CubismJson; // motion3.jsonのデータ\n}\n\n/**\n * @brief ベジェカーブの解釈方法のフラグタイプ\n */\nexport enum EvaluationOptionFlag {\n  EvaluationOptionFlag_AreBeziersRistricted = 0 ///< ベジェハンドルの規制状態\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmotionjson';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMotionJson = $.CubismMotionJson;\n  export type CubismMotionJson = $.CubismMotionJson;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { csmDelete, CubismFramework } from '../live2dcubismframework';\nimport { CubismMath } from '../math/cubismmath';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmString } from '../type/csmstring';\nimport { csmVector } from '../type/csmvector';\nimport {\n  CSM_ASSERT,\n  CubismLogDebug,\n  CubismLogError,\n  CubismLogWarning\n} from '../utils/cubismdebug';\nimport {\n  ACubismMotion,\n  BeganMotionCallback,\n  FinishedMotionCallback\n} from './acubismmotion';\nimport {\n  CubismMotionCurve,\n  CubismMotionCurveTarget,\n  CubismMotionData,\n  CubismMotionEvent,\n  CubismMotionPoint,\n  CubismMotionSegment,\n  CubismMotionSegmentType\n} from './cubismmotioninternal';\nimport { CubismMotionJson, EvaluationOptionFlag } from './cubismmotionjson';\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\n\nconst EffectNameEyeBlink = 'EyeBlink';\nconst EffectNameLipSync = 'LipSync';\nconst TargetNameModel = 'Model';\nconst TargetNameParameter = 'Parameter';\nconst TargetNamePartOpacity = 'PartOpacity';\n\n// Id\nconst IdNameOpacity = 'Opacity';\n\n/**\n * Cubism SDK R2 以前のモーションを再現させるなら true 、アニメータのモーションを正しく再現するなら false 。\n */\nconst UseOldBeziersCurveMotion = false;\n\nfunction lerpPoints(\n  a: CubismMotionPoint,\n  b: CubismMotionPoint,\n  t: number\n): CubismMotionPoint {\n  const result: CubismMotionPoint = new CubismMotionPoint();\n\n  result.time = a.time + (b.time - a.time) * t;\n  result.value = a.value + (b.value - a.value) * t;\n\n  return result;\n}\n\nfunction linearEvaluate(points: CubismMotionPoint[], time: number): number {\n  let t: number = (time - points[0].time) / (points[1].time - points[0].time);\n\n  if (t < 0.0) {\n    t = 0.0;\n  }\n\n  return points[0].value + (points[1].value - points[0].value) * t;\n}\n\nfunction bezierEvaluate(points: CubismMotionPoint[], time: number): number {\n  let t: number = (time - points[0].time) / (points[3].time - points[0].time);\n\n  if (t < 0.0) {\n    t = 0.0;\n  }\n\n  const p01: CubismMotionPoint = lerpPoints(points[0], points[1], t);\n  const p12: CubismMotionPoint = lerpPoints(points[1], points[2], t);\n  const p23: CubismMotionPoint = lerpPoints(points[2], points[3], t);\n\n  const p012: CubismMotionPoint = lerpPoints(p01, p12, t);\n  const p123: CubismMotionPoint = lerpPoints(p12, p23, t);\n\n  return lerpPoints(p012, p123, t).value;\n}\n\nfunction bezierEvaluateBinarySearch(\n  points: CubismMotionPoint[],\n  time: number\n): number {\n  const xError = 0.01;\n\n  const x: number = time;\n  let x1: number = points[0].time;\n  let x2: number = points[3].time;\n  let cx1: number = points[1].time;\n  let cx2: number = points[2].time;\n\n  let ta = 0.0;\n  let tb = 1.0;\n  let t = 0.0;\n  let i = 0;\n\n  for (let var33 = true; i < 20; ++i) {\n    if (x < x1 + xError) {\n      t = ta;\n      break;\n    }\n\n    if (x2 - xError < x) {\n      t = tb;\n      break;\n    }\n\n    let centerx: number = (cx1 + cx2) * 0.5;\n    cx1 = (x1 + cx1) * 0.5;\n    cx2 = (x2 + cx2) * 0.5;\n    const ctrlx12: number = (cx1 + centerx) * 0.5;\n    const ctrlx21: number = (cx2 + centerx) * 0.5;\n    centerx = (ctrlx12 + ctrlx21) * 0.5;\n    if (x < centerx) {\n      tb = (ta + tb) * 0.5;\n      if (centerx - xError < x) {\n        t = tb;\n        break;\n      }\n\n      x2 = centerx;\n      cx2 = ctrlx12;\n    } else {\n      ta = (ta + tb) * 0.5;\n      if (x < centerx + xError) {\n        t = ta;\n        break;\n      }\n\n      x1 = centerx;\n      cx1 = ctrlx21;\n    }\n  }\n\n  if (i == 20) {\n    t = (ta + tb) * 0.5;\n  }\n\n  if (t < 0.0) {\n    t = 0.0;\n  }\n  if (t > 1.0) {\n    t = 1.0;\n  }\n\n  const p01: CubismMotionPoint = lerpPoints(points[0], points[1], t);\n  const p12: CubismMotionPoint = lerpPoints(points[1], points[2], t);\n  const p23: CubismMotionPoint = lerpPoints(points[2], points[3], t);\n\n  const p012: CubismMotionPoint = lerpPoints(p01, p12, t);\n  const p123: CubismMotionPoint = lerpPoints(p12, p23, t);\n\n  return lerpPoints(p012, p123, t).value;\n}\n\nfunction bezierEvaluateCardanoInterpretation(\n  points: CubismMotionPoint[],\n  time: number\n): number {\n  const x: number = time;\n  const x1: number = points[0].time;\n  const x2: number = points[3].time;\n  const cx1: number = points[1].time;\n  const cx2: number = points[2].time;\n\n  const a: number = x2 - 3.0 * cx2 + 3.0 * cx1 - x1;\n  const b: number = 3.0 * cx2 - 6.0 * cx1 + 3.0 * x1;\n  const c: number = 3.0 * cx1 - 3.0 * x1;\n  const d: number = x1 - x;\n\n  const t: number = CubismMath.cardanoAlgorithmForBezier(a, b, c, d);\n\n  const p01: CubismMotionPoint = lerpPoints(points[0], points[1], t);\n  const p12: CubismMotionPoint = lerpPoints(points[1], points[2], t);\n  const p23: CubismMotionPoint = lerpPoints(points[2], points[3], t);\n\n  const p012: CubismMotionPoint = lerpPoints(p01, p12, t);\n  const p123: CubismMotionPoint = lerpPoints(p12, p23, t);\n\n  return lerpPoints(p012, p123, t).value;\n}\n\nfunction steppedEvaluate(points: CubismMotionPoint[], time: number): number {\n  return points[0].value;\n}\n\nfunction inverseSteppedEvaluate(\n  points: CubismMotionPoint[],\n  time: number\n): number {\n  return points[1].value;\n}\n\nfunction evaluateCurve(\n  motionData: CubismMotionData,\n  index: number,\n  time: number,\n  isCorrection: boolean,\n  endTime: number\n): number {\n  // Find segment to evaluate.\n  const curve: CubismMotionCurve = motionData.curves.at(index);\n\n  let target = -1;\n  const totalSegmentCount: number = curve.baseSegmentIndex + curve.segmentCount;\n  let pointPosition = 0;\n  for (let i: number = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {\n    // Get first point of next segment.\n    pointPosition =\n      motionData.segments.at(i).basePointIndex +\n      ((motionData.segments.at(i).segmentType as CubismMotionSegmentType) ==\n      CubismMotionSegmentType.CubismMotionSegmentType_Bezier\n        ? 3\n        : 1);\n\n    // Break if time lies within current segment.\n    if (motionData.points.at(pointPosition).time > time) {\n      target = i;\n      break;\n    }\n  }\n\n  if (target == -1) {\n    if (isCorrection && time < endTime) {\n      return correctEndPoint(\n        motionData,\n        totalSegmentCount - 1,\n        motionData.segments.at(curve.baseSegmentIndex).basePointIndex,\n        pointPosition,\n        time,\n        endTime\n      );\n    }\n    return motionData.points.at(pointPosition).value;\n  }\n\n  const segment: CubismMotionSegment = motionData.segments.at(target);\n\n  return segment.evaluate(motionData.points.get(segment.basePointIndex), time);\n}\n\n/**\n * 終点から始点への補正処理\n * @param motionData\n * @param segmentIndex\n * @param beginIndex\n * @param endIndex\n * @param time\n * @param endTime\n * @return\n */\nfunction correctEndPoint(\n  motionData: CubismMotionData,\n  segmentIndex: number,\n  beginIndex: number,\n  endIndex: number,\n  time: number,\n  endTime: number\n): number {\n  const motionPoint: CubismMotionPoint[] = [\n    new CubismMotionPoint(),\n    new CubismMotionPoint()\n  ];\n  {\n    const src = motionData.points.at(endIndex);\n    motionPoint[0].time = src.time;\n    motionPoint[0].value = src.value;\n  }\n  {\n    const src = motionData.points.at(beginIndex);\n    motionPoint[1].time = endTime;\n    motionPoint[1].value = src.value;\n  }\n\n  switch (\n    motionData.segments.at(segmentIndex).segmentType as CubismMotionSegmentType\n  ) {\n    case CubismMotionSegmentType.CubismMotionSegmentType_Linear:\n    case CubismMotionSegmentType.CubismMotionSegmentType_Bezier:\n    default:\n      return linearEvaluate(motionPoint, time);\n    case CubismMotionSegmentType.CubismMotionSegmentType_Stepped:\n      return steppedEvaluate(motionPoint, time);\n    case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped:\n      return inverseSteppedEvaluate(motionPoint, time);\n  }\n}\n\n/**\n * Enumerator for version control of Motion Behavior.\n * For details, see the SDK Manual.\n */\nexport enum MotionBehavior {\n  MotionBehavior_V1,\n  MotionBehavior_V2\n}\n\n/**\n * モーションクラス\n *\n * モーションのクラス。\n */\nexport class CubismMotion extends ACubismMotion {\n  /**\n   * インスタンスを作成する\n   *\n   * @param buffer motion3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @param onBeganMotionHandler モーション再生開始時に呼び出されるコールバック関数\n   * @param shouldCheckMotionConsistency motion3.json整合性チェックするかどうか\n   * @return 作成されたインスタンス\n   */\n  public static create(\n    buffer: ArrayBuffer,\n    size: number,\n    onFinishedMotionHandler?: FinishedMotionCallback,\n    onBeganMotionHandler?: BeganMotionCallback,\n    shouldCheckMotionConsistency: boolean = false\n  ): CubismMotion {\n    const ret = new CubismMotion();\n\n    ret.parse(buffer, size, shouldCheckMotionConsistency);\n    if (ret._motionData) {\n      ret._sourceFrameRate = ret._motionData.fps;\n      ret._loopDurationSeconds = ret._motionData.duration;\n      ret._onFinishedMotion = onFinishedMotionHandler;\n      ret._onBeganMotion = onBeganMotionHandler;\n    } else {\n      csmDelete(ret);\n      return null;\n    }\n\n    // NOTE: Editorではループありのモーション書き出しは非対応\n    // ret->_loop = (ret->_motionData->Loop > 0);\n    return ret;\n  }\n\n  /**\n   * モデルのパラメータの更新の実行\n   * @param model             対象のモデル\n   * @param userTimeSeconds   現在の時刻[秒]\n   * @param fadeWeight        モーションの重み\n   * @param motionQueueEntry  CubismMotionQueueManagerで管理されているモーション\n   */\n  public doUpdateParameters(\n    model: CubismModel,\n    userTimeSeconds: number,\n    fadeWeight: number,\n    motionQueueEntry: CubismMotionQueueEntry\n  ): void {\n    if (this._modelCurveIdEyeBlink == null) {\n      this._modelCurveIdEyeBlink =\n        CubismFramework.getIdManager().getId(EffectNameEyeBlink);\n    }\n\n    if (this._modelCurveIdLipSync == null) {\n      this._modelCurveIdLipSync =\n        CubismFramework.getIdManager().getId(EffectNameLipSync);\n    }\n\n    if (this._modelCurveIdOpacity == null) {\n      this._modelCurveIdOpacity =\n        CubismFramework.getIdManager().getId(IdNameOpacity);\n    }\n\n    if (this._motionBehavior === MotionBehavior.MotionBehavior_V2) {\n      if (this._previousLoopState !== this._isLoop) {\n        // 終了時間を計算する\n        this.adjustEndTime(motionQueueEntry);\n        this._previousLoopState = this._isLoop;\n      }\n    }\n\n    let timeOffsetSeconds: number =\n      userTimeSeconds - motionQueueEntry.getStartTime();\n\n    if (timeOffsetSeconds < 0.0) {\n      timeOffsetSeconds = 0.0; // エラー回避\n    }\n\n    let lipSyncValue: number = Number.MAX_VALUE;\n    let eyeBlinkValue: number = Number.MAX_VALUE;\n\n    //まばたき、リップシンクのうちモーションの適用を検出するためのビット（maxFlagCount個まで\n    const maxTargetSize = 64;\n    let lipSyncFlags = 0;\n    let eyeBlinkFlags = 0;\n\n    //瞬き、リップシンクのターゲット数が上限を超えている場合\n    if (this._eyeBlinkParameterIds.getSize() > maxTargetSize) {\n      CubismLogDebug(\n        'too many eye blink targets : {0}',\n        this._eyeBlinkParameterIds.getSize()\n      );\n    }\n    if (this._lipSyncParameterIds.getSize() > maxTargetSize) {\n      CubismLogDebug(\n        'too many lip sync targets : {0}',\n        this._lipSyncParameterIds.getSize()\n      );\n    }\n\n    const tmpFadeIn: number =\n      this._fadeInSeconds <= 0.0\n        ? 1.0\n        : CubismMath.getEasingSine(\n            (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\n              this._fadeInSeconds\n          );\n\n    const tmpFadeOut: number =\n      this._fadeOutSeconds <= 0.0 || motionQueueEntry.getEndTime() < 0.0\n        ? 1.0\n        : CubismMath.getEasingSine(\n            (motionQueueEntry.getEndTime() - userTimeSeconds) /\n              this._fadeOutSeconds\n          );\n    let value: number;\n    let c: number, parameterIndex: number;\n\n    // 'Repeat' time as necessary.\n    let time: number = timeOffsetSeconds;\n    let duration: number = this._motionData.duration;\n    const isCorrection: boolean =\n      this._motionBehavior === MotionBehavior.MotionBehavior_V2 && this._isLoop;\n\n    if (this._isLoop) {\n      if (this._motionBehavior === MotionBehavior.MotionBehavior_V2) {\n        duration += 1.0 / this._motionData.fps;\n      }\n      while (time > duration) {\n        time -= duration;\n      }\n    }\n\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\n\n    // Evaluate model curves.\n    for (\n      c = 0;\n      c < this._motionData.curveCount &&\n      curves.at(c).type ==\n        CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\n      ++c\n    ) {\n      // Evaluate curve and call handler.\n      value = evaluateCurve(this._motionData, c, time, isCorrection, duration);\n\n      if (curves.at(c).id == this._modelCurveIdEyeBlink) {\n        eyeBlinkValue = value;\n      } else if (curves.at(c).id == this._modelCurveIdLipSync) {\n        lipSyncValue = value;\n      } else if (curves.at(c).id == this._modelCurveIdOpacity) {\n        this._modelOpacity = value;\n        model.setModelOapcity(this.getModelOpacityValue());\n      }\n    }\n\n    let parameterMotionCurveCount = 0;\n\n    for (\n      ;\n      c < this._motionData.curveCount &&\n      curves.at(c).type ==\n        CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\n      ++c\n    ) {\n      parameterMotionCurveCount++;\n\n      // Find parameter index.\n      parameterIndex = model.getParameterIndex(curves.at(c).id);\n\n      // Skip curve evaluation if no value in sink.\n      if (parameterIndex == -1) {\n        continue;\n      }\n\n      const sourceValue: number =\n        model.getParameterValueByIndex(parameterIndex);\n\n      // Evaluate curve and apply value.\n      value = evaluateCurve(this._motionData, c, time, isCorrection, duration);\n\n      if (eyeBlinkValue != Number.MAX_VALUE) {\n        for (\n          let i = 0;\n          i < this._eyeBlinkParameterIds.getSize() && i < maxTargetSize;\n          ++i\n        ) {\n          if (this._eyeBlinkParameterIds.at(i) == curves.at(c).id) {\n            value *= eyeBlinkValue;\n            eyeBlinkFlags |= 1 << i;\n            break;\n          }\n        }\n      }\n\n      if (lipSyncValue != Number.MAX_VALUE) {\n        for (\n          let i = 0;\n          i < this._lipSyncParameterIds.getSize() && i < maxTargetSize;\n          ++i\n        ) {\n          if (this._lipSyncParameterIds.at(i) == curves.at(c).id) {\n            value += lipSyncValue;\n            lipSyncFlags |= 1 << i;\n            break;\n          }\n        }\n      }\n\n      // Process \"repeats only\" for compatibility\n      if (model.isRepeat(parameterIndex)) {\n        value = model.getParameterRepeatValue(parameterIndex, value);\n      }\n\n      let v: number;\n\n      // パラメータごとのフェード\n      if (curves.at(c).fadeInTime < 0.0 && curves.at(c).fadeOutTime < 0.0) {\n        // モーションのフェードを適用\n        v = sourceValue + (value - sourceValue) * fadeWeight;\n      } else {\n        // パラメータに対してフェードインかフェードアウトが設定してある場合はそちらを適用\n        let fin: number;\n        let fout: number;\n\n        if (curves.at(c).fadeInTime < 0.0) {\n          fin = tmpFadeIn;\n        } else {\n          fin =\n            curves.at(c).fadeInTime == 0.0\n              ? 1.0\n              : CubismMath.getEasingSine(\n                  (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\n                    curves.at(c).fadeInTime\n                );\n        }\n\n        if (curves.at(c).fadeOutTime < 0.0) {\n          fout = tmpFadeOut;\n        } else {\n          fout =\n            curves.at(c).fadeOutTime == 0.0 ||\n            motionQueueEntry.getEndTime() < 0.0\n              ? 1.0\n              : CubismMath.getEasingSine(\n                  (motionQueueEntry.getEndTime() - userTimeSeconds) /\n                    curves.at(c).fadeOutTime\n                );\n        }\n\n        const paramWeight: number = this._weight * fin * fout;\n\n        // パラメータごとのフェードを適用\n        v = sourceValue + (value - sourceValue) * paramWeight;\n      }\n\n      model.setParameterValueByIndex(parameterIndex, v, 1.0);\n    }\n\n    {\n      if (eyeBlinkValue != Number.MAX_VALUE) {\n        for (\n          let i = 0;\n          i < this._eyeBlinkParameterIds.getSize() && i < maxTargetSize;\n          ++i\n        ) {\n          const sourceValue: number = model.getParameterValueById(\n            this._eyeBlinkParameterIds.at(i)\n          );\n\n          // モーションでの上書きがあった時にはまばたきは適用しない\n          if ((eyeBlinkFlags >> i) & 0x01) {\n            continue;\n          }\n\n          const v: number =\n            sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;\n\n          model.setParameterValueById(this._eyeBlinkParameterIds.at(i), v);\n        }\n      }\n\n      if (lipSyncValue != Number.MAX_VALUE) {\n        for (\n          let i = 0;\n          i < this._lipSyncParameterIds.getSize() && i < maxTargetSize;\n          ++i\n        ) {\n          const sourceValue: number = model.getParameterValueById(\n            this._lipSyncParameterIds.at(i)\n          );\n\n          // モーションでの上書きがあった時にはリップシンクは適用しない\n          if ((lipSyncFlags >> i) & 0x01) {\n            continue;\n          }\n\n          const v: number =\n            sourceValue + (lipSyncValue - sourceValue) * fadeWeight;\n\n          model.setParameterValueById(this._lipSyncParameterIds.at(i), v);\n        }\n      }\n    }\n\n    for (\n      ;\n      c < this._motionData.curveCount &&\n      curves.at(c).type ==\n        CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\n      ++c\n    ) {\n      // Find parameter index.\n      parameterIndex = model.getParameterIndex(curves.at(c).id);\n\n      // Skip curve evaluation if no value in sink.\n      if (parameterIndex == -1) {\n        continue;\n      }\n\n      // Evaluate curve and apply value.\n      value = evaluateCurve(this._motionData, c, time, isCorrection, duration);\n\n      model.setParameterValueByIndex(parameterIndex, value);\n    }\n\n    if (timeOffsetSeconds >= duration) {\n      if (this._isLoop) {\n        this.updateForNextLoop(motionQueueEntry, userTimeSeconds, time);\n      } else {\n        if (this._onFinishedMotion) {\n          this._onFinishedMotion(this);\n        }\n\n        motionQueueEntry.setIsFinished(true);\n      }\n    }\n    this._lastWeight = fadeWeight;\n  }\n\n  /**\n   * ループ情報の設定\n   * @param loop ループ情報\n   */\n  public setIsLoop(loop: boolean): void {\n    CubismLogWarning(\n      'setIsLoop() is a deprecated function. Please use setLoop().'\n    );\n    this._isLoop = loop;\n  }\n\n  /**\n   * ループ情報の取得\n   * @return true ループする\n   * @return false ループしない\n   */\n  public isLoop(): boolean {\n    CubismLogWarning(\n      'isLoop() is a deprecated function. Please use getLoop().'\n    );\n    return this._isLoop;\n  }\n\n  /**\n   * ループ時のフェードイン情報の設定\n   * @param loopFadeIn  ループ時のフェードイン情報\n   */\n  public setIsLoopFadeIn(loopFadeIn: boolean): void {\n    CubismLogWarning(\n      'setIsLoopFadeIn() is a deprecated function. Please use setLoopFadeIn().'\n    );\n    this._isLoopFadeIn = loopFadeIn;\n  }\n\n  /**\n   * ループ時のフェードイン情報の取得\n   *\n   * @return  true    する\n   * @return  false   しない\n   */\n  public isLoopFadeIn(): boolean {\n    CubismLogWarning(\n      'isLoopFadeIn() is a deprecated function. Please use getLoopFadeIn().'\n    );\n    return this._isLoopFadeIn;\n  }\n\n  /**\n   * Sets the version of the Motion Behavior.\n   *\n   * @param Specifies the version of the Motion Behavior.\n   */\n  public setMotionBehavior(motionBehavior: MotionBehavior) {\n    this._motionBehavior = motionBehavior;\n  }\n\n  /**\n   * Gets the version of the Motion Behavior.\n   *\n   * @return Returns the version of the Motion Behavior.\n   */\n  public getMotionBehavior(): MotionBehavior {\n    return this._motionBehavior;\n  }\n\n  /**\n   * モーションの長さを取得する。\n   *\n   * @return  モーションの長さ[秒]\n   */\n  public getDuration(): number {\n    return this._isLoop ? -1.0 : this._loopDurationSeconds;\n  }\n\n  /**\n   * モーションのループ時の長さを取得する。\n   *\n   * @return  モーションのループ時の長さ[秒]\n   */\n  public getLoopDuration(): number {\n    return this._loopDurationSeconds;\n  }\n\n  /**\n   * パラメータに対するフェードインの時間を設定する。\n   *\n   * @param parameterId     パラメータID\n   * @param value           フェードインにかかる時間[秒]\n   */\n  public setParameterFadeInTime(\n    parameterId: CubismIdHandle,\n    value: number\n  ): void {\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\n\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves.at(i).id) {\n        curves.at(i).fadeInTime = value;\n        return;\n      }\n    }\n  }\n\n  /**\n   * パラメータに対するフェードアウトの時間の設定\n   * @param parameterId     パラメータID\n   * @param value           フェードアウトにかかる時間[秒]\n   */\n  public setParameterFadeOutTime(\n    parameterId: CubismIdHandle,\n    value: number\n  ): void {\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\n\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves.at(i).id) {\n        curves.at(i).fadeOutTime = value;\n        return;\n      }\n    }\n  }\n\n  /**\n   * パラメータに対するフェードインの時間の取得\n   * @param    parameterId     パラメータID\n   * @return   フェードインにかかる時間[秒]\n   */\n  public getParameterFadeInTime(parameterId: CubismIdHandle): number {\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\n\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves.at(i).id) {\n        return curves.at(i).fadeInTime;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * パラメータに対するフェードアウトの時間を取得\n   *\n   * @param   parameterId     パラメータID\n   * @return   フェードアウトにかかる時間[秒]\n   */\n  public getParameterFadeOutTime(parameterId: CubismIdHandle): number {\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\n\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves.at(i).id) {\n        return curves.at(i).fadeOutTime;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * 自動エフェクトがかかっているパラメータIDリストの設定\n   * @param eyeBlinkParameterIds    自動まばたきがかかっているパラメータIDのリスト\n   * @param lipSyncParameterIds     リップシンクがかかっているパラメータIDのリスト\n   */\n  public setEffectIds(\n    eyeBlinkParameterIds: csmVector<CubismIdHandle>,\n    lipSyncParameterIds: csmVector<CubismIdHandle>\n  ): void {\n    this._eyeBlinkParameterIds = eyeBlinkParameterIds;\n    this._lipSyncParameterIds = lipSyncParameterIds;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n    this._sourceFrameRate = 30.0;\n    this._loopDurationSeconds = -1.0;\n    this._isLoop = false; // trueから false へデフォルトを変更\n    this._isLoopFadeIn = true; // ループ時にフェードインが有効かどうかのフラグ\n    this._lastWeight = 0.0;\n    this._motionData = null;\n    this._modelCurveIdEyeBlink = null;\n    this._modelCurveIdLipSync = null;\n    this._modelCurveIdOpacity = null;\n    this._eyeBlinkParameterIds = null;\n    this._lipSyncParameterIds = null;\n    this._modelOpacity = 1.0;\n    this._debugMode = false;\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    this._motionData = void 0;\n    this._motionData = null;\n  }\n\n  /**\n   *\n   * @param motionQueueEntry\n   * @param userTimeSeconds\n   * @param time\n   */\n  public updateForNextLoop(\n    motionQueueEntry: CubismMotionQueueEntry,\n    userTimeSeconds: number,\n    time: number\n  ) {\n    switch (this._motionBehavior) {\n      case MotionBehavior.MotionBehavior_V2:\n      default:\n        motionQueueEntry.setStartTime(userTimeSeconds - time); // 最初の状態へ\n        if (this._isLoopFadeIn) {\n          // ループ中でループ用フェードインが有効のときは、フェードイン設定し直し\n          motionQueueEntry.setFadeInStartTime(userTimeSeconds - time);\n        }\n\n        if (this._onFinishedMotion != null) {\n          this._onFinishedMotion(this);\n        }\n        break;\n      case MotionBehavior.MotionBehavior_V1:\n        // 旧ループ処理\n        motionQueueEntry.setStartTime(userTimeSeconds); // 最初の状態へ\n        if (this._isLoopFadeIn) {\n          // ループ中でループ用フェードインが有効のときは、フェードイン設定し直し\n          motionQueueEntry.setFadeInStartTime(userTimeSeconds);\n        }\n        break;\n    }\n  }\n\n  /**\n   * motion3.jsonをパースする。\n   *\n   * @param motionJson  motion3.jsonが読み込まれているバッファ\n   * @param size        バッファのサイズ\n   * @param shouldCheckMotionConsistency motion3.json整合性チェックするかどうか\n   */\n  public parse(\n    motionJson: ArrayBuffer,\n    size: number,\n    shouldCheckMotionConsistency: boolean = false\n  ): void {\n    let json: CubismMotionJson = new CubismMotionJson(motionJson, size);\n\n    if (!json) {\n      json.release();\n      json = void 0;\n      return;\n    }\n\n    if (shouldCheckMotionConsistency) {\n      const consistency = json.hasConsistency();\n      if (!consistency) {\n        json.release();\n        CubismLogError('Inconsistent motion3.json.');\n        return;\n      }\n    }\n\n    this._motionData = new CubismMotionData();\n\n    this._motionData.duration = json.getMotionDuration();\n    this._motionData.loop = json.isMotionLoop();\n    this._motionData.curveCount = json.getMotionCurveCount();\n    this._motionData.fps = json.getMotionFps();\n    this._motionData.eventCount = json.getEventCount();\n\n    const areBeziersRestructed: boolean = json.getEvaluationOptionFlag(\n      EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted\n    );\n\n    if (json.isExistMotionFadeInTime()) {\n      this._fadeInSeconds =\n        json.getMotionFadeInTime() < 0.0 ? 1.0 : json.getMotionFadeInTime();\n    } else {\n      this._fadeInSeconds = 1.0;\n    }\n\n    if (json.isExistMotionFadeOutTime()) {\n      this._fadeOutSeconds =\n        json.getMotionFadeOutTime() < 0.0 ? 1.0 : json.getMotionFadeOutTime();\n    } else {\n      this._fadeOutSeconds = 1.0;\n    }\n\n    this._motionData.curves.updateSize(\n      this._motionData.curveCount,\n      CubismMotionCurve,\n      true\n    );\n    this._motionData.segments.updateSize(\n      json.getMotionTotalSegmentCount(),\n      CubismMotionSegment,\n      true\n    );\n    this._motionData.points.updateSize(\n      json.getMotionTotalPointCount(),\n      CubismMotionPoint,\n      true\n    );\n    this._motionData.events.updateSize(\n      this._motionData.eventCount,\n      CubismMotionEvent,\n      true\n    );\n\n    let totalPointCount = 0;\n    let totalSegmentCount = 0;\n\n    // Curves\n    for (\n      let curveCount = 0;\n      curveCount < this._motionData.curveCount;\n      ++curveCount\n    ) {\n      if (json.getMotionCurveTarget(curveCount) == TargetNameModel) {\n        this._motionData.curves.at(curveCount).type =\n          CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\n      } else if (json.getMotionCurveTarget(curveCount) == TargetNameParameter) {\n        this._motionData.curves.at(curveCount).type =\n          CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\n      } else if (\n        json.getMotionCurveTarget(curveCount) == TargetNamePartOpacity\n      ) {\n        this._motionData.curves.at(curveCount).type =\n          CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\n      } else {\n        CubismLogWarning(\n          'Warning : Unable to get segment type from Curve! The number of \"CurveCount\" may be incorrect!'\n        );\n      }\n\n      this._motionData.curves.at(curveCount).id =\n        json.getMotionCurveId(curveCount);\n\n      this._motionData.curves.at(curveCount).baseSegmentIndex =\n        totalSegmentCount;\n\n      this._motionData.curves.at(curveCount).fadeInTime =\n        json.isExistMotionCurveFadeInTime(curveCount)\n          ? json.getMotionCurveFadeInTime(curveCount)\n          : -1.0;\n      this._motionData.curves.at(curveCount).fadeOutTime =\n        json.isExistMotionCurveFadeOutTime(curveCount)\n          ? json.getMotionCurveFadeOutTime(curveCount)\n          : -1.0;\n\n      // Segments\n      for (\n        let segmentPosition = 0;\n        segmentPosition < json.getMotionCurveSegmentCount(curveCount);\n\n      ) {\n        if (segmentPosition == 0) {\n          this._motionData.segments.at(totalSegmentCount).basePointIndex =\n            totalPointCount;\n\n          this._motionData.points.at(totalPointCount).time =\n            json.getMotionCurveSegment(curveCount, segmentPosition);\n          this._motionData.points.at(totalPointCount).value =\n            json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n\n          totalPointCount += 1;\n          segmentPosition += 2;\n        } else {\n          this._motionData.segments.at(totalSegmentCount).basePointIndex =\n            totalPointCount - 1;\n        }\n\n        const segment: number = json.getMotionCurveSegment(\n          curveCount,\n          segmentPosition\n        );\n\n        const segmentType: CubismMotionSegmentType = segment;\n        switch (segmentType) {\n          case CubismMotionSegmentType.CubismMotionSegmentType_Linear: {\n            this._motionData.segments.at(totalSegmentCount).segmentType =\n              CubismMotionSegmentType.CubismMotionSegmentType_Linear;\n            this._motionData.segments.at(totalSegmentCount).evaluate =\n              linearEvaluate;\n\n            this._motionData.points.at(totalPointCount).time =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n            this._motionData.points.at(totalPointCount).value =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n\n            totalPointCount += 1;\n            segmentPosition += 3;\n\n            break;\n          }\n          case CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {\n            this._motionData.segments.at(totalSegmentCount).segmentType =\n              CubismMotionSegmentType.CubismMotionSegmentType_Bezier;\n\n            if (areBeziersRestructed || UseOldBeziersCurveMotion) {\n              this._motionData.segments.at(totalSegmentCount).evaluate =\n                bezierEvaluate;\n            } else {\n              this._motionData.segments.at(totalSegmentCount).evaluate =\n                bezierEvaluateCardanoInterpretation;\n            }\n\n            this._motionData.points.at(totalPointCount).time =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n            this._motionData.points.at(totalPointCount).value =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n\n            this._motionData.points.at(totalPointCount + 1).time =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 3);\n            this._motionData.points.at(totalPointCount + 1).value =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 4);\n\n            this._motionData.points.at(totalPointCount + 2).time =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 5);\n            this._motionData.points.at(totalPointCount + 2).value =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 6);\n\n            totalPointCount += 3;\n            segmentPosition += 7;\n\n            break;\n          }\n\n          case CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {\n            this._motionData.segments.at(totalSegmentCount).segmentType =\n              CubismMotionSegmentType.CubismMotionSegmentType_Stepped;\n            this._motionData.segments.at(totalSegmentCount).evaluate =\n              steppedEvaluate;\n\n            this._motionData.points.at(totalPointCount).time =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n            this._motionData.points.at(totalPointCount).value =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n\n            totalPointCount += 1;\n            segmentPosition += 3;\n\n            break;\n          }\n\n          case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {\n            this._motionData.segments.at(totalSegmentCount).segmentType =\n              CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;\n            this._motionData.segments.at(totalSegmentCount).evaluate =\n              inverseSteppedEvaluate;\n\n            this._motionData.points.at(totalPointCount).time =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n            this._motionData.points.at(totalPointCount).value =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n\n            totalPointCount += 1;\n            segmentPosition += 3;\n\n            break;\n          }\n          default: {\n            CSM_ASSERT(0);\n            break;\n          }\n        }\n\n        ++this._motionData.curves.at(curveCount).segmentCount;\n        ++totalSegmentCount;\n      }\n    }\n\n    for (\n      let userdatacount = 0;\n      userdatacount < json.getEventCount();\n      ++userdatacount\n    ) {\n      this._motionData.events.at(userdatacount).fireTime =\n        json.getEventTime(userdatacount);\n      this._motionData.events.at(userdatacount).value =\n        json.getEventValue(userdatacount);\n    }\n\n    json.release();\n    json = void 0;\n    json = null;\n  }\n\n  /**\n   * モデルのパラメータ更新\n   *\n   * イベント発火のチェック。\n   * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\n   *\n   * @param beforeCheckTimeSeconds   前回のイベントチェック時間[秒]\n   * @param motionTimeSeconds        今回の再生時間[秒]\n   */\n  public getFiredEvent(\n    beforeCheckTimeSeconds: number,\n    motionTimeSeconds: number\n  ): csmVector<csmString> {\n    this._firedEventValues.updateSize(0);\n\n    // イベントの発火チェック\n    for (let u = 0; u < this._motionData.eventCount; ++u) {\n      if (\n        this._motionData.events.at(u).fireTime > beforeCheckTimeSeconds &&\n        this._motionData.events.at(u).fireTime <= motionTimeSeconds\n      ) {\n        this._firedEventValues.pushBack(\n          new csmString(this._motionData.events.at(u).value.s)\n        );\n      }\n    }\n\n    return this._firedEventValues;\n  }\n\n  /**\n   * 透明度のカーブが存在するかどうかを確認する\n   *\n   * @return true  -> キーが存在する\n   *          false -> キーが存在しない\n   */\n  public isExistModelOpacity(): boolean {\n    for (let i = 0; i < this._motionData.curveCount; i++) {\n      const curve: CubismMotionCurve = this._motionData.curves.at(i);\n\n      if (curve.type != CubismMotionCurveTarget.CubismMotionCurveTarget_Model) {\n        continue;\n      }\n\n      if (curve.id.getString().s.localeCompare(IdNameOpacity) == 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * 透明度のカーブのインデックスを返す\n   *\n   * @return success:透明度のカーブのインデックス\n   */\n  public getModelOpacityIndex(): number {\n    if (this.isExistModelOpacity()) {\n      for (let i = 0; i < this._motionData.curveCount; i++) {\n        const curve: CubismMotionCurve = this._motionData.curves.at(i);\n\n        if (\n          curve.type != CubismMotionCurveTarget.CubismMotionCurveTarget_Model\n        ) {\n          continue;\n        }\n\n        if (curve.id.getString().s.localeCompare(IdNameOpacity) == 0) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * 透明度のIdを返す\n   *\n   * @param index モーションカーブのインデックス\n   * @return success:透明度のカーブのインデックス\n   */\n  public getModelOpacityId(index: number): CubismIdHandle {\n    if (index != -1) {\n      const curve: CubismMotionCurve = this._motionData.curves.at(index);\n\n      if (curve.type == CubismMotionCurveTarget.CubismMotionCurveTarget_Model) {\n        if (curve.id.getString().s.localeCompare(IdNameOpacity) == 0) {\n          return CubismFramework.getIdManager().getId(curve.id.getString().s);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * 現在時間の透明度の値を返す\n   *\n   * @return success:モーションの当該時間におけるOpacityの値\n   */\n  public getModelOpacityValue(): number {\n    return this._modelOpacity;\n  }\n\n  /**\n   * デバッグ用フラグを設定する\n   *\n   * @param debugMode デバッグモードの有効・無効\n   */\n  public setDebugMode(debugMode: boolean): void {\n    this._debugMode = debugMode;\n  }\n\n  public _sourceFrameRate: number; // ロードしたファイルのFPS。記述が無ければデフォルト値15fpsとなる\n  public _loopDurationSeconds: number; // mtnファイルで定義される一連のモーションの長さ\n  public _motionBehavior: MotionBehavior = MotionBehavior.MotionBehavior_V2;\n  public _lastWeight: number; // 最後に設定された重み\n\n  public _motionData: CubismMotionData; // 実際のモーションデータ本体\n\n  public _eyeBlinkParameterIds: csmVector<CubismIdHandle>; // 自動まばたきを適用するパラメータIDハンドルのリスト。  モデル（モデルセッティング）とパラメータを対応付ける。\n  public _lipSyncParameterIds: csmVector<CubismIdHandle>; // リップシンクを適用するパラメータIDハンドルのリスト。  モデル（モデルセッティング）とパラメータを対応付ける。\n\n  public _modelCurveIdEyeBlink: CubismIdHandle; // モデルが持つ自動まばたき用パラメータIDのハンドル。  モデルとモーションを対応付ける。\n  public _modelCurveIdLipSync: CubismIdHandle; // モデルが持つリップシンク用パラメータIDのハンドル。  モデルとモーションを対応付ける。\n  public _modelCurveIdOpacity: CubismIdHandle; // モデルが持つ不透明度用パラメータIDのハンドル。  モデルとモーションを対応付ける。\n\n  public _modelOpacity: number; // モーションから取得した不透明度\n\n  private _debugMode: boolean; // デバッグモードかどうか\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmotion';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMotion = $.CubismMotion;\n  export type CubismMotion = $.CubismMotion;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismModel } from '../model/cubismmodel';\nimport { ACubismMotion } from './acubismmotion';\nimport {\n  CubismMotionQueueEntryHandle,\n  CubismMotionQueueManager\n} from './cubismmotionqueuemanager';\n\n/**\n * モーションの管理\n *\n * モーションの管理を行うクラス\n */\nexport class CubismMotionManager extends CubismMotionQueueManager {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n    this._currentPriority = 0;\n    this._reservePriority = 0;\n  }\n\n  /**\n   * 再生中のモーションの優先度の取得\n   * @return  モーションの優先度\n   */\n  public getCurrentPriority(): number {\n    return this._currentPriority;\n  }\n\n  /**\n   * 予約中のモーションの優先度を取得する。\n   * @return  モーションの優先度\n   */\n  public getReservePriority(): number {\n    return this._reservePriority;\n  }\n\n  /**\n   * 予約中のモーションの優先度を設定する。\n   * @param   val     優先度\n   */\n  public setReservePriority(val: number): void {\n    this._reservePriority = val;\n  }\n\n  /**\n   * 優先度を設定してモーションを開始する。\n   *\n   * @param motion          モーション\n   * @param autoDelete      再生が狩猟したモーションのインスタンスを削除するならtrue\n   * @param priority        優先度\n   * @return                開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」\n   */\n  public startMotionPriority(\n    motion: ACubismMotion,\n    autoDelete: boolean,\n    priority: number\n  ): CubismMotionQueueEntryHandle {\n    if (priority == this._reservePriority) {\n      this._reservePriority = 0; // 予約を解除\n    }\n\n    this._currentPriority = priority; // 再生中モーションの優先度を設定\n\n    return super.startMotion(motion, autoDelete);\n  }\n\n  /**\n   * モーションを更新して、モデルにパラメータ値を反映する。\n   *\n   * @param model   対象のモデル\n   * @param deltaTimeSeconds    デルタ時間[秒]\n   * @return  true    更新されている\n   * @return  false   更新されていない\n   */\n  public updateMotion(model: CubismModel, deltaTimeSeconds: number): boolean {\n    this._userTimeSeconds += deltaTimeSeconds;\n\n    const updated: boolean = super.doUpdateMotion(model, this._userTimeSeconds);\n\n    if (this.isFinished()) {\n      this._currentPriority = 0; // 再生中のモーションの優先度を解除\n    }\n\n    return updated;\n  }\n\n  /**\n   * モーションを予約する。\n   *\n   * @param   priority    優先度\n   * @return  true    予約できた\n   * @return  false   予約できなかった\n   */\n  public reserveMotion(priority: number): boolean {\n    if (\n      priority <= this._reservePriority ||\n      priority <= this._currentPriority\n    ) {\n      return false;\n    }\n\n    this._reservePriority = priority;\n\n    return true;\n  }\n\n  _currentPriority: number; // 現在再生中のモーションの優先度\n  _reservePriority: number; // 再生予定のモーションの優先度。再生中は0になる。モーションファイルを別スレッドで読み込むときの機能。\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmotionmanager';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMotionManager = $.CubismMotionManager;\n  export type CubismMotionManager = $.CubismMotionManager;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismVector2 } from '../math/cubismvector2';\nimport { csmVector } from '../type/csmvector';\n\n/**\n * 物理演算の適用先の種類\n */\nexport enum CubismPhysicsTargetType {\n  CubismPhysicsTargetType_Parameter // パラメータに対して適用\n}\n\n/**\n * 物理演算の入力の種類\n */\nexport enum CubismPhysicsSource {\n  CubismPhysicsSource_X, // X軸の位置から\n  CubismPhysicsSource_Y, // Y軸の位置から\n  CubismPhysicsSource_Angle // 角度から\n}\n\n/**\n * @brief 物理演算で使用する外部の力\n *\n * 物理演算で使用する外部の力。\n */\nexport class PhysicsJsonEffectiveForces {\n  constructor() {\n    this.gravity = new CubismVector2(0, 0);\n    this.wind = new CubismVector2(0, 0);\n  }\n  gravity: CubismVector2; // 重力\n  wind: CubismVector2; // 風\n}\n\n/**\n * 物理演算のパラメータ情報\n */\nexport class CubismPhysicsParameter {\n  id: CubismIdHandle; // パラメータ\n  targetType: CubismPhysicsTargetType; // 適用先の種類\n}\n\n/**\n * 物理演算の正規化情報\n */\nexport class CubismPhysicsNormalization {\n  minimum: number; // 最大値\n  maximum: number; // 最小値\n  defalut: number; // デフォルト値\n}\n\n/**\n * 物理演算の演算委使用する物理点の情報\n */\nexport class CubismPhysicsParticle {\n  constructor() {\n    this.initialPosition = new CubismVector2(0, 0);\n    this.position = new CubismVector2(0, 0);\n    this.lastPosition = new CubismVector2(0, 0);\n    this.lastGravity = new CubismVector2(0, 0);\n    this.force = new CubismVector2(0, 0);\n    this.velocity = new CubismVector2(0, 0);\n  }\n\n  initialPosition: CubismVector2; // 初期位置\n  mobility: number; // 動きやすさ\n  delay: number; // 遅れ\n  acceleration: number; // 加速度\n  radius: number; // 距離\n  position: CubismVector2; // 現在の位置\n  lastPosition: CubismVector2; // 最後の位置\n  lastGravity: CubismVector2; // 最後の重力\n  force: CubismVector2; // 現在かかっている力\n  velocity: CubismVector2; // 現在の速度\n}\n\n/**\n * 物理演算の物理点の管理\n */\nexport class CubismPhysicsSubRig {\n  constructor() {\n    this.normalizationPosition = new CubismPhysicsNormalization();\n    this.normalizationAngle = new CubismPhysicsNormalization();\n  }\n  inputCount: number; // 入力の個数\n  outputCount: number; // 出力の個数\n  particleCount: number; // 物理点の個数\n  baseInputIndex: number; // 入力の最初のインデックス\n  baseOutputIndex: number; // 出力の最初のインデックス\n  baseParticleIndex: number; // 物理点の最初のインデックス\n  normalizationPosition: CubismPhysicsNormalization; // 正規化された位置\n  normalizationAngle: CubismPhysicsNormalization; // 正規化された角度\n}\n\n/**\n * 正規化されたパラメータの取得関数の宣言\n * @param targetTranslation     // 演算結果の移動値\n * @param targetAngle           // 演算結果の角度\n * @param value                 // パラメータの値\n * @param parameterMinimunValue // パラメータの最小値\n * @param parameterMaximumValue // パラメータの最大値\n * @param parameterDefaultValue // パラメータのデフォルト値\n * @param normalizationPosition // 正規化された位置\n * @param normalizationAngle    // 正規化された角度\n * @param isInverted            // 値が反転されているか？\n * @param weight                // 重み\n */\nexport interface normalizedPhysicsParameterValueGetter {\n  (\n    targetTranslation: CubismVector2,\n    targetAngle: { angle: number },\n    value: number,\n    parameterMinimunValue: number,\n    parameterMaximumValue: number,\n    parameterDefaultValue: number,\n    normalizationPosition: CubismPhysicsNormalization,\n    normalizationAngle: CubismPhysicsNormalization,\n    isInverted: boolean,\n    weight: number\n  ): void;\n}\n\n/**\n * 物理演算の値の取得関数の宣言\n * @param translation 移動値\n * @param particles 物理点のリスト\n * @param isInverted 値が反映されているか\n * @param parentGravity 重力\n * @return 値\n */\nexport interface physicsValueGetter {\n  (\n    translation: CubismVector2,\n    particles: CubismPhysicsParticle[],\n    particleIndex: number,\n    isInverted: boolean,\n    parentGravity: CubismVector2\n  ): number;\n}\n\n/**\n * 物理演算のスケールの取得関数の宣言\n * @param translationScale 移動値のスケール\n * @param angleScale    角度のスケール\n * @return スケール値\n */\nexport interface physicsScaleGetter {\n  (translationScale: CubismVector2, angleScale: number): number;\n}\n\n/**\n * 物理演算の入力情報\n */\nexport class CubismPhysicsInput {\n  constructor() {\n    this.source = new CubismPhysicsParameter();\n  }\n  source: CubismPhysicsParameter; // 入力元のパラメータ\n  sourceParameterIndex: number; // 入力元のパラメータのインデックス\n  weight: number; // 重み\n  type: number; // 入力の種類\n  reflect: boolean; // 値が反転されているかどうか\n  getNormalizedParameterValue: normalizedPhysicsParameterValueGetter; // 正規化されたパラメータ値の取得関数\n}\n\n/**\n * @brief 物理演算の出力情報\n *\n * 物理演算の出力情報。\n */\nexport class CubismPhysicsOutput {\n  constructor() {\n    this.destination = new CubismPhysicsParameter();\n    this.translationScale = new CubismVector2(0, 0);\n  }\n\n  destination: CubismPhysicsParameter; // 出力先のパラメータ\n  destinationParameterIndex: number; // 出力先のパラメータのインデックス\n  vertexIndex: number; // 振り子のインデックス\n  translationScale: CubismVector2; // 移動値のスケール\n  angleScale: number; // 角度のスケール\n  weight: number; // 重み\n  type: CubismPhysicsSource; // 出力の種類\n  reflect: boolean; // 値が反転されているかどうか\n  valueBelowMinimum: number; // 最小値を下回った時の値\n  valueExceededMaximum: number; // 最大値をこえた時の値\n  getValue: physicsValueGetter; // 物理演算の値の取得関数\n  getScale: physicsScaleGetter; // 物理演算のスケール値の取得関数\n}\n\n/**\n * @brief 物理演算のデータ\n *\n * 物理演算のデータ。\n */\nexport class CubismPhysicsRig {\n  constructor() {\n    this.settings = new csmVector<CubismPhysicsSubRig>();\n    this.inputs = new csmVector<CubismPhysicsInput>();\n    this.outputs = new csmVector<CubismPhysicsOutput>();\n    this.particles = new csmVector<CubismPhysicsParticle>();\n    this.gravity = new CubismVector2(0, 0);\n    this.wind = new CubismVector2(0, 0);\n    this.fps = 0.0;\n  }\n\n  subRigCount: number; // 物理演算の物理点の個数\n  settings: csmVector<CubismPhysicsSubRig>; // 物理演算の物理点の管理のリスト\n  inputs: csmVector<CubismPhysicsInput>; // 物理演算の入力のリスト\n  outputs: csmVector<CubismPhysicsOutput>; // 物理演算の出力のリスト\n  particles: csmVector<CubismPhysicsParticle>; // 物理演算の物理点のリスト\n  gravity: CubismVector2; // 重力\n  wind: CubismVector2; // 風\n  fps: number; //物理演算動作FPS\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismphysicsinternal';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismPhysicsInput = $.CubismPhysicsInput;\n  export type CubismPhysicsInput = $.CubismPhysicsInput;\n  export const CubismPhysicsNormalization = $.CubismPhysicsNormalization;\n  export type CubismPhysicsNormalization = $.CubismPhysicsNormalization;\n  export const CubismPhysicsOutput = $.CubismPhysicsOutput;\n  export type CubismPhysicsOutput = $.CubismPhysicsOutput;\n  export const CubismPhysicsParameter = $.CubismPhysicsParameter;\n  export type CubismPhysicsParameter = $.CubismPhysicsParameter;\n  export const CubismPhysicsParticle = $.CubismPhysicsParticle;\n  export type CubismPhysicsParticle = $.CubismPhysicsParticle;\n  export const CubismPhysicsRig = $.CubismPhysicsRig;\n  export type CubismPhysicsRig = $.CubismPhysicsRig;\n  export const CubismPhysicsSource = $.CubismPhysicsSource;\n  export type CubismPhysicsSource = $.CubismPhysicsSource;\n  export const CubismPhysicsSubRig = $.CubismPhysicsSubRig;\n  export type CubismPhysicsSubRig = $.CubismPhysicsSubRig;\n  export const CubismPhysicsTargetType = $.CubismPhysicsTargetType;\n  export type CubismPhysicsTargetType = $.CubismPhysicsTargetType;\n  export const PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;\n  export type PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;\n  export type normalizedPhysicsParameterValueGetter =\n    $.normalizedPhysicsParameterValueGetter;\n  export type physicsScaleGetter = $.physicsScaleGetter;\n  export type physicsValueGetter = $.physicsValueGetter;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismVector2 } from '../math/cubismvector2';\nimport { CubismJson } from '../utils/cubismjson';\n\n// JSON keys\nconst Position = 'Position';\nconst X = 'X';\nconst Y = 'Y';\nconst Angle = 'Angle';\nconst Type = 'Type';\nconst Id = 'Id';\n\n// Meta\nconst Meta = 'Meta';\nconst EffectiveForces = 'EffectiveForces';\nconst TotalInputCount = 'TotalInputCount';\nconst TotalOutputCount = 'TotalOutputCount';\nconst PhysicsSettingCount = 'PhysicsSettingCount';\nconst Gravity = 'Gravity';\nconst Wind = 'Wind';\nconst VertexCount = 'VertexCount';\nconst Fps = 'Fps';\n\n// PhysicsSettings\nconst PhysicsSettings = 'PhysicsSettings';\nconst Normalization = 'Normalization';\nconst Minimum = 'Minimum';\nconst Maximum = 'Maximum';\nconst Default = 'Default';\nconst Reflect = 'Reflect';\nconst Weight = 'Weight';\n\n// Input\nconst Input = 'Input';\nconst Source = 'Source';\n\n// Output\nconst Output = 'Output';\nconst Scale = 'Scale';\nconst VertexIndex = 'VertexIndex';\nconst Destination = 'Destination';\n\n// Particle\nconst Vertices = 'Vertices';\nconst Mobility = 'Mobility';\nconst Delay = 'Delay';\nconst Radius = 'Radius';\nconst Acceleration = 'Acceleration';\n\n/**\n * physics3.jsonのコンテナ。\n */\nexport class CubismPhysicsJson {\n  /**\n   * コンストラクタ\n   * @param buffer physics3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  public constructor(buffer: ArrayBuffer, size: number) {\n    this._json = CubismJson.create(buffer, size);\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    CubismJson.delete(this._json);\n  }\n\n  /**\n   * 重力の取得\n   * @return 重力\n   */\n  public getGravity(): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0, 0);\n    ret.x = this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(EffectiveForces)\n      .getValueByString(Gravity)\n      .getValueByString(X)\n      .toFloat();\n    ret.y = this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(EffectiveForces)\n      .getValueByString(Gravity)\n      .getValueByString(Y)\n      .toFloat();\n    return ret;\n  }\n\n  /**\n   * 風の取得\n   * @return 風\n   */\n  public getWind(): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0, 0);\n    ret.x = this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(EffectiveForces)\n      .getValueByString(Wind)\n      .getValueByString(X)\n      .toFloat();\n    ret.y = this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(EffectiveForces)\n      .getValueByString(Wind)\n      .getValueByString(Y)\n      .toFloat();\n    return ret;\n  }\n\n  /**\n   * 物理演算設定FPSの取得\n   * @return 物理演算設定FPS\n   */\n  public getFps(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(Fps)\n      .toFloat(0.0);\n  }\n\n  /**\n   * 物理店の管理の個数の取得\n   * @return 物理店の管理の個数\n   */\n  public getSubRigCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(PhysicsSettingCount)\n      .toInt();\n  }\n\n  /**\n   * 入力の総合計の取得\n   * @return 入力の総合計\n   */\n  public getTotalInputCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(TotalInputCount)\n      .toInt();\n  }\n\n  /**\n   * 出力の総合計の取得\n   * @return 出力の総合計\n   */\n  public getTotalOutputCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(TotalOutputCount)\n      .toInt();\n  }\n\n  /**\n   * 物理点の個数の取得\n   * @return 物理点の個数\n   */\n  public getVertexCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(VertexCount)\n      .toInt();\n  }\n\n  /**\n   * 正規化された位置の最小値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置の最小値\n   */\n  public getNormalizationPositionMinimumValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Position)\n      .getValueByString(Minimum)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された位置の最大値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置の最大値\n   */\n  public getNormalizationPositionMaximumValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Position)\n      .getValueByString(Maximum)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された位置のデフォルト値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置のデフォルト値\n   */\n  public getNormalizationPositionDefaultValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Position)\n      .getValueByString(Default)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された角度の最小値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された角度の最小値\n   */\n  public getNormalizationAngleMinimumValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Angle)\n      .getValueByString(Minimum)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された角度の最大値の取得\n   * @param physicsSettingIndex\n   * @return 正規化された角度の最大値\n   */\n  public getNormalizationAngleMaximumValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Angle)\n      .getValueByString(Maximum)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された角度のデフォルト値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された角度のデフォルト値\n   */\n  public getNormalizationAngleDefaultValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Angle)\n      .getValueByString(Default)\n      .toFloat();\n  }\n\n  /**\n   * 入力の個数の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 入力の個数\n   */\n  public getInputCount(physicsSettingIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Input)\n      .getVector()\n      .getSize();\n  }\n\n  /**\n   * 入力の重みの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の重み\n   */\n  public getInputWeight(\n    physicsSettingIndex: number,\n    inputIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Input)\n      .getValueByIndex(inputIndex)\n      .getValueByString(Weight)\n      .toFloat();\n  }\n\n  /**\n   * 入力の反転の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の反転\n   */\n  public getInputReflect(\n    physicsSettingIndex: number,\n    inputIndex: number\n  ): boolean {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Input)\n      .getValueByIndex(inputIndex)\n      .getValueByString(Reflect)\n      .toBoolean();\n  }\n\n  /**\n   * 入力の種類の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の種類\n   */\n  public getInputType(physicsSettingIndex: number, inputIndex: number): string {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Input)\n      .getValueByIndex(inputIndex)\n      .getValueByString(Type)\n      .getRawString();\n  }\n\n  /**\n   * 入力元のIDの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力元のID\n   */\n  public getInputSourceId(\n    physicsSettingIndex: number,\n    inputIndex: number\n  ): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._json\n        .getRoot()\n        .getValueByString(PhysicsSettings)\n        .getValueByIndex(physicsSettingIndex)\n        .getValueByString(Input)\n        .getValueByIndex(inputIndex)\n        .getValueByString(Source)\n        .getValueByString(Id)\n        .getRawString()\n    );\n  }\n\n  /**\n   * 出力の個数の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 出力の個数\n   */\n  public getOutputCount(physicsSettingIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getVector()\n      .getSize();\n  }\n\n  /**\n   * 出力の物理点のインデックスの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の物理点のインデックス\n   */\n  public getOutputVertexIndex(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(VertexIndex)\n      .toInt();\n  }\n\n  /**\n   * 出力の角度のスケールを取得する\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の角度のスケール\n   */\n  public getOutputAngleScale(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(Scale)\n      .toFloat();\n  }\n\n  /**\n   * 出力の重みの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の重み\n   */\n  public getOutputWeight(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(Weight)\n      .toFloat();\n  }\n\n  /**\n   * 出力先のIDの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力先のID\n   */\n  public getOutputDestinationId(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._json\n        .getRoot()\n        .getValueByString(PhysicsSettings)\n        .getValueByIndex(physicsSettingIndex)\n        .getValueByString(Output)\n        .getValueByIndex(outputIndex)\n        .getValueByString(Destination)\n        .getValueByString(Id)\n        .getRawString()\n    );\n  }\n\n  /**\n   * 出力の種類の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の種類\n   */\n  public getOutputType(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): string {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(Type)\n      .getRawString();\n  }\n\n  /**\n   * 出力の反転の取得\n   * @param physicsSettingIndex 物理演算のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の反転\n   */\n  public getOutputReflect(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): boolean {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(Reflect)\n      .toBoolean();\n  }\n\n  /**\n   * 物理点の個数の取得\n   * @param physicsSettingIndex 物理演算男設定のインデックス\n   * @return 物理点の個数\n   */\n  public getParticleCount(physicsSettingIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getVector()\n      .getSize();\n  }\n\n  /**\n   * 物理点の動きやすさの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の動きやすさ\n   */\n  public getParticleMobility(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Mobility)\n      .toFloat();\n  }\n\n  /**\n   * 物理点の遅れの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の遅れ\n   */\n  public getParticleDelay(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Delay)\n      .toFloat();\n  }\n\n  /**\n   * 物理点の加速度の取得\n   * @param physicsSettingIndex 物理演算の設定\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の加速度\n   */\n  public getParticleAcceleration(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Acceleration)\n      .toFloat();\n  }\n\n  /**\n   * 物理点の距離の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の距離\n   */\n  public getParticleRadius(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Radius)\n      .toFloat();\n  }\n\n  /**\n   * 物理点の位置の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexInde 物理点のインデックス\n   * @return 物理点の位置\n   */\n  public getParticlePosition(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0, 0);\n    ret.x = this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Position)\n      .getValueByString(X)\n      .toFloat();\n    ret.y = this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Position)\n      .getValueByString(Y)\n      .toFloat();\n    return ret;\n  }\n\n  _json: CubismJson; // physics3.jsonデータ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismphysicsjson';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismPhysicsJson = $.CubismPhysicsJson;\n  export type CubismPhysicsJson = $.CubismPhysicsJson;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMath } from '../math/cubismmath';\nimport { CubismVector2 } from '../math/cubismvector2';\nimport { csmVector } from '../type/csmvector';\nimport { CubismModel } from '../model/cubismmodel';\nimport {\n  CubismPhysicsInput,\n  CubismPhysicsNormalization,\n  CubismPhysicsOutput,\n  CubismPhysicsParticle,\n  CubismPhysicsRig,\n  CubismPhysicsSource,\n  CubismPhysicsSubRig,\n  CubismPhysicsTargetType\n} from './cubismphysicsinternal';\nimport { CubismPhysicsJson } from './cubismphysicsjson';\n\n// physics types tags.\nconst PhysicsTypeTagX = 'X';\nconst PhysicsTypeTagY = 'Y';\nconst PhysicsTypeTagAngle = 'Angle';\n\n// Constant of air resistance.\nconst AirResistance = 5.0;\n\n// Constant of maximum weight of input and output ratio.\nconst MaximumWeight = 100.0;\n\n// Constant of threshold of movement.\nconst MovementThreshold = 0.001;\n\n// Constant of maximum allowed delta time\nconst MaxDeltaTime = 5.0;\n\n/**\n * 物理演算クラス\n */\nexport class CubismPhysics {\n  /**\n   * インスタンスの作成\n   * @param buffer    physics3.jsonが読み込まれているバッファ\n   * @param size      バッファのサイズ\n   * @return 作成されたインスタンス\n   */\n  public static create(buffer: ArrayBuffer, size: number): CubismPhysics {\n    const ret: CubismPhysics = new CubismPhysics();\n\n    ret.parse(buffer, size);\n    ret._physicsRig.gravity.y = 0;\n\n    return ret;\n  }\n\n  /**\n   * インスタンスを破棄する\n   * @param physics 破棄するインスタンス\n   */\n  public static delete(physics: CubismPhysics): void {\n    if (physics != null) {\n      physics.release();\n      physics = null;\n    }\n  }\n\n  /**\n   * physics3.jsonをパースする。\n   * @param physicsJson physics3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  public parse(physicsJson: ArrayBuffer, size: number): void {\n    this._physicsRig = new CubismPhysicsRig();\n\n    let json: CubismPhysicsJson = new CubismPhysicsJson(physicsJson, size);\n\n    this._physicsRig.gravity = json.getGravity();\n    this._physicsRig.wind = json.getWind();\n    this._physicsRig.subRigCount = json.getSubRigCount();\n\n    this._physicsRig.fps = json.getFps();\n\n    this._physicsRig.settings.updateSize(\n      this._physicsRig.subRigCount,\n      CubismPhysicsSubRig,\n      true\n    );\n    this._physicsRig.inputs.updateSize(\n      json.getTotalInputCount(),\n      CubismPhysicsInput,\n      true\n    );\n    this._physicsRig.outputs.updateSize(\n      json.getTotalOutputCount(),\n      CubismPhysicsOutput,\n      true\n    );\n    this._physicsRig.particles.updateSize(\n      json.getVertexCount(),\n      CubismPhysicsParticle,\n      true\n    );\n\n    this._currentRigOutputs.clear();\n    this._previousRigOutputs.clear();\n\n    let inputIndex = 0,\n      outputIndex = 0,\n      particleIndex = 0;\n\n    for (let i = 0; i < this._physicsRig.settings.getSize(); ++i) {\n      this._physicsRig.settings.at(i).normalizationPosition.minimum =\n        json.getNormalizationPositionMinimumValue(i);\n      this._physicsRig.settings.at(i).normalizationPosition.maximum =\n        json.getNormalizationPositionMaximumValue(i);\n      this._physicsRig.settings.at(i).normalizationPosition.defalut =\n        json.getNormalizationPositionDefaultValue(i);\n\n      this._physicsRig.settings.at(i).normalizationAngle.minimum =\n        json.getNormalizationAngleMinimumValue(i);\n      this._physicsRig.settings.at(i).normalizationAngle.maximum =\n        json.getNormalizationAngleMaximumValue(i);\n      this._physicsRig.settings.at(i).normalizationAngle.defalut =\n        json.getNormalizationAngleDefaultValue(i);\n\n      // Input\n      this._physicsRig.settings.at(i).inputCount = json.getInputCount(i);\n      this._physicsRig.settings.at(i).baseInputIndex = inputIndex;\n\n      for (let j = 0; j < this._physicsRig.settings.at(i).inputCount; ++j) {\n        this._physicsRig.inputs.at(inputIndex + j).sourceParameterIndex = -1;\n        this._physicsRig.inputs.at(inputIndex + j).weight = json.getInputWeight(\n          i,\n          j\n        );\n        this._physicsRig.inputs.at(inputIndex + j).reflect =\n          json.getInputReflect(i, j);\n\n        if (json.getInputType(i, j) == PhysicsTypeTagX) {\n          this._physicsRig.inputs.at(inputIndex + j).type =\n            CubismPhysicsSource.CubismPhysicsSource_X;\n          this._physicsRig.inputs.at(\n            inputIndex + j\n          ).getNormalizedParameterValue =\n            getInputTranslationXFromNormalizedParameterValue;\n        } else if (json.getInputType(i, j) == PhysicsTypeTagY) {\n          this._physicsRig.inputs.at(inputIndex + j).type =\n            CubismPhysicsSource.CubismPhysicsSource_Y;\n          this._physicsRig.inputs.at(\n            inputIndex + j\n          ).getNormalizedParameterValue =\n            getInputTranslationYFromNormalizedParamterValue;\n        } else if (json.getInputType(i, j) == PhysicsTypeTagAngle) {\n          this._physicsRig.inputs.at(inputIndex + j).type =\n            CubismPhysicsSource.CubismPhysicsSource_Angle;\n          this._physicsRig.inputs.at(\n            inputIndex + j\n          ).getNormalizedParameterValue =\n            getInputAngleFromNormalizedParameterValue;\n        }\n\n        this._physicsRig.inputs.at(inputIndex + j).source.targetType =\n          CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\n        this._physicsRig.inputs.at(inputIndex + j).source.id =\n          json.getInputSourceId(i, j);\n      }\n      inputIndex += this._physicsRig.settings.at(i).inputCount;\n\n      // Output\n      this._physicsRig.settings.at(i).outputCount = json.getOutputCount(i);\n      this._physicsRig.settings.at(i).baseOutputIndex = outputIndex;\n\n      const currentRigOutput = new PhysicsOutput();\n      currentRigOutput.outputs.resize(\n        this._physicsRig.settings.at(i).outputCount\n      );\n\n      const previousRigOutput = new PhysicsOutput();\n      previousRigOutput.outputs.resize(\n        this._physicsRig.settings.at(i).outputCount\n      );\n\n      for (let j = 0; j < this._physicsRig.settings.at(i).outputCount; ++j) {\n        // initialize\n        currentRigOutput.outputs.set(j, 0.0);\n        previousRigOutput.outputs.set(j, 0.0);\n\n        this._physicsRig.outputs.at(outputIndex + j).destinationParameterIndex =\n          -1;\n        this._physicsRig.outputs.at(outputIndex + j).vertexIndex =\n          json.getOutputVertexIndex(i, j);\n        this._physicsRig.outputs.at(outputIndex + j).angleScale =\n          json.getOutputAngleScale(i, j);\n        this._physicsRig.outputs.at(outputIndex + j).weight =\n          json.getOutputWeight(i, j);\n        this._physicsRig.outputs.at(outputIndex + j).destination.targetType =\n          CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\n\n        this._physicsRig.outputs.at(outputIndex + j).destination.id =\n          json.getOutputDestinationId(i, j);\n\n        if (json.getOutputType(i, j) == PhysicsTypeTagX) {\n          this._physicsRig.outputs.at(outputIndex + j).type =\n            CubismPhysicsSource.CubismPhysicsSource_X;\n          this._physicsRig.outputs.at(outputIndex + j).getValue =\n            getOutputTranslationX;\n          this._physicsRig.outputs.at(outputIndex + j).getScale =\n            getOutputScaleTranslationX;\n        } else if (json.getOutputType(i, j) == PhysicsTypeTagY) {\n          this._physicsRig.outputs.at(outputIndex + j).type =\n            CubismPhysicsSource.CubismPhysicsSource_Y;\n          this._physicsRig.outputs.at(outputIndex + j).getValue =\n            getOutputTranslationY;\n          this._physicsRig.outputs.at(outputIndex + j).getScale =\n            getOutputScaleTranslationY;\n        } else if (json.getOutputType(i, j) == PhysicsTypeTagAngle) {\n          this._physicsRig.outputs.at(outputIndex + j).type =\n            CubismPhysicsSource.CubismPhysicsSource_Angle;\n          this._physicsRig.outputs.at(outputIndex + j).getValue =\n            getOutputAngle;\n          this._physicsRig.outputs.at(outputIndex + j).getScale =\n            getOutputScaleAngle;\n        }\n\n        this._physicsRig.outputs.at(outputIndex + j).reflect =\n          json.getOutputReflect(i, j);\n      }\n\n      this._currentRigOutputs.pushBack(currentRigOutput);\n      this._previousRigOutputs.pushBack(previousRigOutput);\n\n      outputIndex += this._physicsRig.settings.at(i).outputCount;\n\n      // Particle\n      this._physicsRig.settings.at(i).particleCount = json.getParticleCount(i);\n      this._physicsRig.settings.at(i).baseParticleIndex = particleIndex;\n\n      for (let j = 0; j < this._physicsRig.settings.at(i).particleCount; ++j) {\n        this._physicsRig.particles.at(particleIndex + j).mobility =\n          json.getParticleMobility(i, j);\n        this._physicsRig.particles.at(particleIndex + j).delay =\n          json.getParticleDelay(i, j);\n        this._physicsRig.particles.at(particleIndex + j).acceleration =\n          json.getParticleAcceleration(i, j);\n        this._physicsRig.particles.at(particleIndex + j).radius =\n          json.getParticleRadius(i, j);\n        this._physicsRig.particles.at(particleIndex + j).position =\n          json.getParticlePosition(i, j);\n      }\n\n      particleIndex += this._physicsRig.settings.at(i).particleCount;\n    }\n\n    this.initialize();\n\n    json.release();\n    json = void 0;\n    json = null;\n  }\n\n  /**\n   * 現在のパラメータ値で物理演算が安定化する状態を演算する。\n   * @param model 物理演算の結果を適用するモデル\n   */\n  public stabilization(model: CubismModel): void {\n    let totalAngle: { angle: number };\n    let weight: number;\n    let radAngle: number;\n    let outputValue: number;\n    const totalTranslation: CubismVector2 = new CubismVector2();\n    let currentSetting: CubismPhysicsSubRig;\n    let currentInputs: CubismPhysicsInput[];\n    let currentOutputs: CubismPhysicsOutput[];\n    let currentParticles: CubismPhysicsParticle[];\n\n    const parameterValues: Float32Array = model.getModel().parameters.values;\n    const parameterMaximumValues: Float32Array =\n      model.getModel().parameters.maximumValues;\n    const parameterMinimumValues: Float32Array =\n      model.getModel().parameters.minimumValues;\n    const parameterDefaultValues: Float32Array =\n      model.getModel().parameters.defaultValues;\n\n    if ((this._parameterCaches?.length ?? 0) < model.getParameterCount()) {\n      this._parameterCaches = new Float32Array(model.getParameterCount());\n    }\n\n    if ((this._parameterInputCaches?.length ?? 0) < model.getParameterCount()) {\n      this._parameterInputCaches = new Float32Array(model.getParameterCount());\n    }\n\n    for (let j = 0; j < model.getParameterCount(); ++j) {\n      this._parameterCaches[j] = parameterValues[j];\n      this._parameterInputCaches[j] = parameterValues[j];\n    }\n\n    for (\n      let settingIndex = 0;\n      settingIndex < this._physicsRig.subRigCount;\n      ++settingIndex\n    ) {\n      totalAngle = { angle: 0.0 };\n      totalTranslation.x = 0.0;\n      totalTranslation.y = 0.0;\n      currentSetting = this._physicsRig.settings.at(settingIndex);\n      currentInputs = this._physicsRig.inputs.get(\n        currentSetting.baseInputIndex\n      );\n      currentOutputs = this._physicsRig.outputs.get(\n        currentSetting.baseOutputIndex\n      );\n      currentParticles = this._physicsRig.particles.get(\n        currentSetting.baseParticleIndex\n      );\n\n      // Load input parameters\n      for (let i = 0; i < currentSetting.inputCount; ++i) {\n        weight = currentInputs[i].weight / MaximumWeight;\n\n        if (currentInputs[i].sourceParameterIndex == -1) {\n          currentInputs[i].sourceParameterIndex = model.getParameterIndex(\n            currentInputs[i].source.id\n          );\n        }\n\n        currentInputs[i].getNormalizedParameterValue(\n          totalTranslation,\n          totalAngle,\n          parameterValues[currentInputs[i].sourceParameterIndex],\n          parameterMinimumValues[currentInputs[i].sourceParameterIndex],\n          parameterMaximumValues[currentInputs[i].sourceParameterIndex],\n          parameterDefaultValues[currentInputs[i].sourceParameterIndex],\n          currentSetting.normalizationPosition,\n          currentSetting.normalizationAngle,\n          currentInputs[i].reflect,\n          weight\n        );\n\n        this._parameterCaches[currentInputs[i].sourceParameterIndex] =\n          parameterValues[currentInputs[i].sourceParameterIndex];\n      }\n\n      radAngle = CubismMath.degreesToRadian(-totalAngle.angle);\n\n      totalTranslation.x =\n        totalTranslation.x * CubismMath.cos(radAngle) -\n        totalTranslation.y * CubismMath.sin(radAngle);\n      totalTranslation.y =\n        totalTranslation.x * CubismMath.sin(radAngle) +\n        totalTranslation.y * CubismMath.cos(radAngle);\n\n      // Calculate particles position.\n      updateParticlesForStabilization(\n        currentParticles,\n        currentSetting.particleCount,\n        totalTranslation,\n        totalAngle.angle,\n        this._options.wind,\n        MovementThreshold * currentSetting.normalizationPosition.maximum\n      );\n\n      // Update output parameters.\n      for (let i = 0; i < currentSetting.outputCount; ++i) {\n        const particleIndex = currentOutputs[i].vertexIndex;\n\n        if (currentOutputs[i].destinationParameterIndex == -1) {\n          currentOutputs[i].destinationParameterIndex = model.getParameterIndex(\n            currentOutputs[i].destination.id\n          );\n        }\n\n        if (\n          particleIndex < 1 ||\n          particleIndex >= currentSetting.particleCount\n        ) {\n          continue;\n        }\n\n        let translation: CubismVector2 = new CubismVector2();\n        translation = currentParticles[particleIndex].position.substract(\n          currentParticles[particleIndex - 1].position\n        );\n\n        outputValue = currentOutputs[i].getValue(\n          translation,\n          currentParticles,\n          particleIndex,\n          currentOutputs[i].reflect,\n          this._options.gravity\n        );\n\n        this._currentRigOutputs.at(settingIndex).outputs.set(i, outputValue);\n        this._previousRigOutputs.at(settingIndex).outputs.set(i, outputValue);\n\n        const destinationParameterIndex: number =\n          currentOutputs[i].destinationParameterIndex;\n\n        const outParameterCaches: Float32Array =\n          !Float32Array.prototype.slice && 'subarray' in Float32Array.prototype\n            ? JSON.parse(\n                JSON.stringify(\n                  parameterValues.subarray(destinationParameterIndex)\n                )\n              ) // 値渡しするため、JSON.parse, JSON.stringify\n            : parameterValues.slice(destinationParameterIndex);\n\n        updateOutputParameterValue(\n          outParameterCaches,\n          parameterMinimumValues[destinationParameterIndex],\n          parameterMaximumValues[destinationParameterIndex],\n          outputValue,\n          currentOutputs[i]\n        );\n\n        // 値を反映\n        for (\n          let offset: number = destinationParameterIndex, outParamIndex = 0;\n          offset < this._parameterCaches.length;\n          offset++, outParamIndex++\n        ) {\n          parameterValues[offset] = this._parameterCaches[offset] =\n            outParameterCaches[outParamIndex];\n        }\n      }\n    }\n  }\n\n  /**\n   * 物理演算の評価\n   *\n   * Pendulum interpolation weights\n   *\n   * 振り子の計算結果は保存され、パラメータへの出力は保存された前回の結果で補間されます。\n   * The result of the pendulum calculation is saved and\n   * the output to the parameters is interpolated with the saved previous result of the pendulum calculation.\n   *\n   * 図で示すと[1]と[2]で補間されます。\n   * The figure shows the interpolation between [1] and [2].\n   *\n   * 補間の重みは最新の振り子計算タイミングと次回のタイミングの間で見た現在時間で決定する。\n   * The weight of the interpolation are determined by the current time seen between\n   * the latest pendulum calculation timing and the next timing.\n   *\n   * 図で示すと[2]と[4]の間でみた(3)の位置の重みになる。\n   * Figure shows the weight of position (3) as seen between [2] and [4].\n   *\n   * 解釈として振り子計算のタイミングと重み計算のタイミングがズレる。\n   * As an interpretation, the pendulum calculation and weights are misaligned.\n   *\n   * physics3.jsonにFPS情報が存在しない場合は常に前の振り子状態で設定される。\n   * If there is no FPS information in physics3.json, it is always set in the previous pendulum state.\n   *\n   * この仕様は補間範囲を逸脱したことが原因の震えたような見た目を回避を目的にしている。\n   * The purpose of this specification is to avoid the quivering appearance caused by deviations from the interpolation range.\n   *\n   * ------------ time -------------->\n   *\n   *                 |+++++|------| <- weight\n   * ==[1]====#=====[2]---(3)----(4)\n   *          ^ output contents\n   *\n   * 1:_previousRigOutputs\n   * 2:_currentRigOutputs\n   * 3:_currentRemainTime (now rendering)\n   * 4:next particles timing\n   * @param model 物理演算の結果を適用するモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  public evaluate(model: CubismModel, deltaTimeSeconds: number): void {\n    let totalAngle: { angle: number };\n    let weight: number;\n    let radAngle: number;\n    let outputValue: number;\n    const totalTranslation: CubismVector2 = new CubismVector2();\n    let currentSetting: CubismPhysicsSubRig;\n    let currentInputs: CubismPhysicsInput[];\n    let currentOutputs: CubismPhysicsOutput[];\n    let currentParticles: CubismPhysicsParticle[];\n\n    if (0.0 >= deltaTimeSeconds) {\n      return;\n    }\n\n    const parameterValues: Float32Array = model.getModel().parameters.values;\n    const parameterMaximumValues: Float32Array =\n      model.getModel().parameters.maximumValues;\n    const parameterMinimumValues: Float32Array =\n      model.getModel().parameters.minimumValues;\n    const parameterDefaultValues: Float32Array =\n      model.getModel().parameters.defaultValues;\n\n    let physicsDeltaTime: number;\n    this._currentRemainTime += deltaTimeSeconds;\n    if (this._currentRemainTime > MaxDeltaTime) {\n      this._currentRemainTime = 0.0;\n    }\n\n    if ((this._parameterCaches?.length ?? 0) < model.getParameterCount()) {\n      this._parameterCaches = new Float32Array(model.getParameterCount());\n    }\n\n    if ((this._parameterInputCaches?.length ?? 0) < model.getParameterCount()) {\n      this._parameterInputCaches = new Float32Array(model.getParameterCount());\n      for (let j = 0; j < model.getParameterCount(); ++j) {\n        this._parameterInputCaches[j] = parameterValues[j];\n      }\n    }\n\n    if (this._physicsRig.fps > 0.0) {\n      physicsDeltaTime = 1.0 / this._physicsRig.fps;\n    } else {\n      physicsDeltaTime = deltaTimeSeconds;\n    }\n\n    while (this._currentRemainTime >= physicsDeltaTime) {\n      // copyRigOutputs _currentRigOutputs to _previousRigOutputs\n      for (\n        let settingIndex = 0;\n        settingIndex < this._physicsRig.subRigCount;\n        ++settingIndex\n      ) {\n        currentSetting = this._physicsRig.settings.at(settingIndex);\n        currentOutputs = this._physicsRig.outputs.get(\n          currentSetting.baseOutputIndex\n        );\n        for (let i = 0; i < currentSetting.outputCount; ++i) {\n          this._previousRigOutputs\n            .at(settingIndex)\n            .outputs.set(\n              i,\n              this._currentRigOutputs.at(settingIndex).outputs.at(i)\n            );\n        }\n      }\n\n      // 入力キャッシュとパラメータで線形補間してUpdateParticlesするタイミングでの入力を計算する。\n      // Calculate the input at the timing to UpdateParticles by linear interpolation with the _parameterInputCache and parameterValue.\n      // _parameterCacheはグループ間での値の伝搬の役割があるので_parameterInputCacheとの分離が必要。\n      // _parameterCache needs to be separated from _parameterInputCache because of its role in propagating values between groups.\n      const inputWeight = physicsDeltaTime / this._currentRemainTime;\n      for (let j = 0; j < model.getParameterCount(); ++j) {\n        this._parameterCaches[j] =\n          this._parameterInputCaches[j] * (1.0 - inputWeight) +\n          parameterValues[j] * inputWeight;\n        this._parameterInputCaches[j] = this._parameterCaches[j];\n      }\n\n      for (\n        let settingIndex = 0;\n        settingIndex < this._physicsRig.subRigCount;\n        ++settingIndex\n      ) {\n        totalAngle = { angle: 0.0 };\n        totalTranslation.x = 0.0;\n        totalTranslation.y = 0.0;\n        currentSetting = this._physicsRig.settings.at(settingIndex);\n        currentInputs = this._physicsRig.inputs.get(\n          currentSetting.baseInputIndex\n        );\n        currentOutputs = this._physicsRig.outputs.get(\n          currentSetting.baseOutputIndex\n        );\n        currentParticles = this._physicsRig.particles.get(\n          currentSetting.baseParticleIndex\n        );\n\n        // Load input parameters\n        for (let i = 0; i < currentSetting.inputCount; ++i) {\n          weight = currentInputs[i].weight / MaximumWeight;\n\n          if (currentInputs[i].sourceParameterIndex == -1) {\n            currentInputs[i].sourceParameterIndex = model.getParameterIndex(\n              currentInputs[i].source.id\n            );\n          }\n\n          currentInputs[i].getNormalizedParameterValue(\n            totalTranslation,\n            totalAngle,\n            this._parameterCaches[currentInputs[i].sourceParameterIndex],\n            parameterMinimumValues[currentInputs[i].sourceParameterIndex],\n            parameterMaximumValues[currentInputs[i].sourceParameterIndex],\n            parameterDefaultValues[currentInputs[i].sourceParameterIndex],\n            currentSetting.normalizationPosition,\n            currentSetting.normalizationAngle,\n            currentInputs[i].reflect,\n            weight\n          );\n        }\n\n        radAngle = CubismMath.degreesToRadian(-totalAngle.angle);\n\n        totalTranslation.x =\n          totalTranslation.x * CubismMath.cos(radAngle) -\n          totalTranslation.y * CubismMath.sin(radAngle);\n        totalTranslation.y =\n          totalTranslation.x * CubismMath.sin(radAngle) +\n          totalTranslation.y * CubismMath.cos(radAngle);\n\n        // Calculate particles position.\n        updateParticles(\n          currentParticles,\n          currentSetting.particleCount,\n          totalTranslation,\n          totalAngle.angle,\n          this._options.wind,\n          MovementThreshold * currentSetting.normalizationPosition.maximum,\n          physicsDeltaTime,\n          AirResistance\n        );\n\n        // Update output parameters.\n        for (let i = 0; i < currentSetting.outputCount; ++i) {\n          const particleIndex = currentOutputs[i].vertexIndex;\n\n          if (currentOutputs[i].destinationParameterIndex == -1) {\n            currentOutputs[i].destinationParameterIndex =\n              model.getParameterIndex(currentOutputs[i].destination.id);\n          }\n\n          if (\n            particleIndex < 1 ||\n            particleIndex >= currentSetting.particleCount\n          ) {\n            continue;\n          }\n\n          const translation: CubismVector2 = new CubismVector2();\n          translation.x =\n            currentParticles[particleIndex].position.x -\n            currentParticles[particleIndex - 1].position.x;\n          translation.y =\n            currentParticles[particleIndex].position.y -\n            currentParticles[particleIndex - 1].position.y;\n\n          outputValue = currentOutputs[i].getValue(\n            translation,\n            currentParticles,\n            particleIndex,\n            currentOutputs[i].reflect,\n            this._options.gravity\n          );\n\n          this._currentRigOutputs.at(settingIndex).outputs.set(i, outputValue);\n\n          const destinationParameterIndex: number =\n            currentOutputs[i].destinationParameterIndex;\n          const outParameterCaches: Float32Array =\n            !Float32Array.prototype.slice &&\n            'subarray' in Float32Array.prototype\n              ? JSON.parse(\n                  JSON.stringify(\n                    this._parameterCaches.subarray(destinationParameterIndex)\n                  )\n                ) // 値渡しするため、JSON.parse, JSON.stringify\n              : this._parameterCaches.slice(destinationParameterIndex);\n\n          updateOutputParameterValue(\n            outParameterCaches,\n            parameterMinimumValues[destinationParameterIndex],\n            parameterMaximumValues[destinationParameterIndex],\n            outputValue,\n            currentOutputs[i]\n          );\n\n          // 値を反映\n          for (\n            let offset: number = destinationParameterIndex, outParamIndex = 0;\n            offset < this._parameterCaches.length;\n            offset++, outParamIndex++\n          ) {\n            this._parameterCaches[offset] = outParameterCaches[outParamIndex];\n          }\n        }\n      }\n      this._currentRemainTime -= physicsDeltaTime;\n    }\n\n    const alpha: number = this._currentRemainTime / physicsDeltaTime;\n    this.interpolate(model, alpha);\n  }\n\n  /**\n   * 物理演算結果の適用\n   * 振り子演算の最新の結果と一つ前の結果から指定した重みで適用する。\n   * @param model 物理演算の結果を適用するモデル\n   * @param weight 最新結果の重み\n   */\n  public interpolate(model: CubismModel, weight: number): void {\n    let currentOutputs: CubismPhysicsOutput[];\n    let currentSetting: CubismPhysicsSubRig;\n    const parameterValues: Float32Array = model.getModel().parameters.values;\n    const parameterMaximumValues: Float32Array =\n      model.getModel().parameters.maximumValues;\n    const parameterMinimumValues: Float32Array =\n      model.getModel().parameters.minimumValues;\n\n    for (\n      let settingIndex = 0;\n      settingIndex < this._physicsRig.subRigCount;\n      ++settingIndex\n    ) {\n      currentSetting = this._physicsRig.settings.at(settingIndex);\n      currentOutputs = this._physicsRig.outputs.get(\n        currentSetting.baseOutputIndex\n      );\n\n      // Load input parameters.\n      for (let i = 0; i < currentSetting.outputCount; ++i) {\n        if (currentOutputs[i].destinationParameterIndex == -1) {\n          continue;\n        }\n\n        const destinationParameterIndex: number =\n          currentOutputs[i].destinationParameterIndex;\n        const outParameterValues: Float32Array =\n          !Float32Array.prototype.slice && 'subarray' in Float32Array.prototype\n            ? JSON.parse(\n                JSON.stringify(\n                  parameterValues.subarray(destinationParameterIndex)\n                )\n              ) // 値渡しするため、JSON.parse, JSON.stringify\n            : parameterValues.slice(destinationParameterIndex);\n\n        updateOutputParameterValue(\n          outParameterValues,\n          parameterMinimumValues[destinationParameterIndex],\n          parameterMaximumValues[destinationParameterIndex],\n          this._previousRigOutputs.at(settingIndex).outputs.at(i) *\n            (1 - weight) +\n            this._currentRigOutputs.at(settingIndex).outputs.at(i) * weight,\n          currentOutputs[i]\n        );\n\n        // 値を反映\n        for (\n          let offset: number = destinationParameterIndex, outParamIndex = 0;\n          offset < parameterValues.length;\n          offset++, outParamIndex++\n        ) {\n          parameterValues[offset] = outParameterValues[outParamIndex];\n        }\n      }\n    }\n  }\n\n  /**\n   * オプションの設定\n   * @param options オプション\n   */\n  public setOptions(options: Options): void {\n    this._options = options;\n  }\n\n  /**\n   * オプションの取得\n   * @return オプション\n   */\n  public getOption(): Options {\n    return this._options;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._physicsRig = null;\n\n    // set default options\n    this._options = new Options();\n    this._options.gravity.y = -1.0;\n    this._options.gravity.x = 0.0;\n    this._options.wind.x = 0.0;\n    this._options.wind.y = 0.0;\n    this._currentRigOutputs = new csmVector<PhysicsOutput>();\n    this._previousRigOutputs = new csmVector<PhysicsOutput>();\n    this._currentRemainTime = 0.0;\n    this._parameterCaches = null;\n    this._parameterInputCaches = null;\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    this._physicsRig = void 0;\n    this._physicsRig = null;\n  }\n\n  /**\n   * 初期化する\n   */\n  public initialize(): void {\n    let strand: CubismPhysicsParticle[];\n    let currentSetting: CubismPhysicsSubRig;\n    let radius: CubismVector2;\n\n    for (\n      let settingIndex = 0;\n      settingIndex < this._physicsRig.subRigCount;\n      ++settingIndex\n    ) {\n      currentSetting = this._physicsRig.settings.at(settingIndex);\n      strand = this._physicsRig.particles.get(currentSetting.baseParticleIndex);\n\n      // Initialize the top of particle.\n      strand[0].initialPosition = new CubismVector2(0.0, 0.0);\n      strand[0].lastPosition = new CubismVector2(\n        strand[0].initialPosition.x,\n        strand[0].initialPosition.y\n      );\n      strand[0].lastGravity = new CubismVector2(0.0, -1.0);\n      strand[0].lastGravity.y *= -1.0;\n      strand[0].velocity = new CubismVector2(0.0, 0.0);\n      strand[0].force = new CubismVector2(0.0, 0.0);\n\n      // Initialize particles.\n      for (let i = 1; i < currentSetting.particleCount; ++i) {\n        radius = new CubismVector2(0.0, 0.0);\n        radius.y = strand[i].radius;\n        strand[i].initialPosition = new CubismVector2(\n          strand[i - 1].initialPosition.x + radius.x,\n          strand[i - 1].initialPosition.y + radius.y\n        );\n        strand[i].position = new CubismVector2(\n          strand[i].initialPosition.x,\n          strand[i].initialPosition.y\n        );\n        strand[i].lastPosition = new CubismVector2(\n          strand[i].initialPosition.x,\n          strand[i].initialPosition.y\n        );\n        strand[i].lastGravity = new CubismVector2(0.0, -1.0);\n        strand[i].lastGravity.y *= -1.0;\n        strand[i].velocity = new CubismVector2(0.0, 0.0);\n        strand[i].force = new CubismVector2(0.0, 0.0);\n      }\n    }\n  }\n\n  _physicsRig: CubismPhysicsRig; // 物理演算のデータ\n  _options: Options; // オプション\n\n  _currentRigOutputs: csmVector<PhysicsOutput>; ///< 最新の振り子計算の結果\n  _previousRigOutputs: csmVector<PhysicsOutput>; ///< 一つ前の振り子計算の結果\n\n  _currentRemainTime: number; ///< 物理演算が処理していない時間\n\n  _parameterCaches: Float32Array; ///< Evaluateで利用するパラメータのキャッシュ\n  _parameterInputCaches: Float32Array; ///< UpdateParticlesが動くときの入力をキャッシュ\n}\n\n/**\n * 物理演算のオプション\n */\nexport class Options {\n  constructor() {\n    this.gravity = new CubismVector2(0, 0);\n    this.wind = new CubismVector2(0, 0);\n  }\n\n  gravity: CubismVector2; // 重力方向\n  wind: CubismVector2; // 風の方向\n}\n\n/**\n * パラメータに適用する前の物理演算の出力結果\n */\nexport class PhysicsOutput {\n  constructor() {\n    this.outputs = new csmVector<number>(0);\n  }\n\n  outputs: csmVector<number>; // 物理演算出力結果\n}\n\n/**\n * Gets sign.\n *\n * @param value Evaluation target value.\n *\n * @return Sign of value.\n */\nfunction sign(value: number): number {\n  let ret = 0;\n\n  if (value > 0.0) {\n    ret = 1;\n  } else if (value < 0.0) {\n    ret = -1;\n  }\n\n  return ret;\n}\n\nfunction getInputTranslationXFromNormalizedParameterValue(\n  targetTranslation: CubismVector2,\n  targetAngle: { angle: number },\n  value: number,\n  parameterMinimumValue: number,\n  parameterMaximumValue: number,\n  parameterDefaultValue: number,\n  normalizationPosition: CubismPhysicsNormalization,\n  normalizationAngle: CubismPhysicsNormalization,\n  isInverted: boolean,\n  weight: number\n): void {\n  targetTranslation.x +=\n    normalizeParameterValue(\n      value,\n      parameterMinimumValue,\n      parameterMaximumValue,\n      parameterDefaultValue,\n      normalizationPosition.minimum,\n      normalizationPosition.maximum,\n      normalizationPosition.defalut,\n      isInverted\n    ) * weight;\n}\n\nfunction getInputTranslationYFromNormalizedParamterValue(\n  targetTranslation: CubismVector2,\n  targetAngle: { angle: number },\n  value: number,\n  parameterMinimumValue: number,\n  parameterMaximumValue: number,\n  parameterDefaultValue: number,\n  normalizationPosition: CubismPhysicsNormalization,\n  normalizationAngle: CubismPhysicsNormalization,\n  isInverted: boolean,\n  weight: number\n): void {\n  targetTranslation.y +=\n    normalizeParameterValue(\n      value,\n      parameterMinimumValue,\n      parameterMaximumValue,\n      parameterDefaultValue,\n      normalizationPosition.minimum,\n      normalizationPosition.maximum,\n      normalizationPosition.defalut,\n      isInverted\n    ) * weight;\n}\n\nfunction getInputAngleFromNormalizedParameterValue(\n  targetTranslation: CubismVector2,\n  targetAngle: { angle: number },\n  value: number,\n  parameterMinimumValue: number,\n  parameterMaximumValue: number,\n  parameterDefaultValue: number,\n  normalizaitionPosition: CubismPhysicsNormalization,\n  normalizationAngle: CubismPhysicsNormalization,\n  isInverted: boolean,\n  weight: number\n): void {\n  targetAngle.angle +=\n    normalizeParameterValue(\n      value,\n      parameterMinimumValue,\n      parameterMaximumValue,\n      parameterDefaultValue,\n      normalizationAngle.minimum,\n      normalizationAngle.maximum,\n      normalizationAngle.defalut,\n      isInverted\n    ) * weight;\n}\n\nfunction getOutputTranslationX(\n  translation: CubismVector2,\n  particles: CubismPhysicsParticle[],\n  particleIndex: number,\n  isInverted: boolean,\n  parentGravity: CubismVector2\n): number {\n  let outputValue: number = translation.x;\n\n  if (isInverted) {\n    outputValue *= -1.0;\n  }\n\n  return outputValue;\n}\n\nfunction getOutputTranslationY(\n  translation: CubismVector2,\n  particles: CubismPhysicsParticle[],\n  particleIndex: number,\n  isInverted: boolean,\n  parentGravity: CubismVector2\n): number {\n  let outputValue: number = translation.y;\n\n  if (isInverted) {\n    outputValue *= -1.0;\n  }\n  return outputValue;\n}\n\nfunction getOutputAngle(\n  translation: CubismVector2,\n  particles: CubismPhysicsParticle[],\n  particleIndex: number,\n  isInverted: boolean,\n  parentGravity: CubismVector2\n): number {\n  let outputValue: number;\n\n  if (particleIndex >= 2) {\n    parentGravity = particles[particleIndex - 1].position.substract(\n      particles[particleIndex - 2].position\n    );\n  } else {\n    parentGravity = parentGravity.multiplyByScaler(-1.0);\n  }\n\n  outputValue = CubismMath.directionToRadian(parentGravity, translation);\n\n  if (isInverted) {\n    outputValue *= -1.0;\n  }\n\n  return outputValue;\n}\n\nfunction getRangeValue(min: number, max: number): number {\n  const maxValue: number = CubismMath.max(min, max);\n  const minValue: number = CubismMath.min(min, max);\n\n  return CubismMath.abs(maxValue - minValue);\n}\n\nfunction getDefaultValue(min: number, max: number): number {\n  const minValue: number = CubismMath.min(min, max);\n  return minValue + getRangeValue(min, max) / 2.0;\n}\n\nfunction getOutputScaleTranslationX(\n  translationScale: CubismVector2,\n  angleScale: number\n): number {\n  return JSON.parse(JSON.stringify(translationScale.x));\n}\n\nfunction getOutputScaleTranslationY(\n  translationScale: CubismVector2,\n  angleScale: number\n): number {\n  return JSON.parse(JSON.stringify(translationScale.y));\n}\n\nfunction getOutputScaleAngle(\n  translationScale: CubismVector2,\n  angleScale: number\n): number {\n  return JSON.parse(JSON.stringify(angleScale));\n}\n\n/**\n * Updates particles.\n *\n * @param strand                Target array of particle.\n * @param strandCount           Count of particle.\n * @param totalTranslation      Total translation value.\n * @param totalAngle            Total angle.\n * @param windDirection         Direction of Wind.\n * @param thresholdValue        Threshold of movement.\n * @param deltaTimeSeconds      Delta time.\n * @param airResistance         Air resistance.\n */\nfunction updateParticles(\n  strand: CubismPhysicsParticle[],\n  strandCount: number,\n  totalTranslation: CubismVector2,\n  totalAngle: number,\n  windDirection: CubismVector2,\n  thresholdValue: number,\n  deltaTimeSeconds: number,\n  airResistance: number\n) {\n  let delay: number;\n  let radian: number;\n  let direction: CubismVector2 = new CubismVector2(0.0, 0.0);\n  let velocity: CubismVector2 = new CubismVector2(0.0, 0.0);\n  let force: CubismVector2 = new CubismVector2(0.0, 0.0);\n  let newDirection: CubismVector2 = new CubismVector2(0.0, 0.0);\n\n  strand[0].position = new CubismVector2(\n    totalTranslation.x,\n    totalTranslation.y\n  );\n\n  const totalRadian: number = CubismMath.degreesToRadian(totalAngle);\n  const currentGravity: CubismVector2 =\n    CubismMath.radianToDirection(totalRadian);\n  currentGravity.normalize();\n\n  for (let i = 1; i < strandCount; ++i) {\n    strand[i].force = currentGravity\n      .multiplyByScaler(strand[i].acceleration)\n      .add(windDirection);\n\n    strand[i].lastPosition = new CubismVector2(\n      strand[i].position.x,\n      strand[i].position.y\n    );\n\n    delay = strand[i].delay * deltaTimeSeconds * 30.0;\n\n    direction = strand[i].position.substract(strand[i - 1].position);\n\n    radian =\n      CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) /\n      airResistance;\n\n    direction.x =\n      CubismMath.cos(radian) * direction.x -\n      direction.y * CubismMath.sin(radian);\n    direction.y =\n      CubismMath.sin(radian) * direction.x +\n      direction.y * CubismMath.cos(radian);\n\n    strand[i].position = strand[i - 1].position.add(direction);\n\n    velocity = strand[i].velocity.multiplyByScaler(delay);\n    force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);\n\n    strand[i].position = strand[i].position.add(velocity).add(force);\n\n    newDirection = strand[i].position.substract(strand[i - 1].position);\n    newDirection.normalize();\n\n    strand[i].position = strand[i - 1].position.add(\n      newDirection.multiplyByScaler(strand[i].radius)\n    );\n\n    if (CubismMath.abs(strand[i].position.x) < thresholdValue) {\n      strand[i].position.x = 0.0;\n    }\n\n    if (delay != 0.0) {\n      strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);\n      strand[i].velocity = strand[i].velocity.divisionByScalar(delay);\n      strand[i].velocity = strand[i].velocity.multiplyByScaler(\n        strand[i].mobility\n      );\n    }\n\n    strand[i].force = new CubismVector2(0.0, 0.0);\n    strand[i].lastGravity = new CubismVector2(\n      currentGravity.x,\n      currentGravity.y\n    );\n  }\n}\n\n/**\n * Updates particles for stabilization.\n *\n * @param strand                Target array of particle.\n * @param strandCount           Count of particle.\n * @param totalTranslation      Total translation value.\n * @param totalAngle            Total angle.\n * @param windDirection         Direction of Wind.\n * @param thresholdValue        Threshold of movement.\n */\nfunction updateParticlesForStabilization(\n  strand: CubismPhysicsParticle[],\n  strandCount: number,\n  totalTranslation: CubismVector2,\n  totalAngle: number,\n  windDirection: CubismVector2,\n  thresholdValue: number\n) {\n  let force: CubismVector2 = new CubismVector2(0.0, 0.0);\n\n  strand[0].position = new CubismVector2(\n    totalTranslation.x,\n    totalTranslation.y\n  );\n\n  const totalRadian: number = CubismMath.degreesToRadian(totalAngle);\n  const currentGravity: CubismVector2 =\n    CubismMath.radianToDirection(totalRadian);\n  currentGravity.normalize();\n\n  for (let i = 1; i < strandCount; ++i) {\n    strand[i].force = currentGravity\n      .multiplyByScaler(strand[i].acceleration)\n      .add(windDirection);\n\n    strand[i].lastPosition = new CubismVector2(\n      strand[i].position.x,\n      strand[i].position.y\n    );\n\n    strand[i].velocity = new CubismVector2(0.0, 0.0);\n    force = strand[i].force;\n    force.normalize();\n\n    force = force.multiplyByScaler(strand[i].radius);\n    strand[i].position = strand[i - 1].position.add(force);\n\n    if (CubismMath.abs(strand[i].position.x) < thresholdValue) {\n      strand[i].position.x = 0.0;\n    }\n\n    strand[i].force = new CubismVector2(0.0, 0.0);\n    strand[i].lastGravity = new CubismVector2(\n      currentGravity.x,\n      currentGravity.y\n    );\n  }\n}\n\n/**\n * Updates output parameter value.\n * @param parameterValue            Target parameter value.\n * @param parameterValueMinimum     Minimum of parameter value.\n * @param parameterValueMaximum     Maximum of parameter value.\n * @param translation               Translation value.\n */\nfunction updateOutputParameterValue(\n  parameterValue: Float32Array,\n  parameterValueMinimum: number,\n  parameterValueMaximum: number,\n  translation: number,\n  output: CubismPhysicsOutput\n): void {\n  let value: number;\n  const outputScale: number = output.getScale(\n    output.translationScale,\n    output.angleScale\n  );\n\n  value = translation * outputScale;\n\n  if (value < parameterValueMinimum) {\n    if (value < output.valueBelowMinimum) {\n      output.valueBelowMinimum = value;\n    }\n\n    value = parameterValueMinimum;\n  } else if (value > parameterValueMaximum) {\n    if (value > output.valueExceededMaximum) {\n      output.valueExceededMaximum = value;\n    }\n\n    value = parameterValueMaximum;\n  }\n\n  const weight: number = output.weight / MaximumWeight;\n\n  if (weight >= 1.0) {\n    parameterValue[0] = value;\n  } else {\n    value = parameterValue[0] * (1.0 - weight) + value * weight;\n    parameterValue[0] = value;\n  }\n}\n\nfunction normalizeParameterValue(\n  value: number,\n  parameterMinimum: number,\n  parameterMaximum: number,\n  parameterDefault: number,\n  normalizedMinimum: number,\n  normalizedMaximum: number,\n  normalizedDefault: number,\n  isInverted: boolean\n) {\n  let result = 0.0;\n\n  const maxValue: number = CubismMath.max(parameterMaximum, parameterMinimum);\n\n  if (maxValue < value) {\n    value = maxValue;\n  }\n\n  const minValue: number = CubismMath.min(parameterMaximum, parameterMinimum);\n\n  if (minValue > value) {\n    value = minValue;\n  }\n\n  const minNormValue: number = CubismMath.min(\n    normalizedMinimum,\n    normalizedMaximum\n  );\n  const maxNormValue: number = CubismMath.max(\n    normalizedMinimum,\n    normalizedMaximum\n  );\n  const middleNormValue: number = normalizedDefault;\n\n  const middleValue: number = getDefaultValue(minValue, maxValue);\n  const paramValue: number = value - middleValue;\n\n  switch (sign(paramValue)) {\n    case 1: {\n      const nLength: number = maxNormValue - middleNormValue;\n      const pLength: number = maxValue - middleValue;\n\n      if (pLength != 0.0) {\n        result = paramValue * (nLength / pLength);\n        result += middleNormValue;\n      }\n\n      break;\n    }\n    case -1: {\n      const nLength: number = minNormValue - middleNormValue;\n      const pLength: number = minValue - middleValue;\n\n      if (pLength != 0.0) {\n        result = paramValue * (nLength / pLength);\n        result += middleNormValue;\n      }\n\n      break;\n    }\n    case 0: {\n      result = middleNormValue;\n\n      break;\n    }\n    default: {\n      break;\n    }\n  }\n\n  return isInverted ? result : result * -1.0;\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismphysics';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismPhysics = $.CubismPhysics;\n  export type CubismPhysics = $.CubismPhysics;\n  export const Options = $.Options;\n  export type Options = $.Options;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismMath } from '../math/cubismmath';\nimport {\n  CubismBlendMode,\n  CubismTextureColor\n} from '../rendering/cubismrenderer';\nimport { csmMap } from '../type/csmmap';\nimport { csmVector } from '../type/csmvector';\nimport { CSM_ASSERT, CubismLogWarning } from '../utils/cubismdebug';\n\nexport const NoParentIndex = -1; // 親が取得できない場合の値を表す定数\nexport const NoOffscreenIndex = -1; // オフスクリーンが取得できない場合の値を表す定数\n/**\n * カラーブレンドのタイプ\n */\nexport enum CubismColorBlend {\n  ColorBlend_None = -1,\n  ColorBlend_Normal = Live2DCubismCore.ColorBlendType_Normal,\n  ColorBlend_AddGlow = Live2DCubismCore.ColorBlendType_AddGlow,\n  ColorBlend_Add = Live2DCubismCore.ColorBlendType_Add,\n  ColorBlend_Darken = Live2DCubismCore.ColorBlendType_Darken,\n  ColorBlend_Multiply = Live2DCubismCore.ColorBlendType_Multiply,\n  ColorBlend_ColorBurn = Live2DCubismCore.ColorBlendType_ColorBurn,\n  ColorBlend_LinearBurn = Live2DCubismCore.ColorBlendType_LinearBurn,\n  ColorBlend_Lighten = Live2DCubismCore.ColorBlendType_Lighten,\n  ColorBlend_Screen = Live2DCubismCore.ColorBlendType_Screen,\n  ColorBlend_ColorDodge = Live2DCubismCore.ColorBlendType_ColorDodge,\n  ColorBlend_Overlay = Live2DCubismCore.ColorBlendType_Overlay,\n  ColorBlend_SoftLight = Live2DCubismCore.ColorBlendType_SoftLight,\n  ColorBlend_HardLight = Live2DCubismCore.ColorBlendType_HardLight,\n  ColorBlend_LinearLight = Live2DCubismCore.ColorBlendType_LinearLight,\n  ColorBlend_Hue = Live2DCubismCore.ColorBlendType_Hue,\n  ColorBlend_Color = Live2DCubismCore.ColorBlendType_Color,\n  // Cubism 5.2以前\n  ColorBlend_AddCompatible = Live2DCubismCore.ColorBlendType_AddCompatible,\n  ColorBlend_MultiplyCompatible = Live2DCubismCore.ColorBlendType_MultiplyCompatible\n}\n\n/**\n * アルファブレンドのタイプ\n */\nexport enum CubismAlphaBlend {\n  AlphaBlend_None = -1,\n  AlphaBlend_Over,\n  AlphaBlend_Atop,\n  AlphaBlend_Out,\n  AlphaBlend_ConjointOver,\n  AlphaBlend_DisjointOver\n}\n\n/**\n * オブジェクトのタイプ\n */\nexport enum CubismModelObjectType {\n  CubismModelObjectType_Drawable = 0,\n  CubismModelObjectType_Parts = 1\n}\n\n/**\n * Structure for managing the override of parameter repetition settings\n */\nexport class ParameterRepeatData {\n  /**\n   * Constructor\n   *\n   * @param isOverridden whether to be overriden\n   * @param isParameterRepeated override flag for settings\n   */\n  public constructor(\n    isOverridden: boolean = false,\n    isParameterRepeated: boolean = false\n  ) {\n    this.isOverridden = isOverridden;\n    this.isParameterRepeated = isParameterRepeated;\n  }\n\n  /**\n   * Whether to be overridden\n   */\n  public isOverridden: boolean;\n\n  /**\n   * Override flag for settings\n   */\n  public isParameterRepeated: boolean;\n}\n\n/**\n * (deprecated) SDK側から与えられたDrawableの乗算色・スクリーン色上書きフラグと\n * その色を保持する構造体\n */\nexport class DrawableColorData {\n  constructor(\n    isOverridden = false,\n    color: CubismTextureColor = new CubismTextureColor()\n  ) {\n    this.isOverridden = isOverridden;\n    this.color = color;\n  }\n\n  public isOverridden: boolean;\n  public color: CubismTextureColor;\n\n  get isOverwritten(): boolean {\n    return this.isOverridden;\n  }\n}\n\n/**\n * (deprecated) テクスチャの色をRGBAで扱うための構造体\n */\nexport class PartColorData {\n  constructor(\n    isOverridden = false,\n    color: CubismTextureColor = new CubismTextureColor()\n  ) {\n    this.isOverridden = isOverridden;\n    this.color = color;\n  }\n\n  public isOverridden: boolean;\n  public color: CubismTextureColor;\n\n  get isOverwritten(): boolean {\n    return this.isOverridden;\n  }\n}\n\n/**\n * SDK側から与えられた描画オブジェクトの乗算色・スクリーン色上書きフラグと\n * その色を保持する構造体\n */\nexport class ColorData {\n  constructor(\n    isOverridden = false,\n    color: CubismTextureColor = new CubismTextureColor()\n  ) {\n    this.isOverridden = isOverridden;\n    this.color = color;\n  }\n\n  public isOverridden: boolean;\n  public color: CubismTextureColor;\n}\n\n/**\n * (deprecated) テクスチャのカリング設定を管理するための構造体\n */\nexport class DrawableCullingData {\n  /**\n   * コンストラクタ\n   *\n   * @param isOverridden\n   * @param isCulling\n   */\n  public constructor(isOverridden = false, isCulling = false) {\n    this.isOverridden = isOverridden;\n    this.isCulling = isCulling;\n  }\n\n  public isOverridden: boolean;\n  public isCulling: boolean;\n\n  get isOverwritten(): boolean {\n    return this.isOverridden;\n  }\n}\n\n/**\n * テクスチャのカリング設定を管理するための構造体\n */\nexport class CullingData {\n  /**\n   * コンストラクタ\n   *\n   * @param isOverridden\n   * @param isCulling\n   */\n  public constructor(isOverridden = false, isCulling = false) {\n    this.isOverridden = isOverridden;\n    this.isCulling = isCulling;\n  }\n\n  public isOverridden: boolean;\n  public isCulling: boolean;\n}\n\n/**\n * パーツ子描画オブジェクト情報構造体\n */\nexport class PartChildDrawObjects {\n  public drawableIndices: csmVector<number>;\n  public offscreenIndices: csmVector<number>;\n\n  constructor(\n    drawableIndices: csmVector<number> = new csmVector<number>(),\n    offscreenIndices: csmVector<number> = new csmVector<number>()\n  ) {\n    this.drawableIndices = drawableIndices;\n    this.offscreenIndices = offscreenIndices;\n  }\n}\n\n/**\n * オブジェクト情報構造体\n */\nexport class CubismModelObjectInfo {\n  public objectType: CubismModelObjectType; // オブジェクトのタイプ (Drawable / Parts)\n  public objectIndex: number; // オブジェクトインデックス\n\n  constructor(objectIndex: number, objectType: CubismModelObjectType) {\n    this.objectIndex = objectIndex;\n    this.objectType = objectType;\n  }\n}\n\n/**\n * パーツ情報管理構造体\n */\nexport class CubismModelPartInfo {\n  public objects: csmVector<CubismModelObjectInfo>;\n  public childDrawObjects: PartChildDrawObjects;\n\n  constructor(\n    objects: csmVector<CubismModelObjectInfo> = new csmVector<CubismModelObjectInfo>(),\n    childDrawObjects: PartChildDrawObjects = new PartChildDrawObjects()\n  ) {\n    this.objects = objects;\n    this.childDrawObjects = childDrawObjects;\n  }\n\n  // 子オブジェクト数を返す関数\n  public getChildObjectCount(): number {\n    return this.objects.getSize();\n  }\n}\n\n/**\n * モデル\n *\n * Mocデータから生成されるモデルのクラス。\n */\nexport class CubismModel {\n  /**\n   * モデルのパラメータの更新\n   */\n  public update(): void {\n    // Update model\n    this._model.update();\n\n    this._model.drawables.resetDynamicFlags();\n  }\n\n  /**\n   * PixelsPerUnitを取得する\n   * @return PixelsPerUnit\n   */\n  public getPixelsPerUnit(): number {\n    if (this._model == null) {\n      return 0.0;\n    }\n\n    return this._model.canvasinfo.PixelsPerUnit;\n  }\n\n  /**\n   * キャンバスの幅を取得する\n   */\n  public getCanvasWidth(): number {\n    if (this._model == null) {\n      return 0.0;\n    }\n\n    return (\n      this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit\n    );\n  }\n\n  /**\n   * キャンバスの高さを取得する\n   */\n  public getCanvasHeight(): number {\n    if (this._model == null) {\n      return 0.0;\n    }\n\n    return (\n      this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit\n    );\n  }\n\n  /**\n   * パラメータを保存する\n   */\n  public saveParameters(): void {\n    const parameterCount: number = this._model.parameters.count;\n    const savedParameterCount: number = this._savedParameters.getSize();\n\n    for (let i = 0; i < parameterCount; ++i) {\n      if (i < savedParameterCount) {\n        this._savedParameters.set(i, this._parameterValues[i]);\n      } else {\n        this._savedParameters.pushBack(this._parameterValues[i]);\n      }\n    }\n  }\n\n  /**\n   * Drawableの乗算色を取得する\n   *\n   * @param drawableIndex Drawableのインデックス\n   *\n   * @return 指定した描画オブジェクトの乗算色(RGBA)\n   */\n  public getMultiplyColor(drawableIndex: number): CubismTextureColor {\n    if (\n      this.getOverrideFlagForModelMultiplyColors() ||\n      this.getOverrideFlagForDrawableMultiplyColors(drawableIndex)\n    ) {\n      return this._userDrawableMultiplyColors.at(drawableIndex).color;\n    }\n    return this.getDrawableMultiplyColor(drawableIndex);\n  }\n\n  /**\n   * Drawableのスクリーン色を取得する\n   *\n   * @param drawableIndex Drawableのインデックス\n   *\n   * @return 指定した描画オブジェクトのスクリーン色(RGBA)\n   */\n  public getScreenColor(drawableIndex: number): CubismTextureColor {\n    if (\n      this.getOverrideFlagForModelScreenColors() ||\n      this.getOverrideFlagForDrawableScreenColors(drawableIndex)\n    ) {\n      return this._userDrawableScreenColors.at(drawableIndex).color;\n    }\n    return this.getDrawableScreenColor(drawableIndex);\n  }\n\n  /**\n   * Drawableの乗算色をセットする\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param color 設定する乗算色(CubismTextureColor)\n   */\n  public setMultiplyColorByTextureColor(\n    drawableIndex: number,\n    color: CubismTextureColor\n  ) {\n    this.setMultiplyColorByRGBA(\n      drawableIndex,\n      color.r,\n      color.g,\n      color.b,\n      color.a\n    );\n  }\n\n  /**\n   * Drawableの乗算色をセットする\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param r 設定する乗算色のR値\n   * @param g 設定する乗算色のG値\n   * @param b 設定する乗算色のB値\n   * @param a 設定する乗算色のA値\n   */\n  public setMultiplyColorByRGBA(\n    drawableIndex: number,\n    r: number,\n    g: number,\n    b: number,\n    a = 1.0\n  ) {\n    this._userDrawableMultiplyColors.at(drawableIndex).color.r = r;\n    this._userDrawableMultiplyColors.at(drawableIndex).color.g = g;\n    this._userDrawableMultiplyColors.at(drawableIndex).color.b = b;\n    this._userDrawableMultiplyColors.at(drawableIndex).color.a = a;\n  }\n\n  /**\n   * Drawableのスクリーン色をセットする\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param color 設定するスクリーン色(CubismTextureColor)\n   */\n  public setScreenColorByTextureColor(\n    drawableIndex: number,\n    color: CubismTextureColor\n  ) {\n    this.setScreenColorByRGBA(\n      drawableIndex,\n      color.r,\n      color.g,\n      color.b,\n      color.a\n    );\n  }\n\n  /**\n   * Drawableのスクリーン色をセットする\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param r 設定するスクリーン色のR値\n   * @param g 設定するスクリーン色のG値\n   * @param b 設定するスクリーン色のB値\n   * @param a 設定するスクリーン色のA値\n   */\n  public setScreenColorByRGBA(\n    drawableIndex: number,\n    r: number,\n    g: number,\n    b: number,\n    a = 1.0\n  ) {\n    this._userDrawableScreenColors.at(drawableIndex).color.r = r;\n    this._userDrawableScreenColors.at(drawableIndex).color.g = g;\n    this._userDrawableScreenColors.at(drawableIndex).color.b = b;\n    this._userDrawableScreenColors.at(drawableIndex).color.a = a;\n  }\n\n  /**\n   * partの乗算色を取得する\n   *\n   * @param partIndex partのインデックス\n   * @return 指定したpartの乗算色\n   */\n  public getPartMultiplyColor(partIndex: number): CubismTextureColor {\n    return this._userPartMultiplyColors.at(partIndex).color;\n  }\n\n  /**\n   * partのスクリーン色を取得する\n   *\n   * @param partIndex partのインデックス\n   * @return 指定したpartのスクリーン色\n   */\n  public getPartScreenColor(partIndex: number): CubismTextureColor {\n    return this._userPartScreenColors.at(partIndex).color;\n  }\n\n  /**\n   * partのOverrideColor setter関数\n   *\n   * @param partIndex partのインデックス\n   * @param r 設定する色のR値\n   * @param g 設定する色のG値\n   * @param b 設定する色のB値\n   * @param a 設定する色のA値\n   * @param partColors 設定するpartのカラーデータ配列\n   * @param drawableColors partに関連するDrawableのカラーデータ配列\n   */\n  public setPartColor(\n    partIndex: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number,\n    partColors: csmVector<ColorData>,\n    drawableColors: csmVector<ColorData>\n  ) {\n    partColors.at(partIndex).color.r = r;\n    partColors.at(partIndex).color.g = g;\n    partColors.at(partIndex).color.b = b;\n    partColors.at(partIndex).color.a = a;\n\n    if (partColors.at(partIndex).isOverridden) {\n      for (\n        let i = 0;\n        i < this._partChildDrawables.at(partIndex).getSize();\n        ++i\n      ) {\n        const drawableIndex = this._partChildDrawables.at(partIndex).at(i);\n        drawableColors.at(drawableIndex).color.r = r;\n        drawableColors.at(drawableIndex).color.g = g;\n        drawableColors.at(drawableIndex).color.b = b;\n        drawableColors.at(drawableIndex).color.a = a;\n      }\n    }\n  }\n\n  /**\n   * 乗算色をセットする\n   *\n   * @param partIndex partのインデックス\n   * @param color 設定する乗算色(CubismTextureColor)\n   */\n  public setPartMultiplyColorByTextureColor(\n    partIndex: number,\n    color: CubismTextureColor\n  ) {\n    this.setPartMultiplyColorByRGBA(\n      partIndex,\n      color.r,\n      color.g,\n      color.b,\n      color.a\n    );\n  }\n\n  /**\n   * 乗算色をセットする\n   *\n   * @param partIndex partのインデックス\n   * @param r 設定する乗算色のR値\n   * @param g 設定する乗算色のG値\n   * @param b 設定する乗算色のB値\n   * @param a 設定する乗算色のA値\n   */\n  public setPartMultiplyColorByRGBA(\n    partIndex: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ) {\n    this.setPartColor(\n      partIndex,\n      r,\n      g,\n      b,\n      a,\n      this._userPartMultiplyColors,\n      this._userDrawableMultiplyColors\n    );\n  }\n\n  /**\n   * スクリーン色をセットする\n   *\n   * @param partIndex partのインデックス\n   * @param color 設定するスクリーン色(CubismTextureColor)\n   */\n  public setPartScreenColorByTextureColor(\n    partIndex: number,\n    color: CubismTextureColor\n  ) {\n    this.setPartScreenColorByRGBA(\n      partIndex,\n      color.r,\n      color.g,\n      color.b,\n      color.a\n    );\n  }\n\n  /**\n   * スクリーン色をセットする\n   *\n   * @param partIndex partのインデックス\n   * @param r 設定するスクリーン色のR値\n   * @param g 設定するスクリーン色のG値\n   * @param b 設定するスクリーン色のB値\n   * @param a 設定するスクリーン色のA値\n   */\n  public setPartScreenColorByRGBA(\n    partIndex: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ) {\n    this.setPartColor(\n      partIndex,\n      r,\n      g,\n      b,\n      a,\n      this._userPartScreenColors,\n      this._userDrawableScreenColors\n    );\n  }\n\n  /**\n   * Offscreenの乗算色を取得する\n   *\n   * @param offscreenIndex Offscreenのインデックス\n   *\n   * @return 指定した描画オブジェクトの乗算色(RGBA)\n   */\n  public getMultiplyColorOffscreen(offscreenIndex: number): CubismTextureColor {\n    if (\n      this.getOverrideFlagForModelMultiplyColors() ||\n      this.getOverrideFlagForOffscreenMultiplyColors(offscreenIndex)\n    ) {\n      return this._userOffscreenMultiplyColors.at(offscreenIndex).color;\n    }\n    return this.getOffscreenMultiplyColor(offscreenIndex);\n  }\n\n  /**\n   * Offscreenのスクリーン色を取得する\n   *\n   * @param offscreenIndex Offscreenのインデックス\n   *\n   * @return 指定した描画オブジェクトのスクリーン色(RGBA)\n   */\n  public getScreenColorOffscreen(offscreenIndex: number): CubismTextureColor {\n    if (\n      this.getOverrideFlagForModelScreenColors() ||\n      this.getOverrideFlagForOffscreenScreenColors(offscreenIndex)\n    ) {\n      return this._userOffscreenScreenColors.at(offscreenIndex).color;\n    }\n    return this.getOffscreenScreenColor(offscreenIndex);\n  }\n\n  /**\n   * Offscreenの乗算色をセットする\n   *\n   * @param offscreenIndex Offscreenのインデックス\n   * @param color 設定する乗算色(CubismTextureColor)\n   */\n  public setMultiplyColorByTextureColorOffscreen(\n    offscreenIndex: number,\n    color: CubismTextureColor\n  ) {\n    this.setMultiplyColorByRGBAOffscreen(\n      offscreenIndex,\n      color.r,\n      color.g,\n      color.b,\n      color.a\n    );\n  }\n\n  /**\n   * Offscreenの乗算色をセットする\n   *\n   * @param offscreenIndex Offscreenのインデックス\n   * @param r 設定する乗算色のR値\n   * @param g 設定する乗算色のG値\n   * @param b 設定する乗算色のB値\n   * @param a 設定する乗算色のA値\n   */\n  public setMultiplyColorByRGBAOffscreen(\n    offscreenIndex: number,\n    r: number,\n    g: number,\n    b: number,\n    a = 1.0\n  ) {\n    this._userOffscreenMultiplyColors.at(offscreenIndex).color.r = r;\n    this._userOffscreenMultiplyColors.at(offscreenIndex).color.g = g;\n    this._userOffscreenMultiplyColors.at(offscreenIndex).color.b = b;\n    this._userOffscreenMultiplyColors.at(offscreenIndex).color.a = a;\n  }\n\n  /**\n   * Offscreenのスクリーン色をセットする\n   *\n   * @param offscreenIndex Offscreenのインデックス\n   * @param color 設定するスクリーン色(CubismTextureColor)\n   */\n  public setScreenColorByTextureColorOffscreen(\n    offscreenIndex: number,\n    color: CubismTextureColor\n  ) {\n    this.setScreenColorByRGBAOffscreen(\n      offscreenIndex,\n      color.r,\n      color.g,\n      color.b,\n      color.a\n    );\n  }\n\n  /**\n   * Offscreenのスクリーン色をセットする\n   *\n   * @param offscreenIndex Offscreenのインデックス\n   * @param r 設定するスクリーン色のR値\n   * @param g 設定するスクリーン色のG値\n   * @param b 設定するスクリーン色のB値\n   * @param a 設定するスクリーン色のA値\n   */\n  public setScreenColorByRGBAOffscreen(\n    offscreenIndex: number,\n    r: number,\n    g: number,\n    b: number,\n    a = 1.0\n  ) {\n    this._userOffscreenScreenColors.at(offscreenIndex).color.r = r;\n    this._userOffscreenScreenColors.at(offscreenIndex).color.g = g;\n    this._userOffscreenScreenColors.at(offscreenIndex).color.b = b;\n    this._userOffscreenScreenColors.at(offscreenIndex).color.a = a;\n  }\n\n  /**\n   * Checks whether parameter repetition is performed for the entire model.\n   *\n   * @return true if parameter repetition is performed for the entire model; otherwise returns false.\n   */\n  public getOverrideFlagForModelParameterRepeat(): boolean {\n    return this._isOverriddenParameterRepeat;\n  }\n\n  /**\n   * Sets whether parameter repetition is performed for the entire model.\n   * Use true to perform parameter repetition for the entire model, or false to not perform it.\n   */\n  public setOverrideFlagForModelParameterRepeat(isRepeat: boolean): void {\n    this._isOverriddenParameterRepeat = isRepeat;\n  }\n\n  /**\n   * Returns the flag indicating whether to override the parameter repeat.\n   *\n   * @param parameterIndex Parameter index\n   *\n   * @return true if the parameter repeat is overridden, false otherwise.\n   */\n  public getOverrideFlagForParameterRepeat(parameterIndex: number): boolean {\n    return this._userParameterRepeatDataList.at(parameterIndex).isOverridden;\n  }\n\n  /**\n   * Sets the flag indicating whether to override the parameter repeat.\n   *\n   * @param parameterIndex Parameter index\n   * @param value true if it is to be overridden; otherwise, false.\n   */\n  public setOverrideFlagForParameterRepeat(\n    parameterIndex: number,\n    value: boolean\n  ): void {\n    this._userParameterRepeatDataList.at(parameterIndex).isOverridden = value;\n  }\n\n  /**\n   * Returns the repeat flag.\n   *\n   * @param parameterIndex Parameter index\n   *\n   * @return true if repeating, false otherwise.\n   */\n  public getRepeatFlagForParameterRepeat(parameterIndex: number): boolean {\n    return this._userParameterRepeatDataList.at(parameterIndex)\n      .isParameterRepeated;\n  }\n\n  /**\n   * Sets the repeat flag.\n   *\n   * @param parameterIndex Parameter index\n   * @param value true to enable repeating, false otherwise.\n   */\n  public setRepeatFlagForParameterRepeat(\n    parameterIndex: number,\n    value: boolean\n  ): void {\n    this._userParameterRepeatDataList.at(parameterIndex).isParameterRepeated =\n      value;\n  }\n\n  /**\n   * SDKから指定したモデルの乗算色を上書きするか\n   *\n   * @deprecated 名称変更のため非推奨 getOverrideFlagForModelMultiplyColors() に置き換え\n   *\n   * @return true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverwriteFlagForModelMultiplyColors(): boolean {\n    CubismLogWarning(\n      'getOverwriteFlagForModelMultiplyColors() is a deprecated function. Please use getOverrideFlagForModelMultiplyColors().'\n    );\n    return this.getOverrideFlagForModelMultiplyColors();\n  }\n\n  /**\n   * SDKから指定したモデルの乗算色を上書きするか\n   * @return true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverrideFlagForModelMultiplyColors(): boolean {\n    return this._isOverriddenModelMultiplyColors;\n  }\n\n  /**\n   * SDKから指定したモデルのスクリーン色を上書きするか\n   *\n   * @deprecated 名称変更のため非推奨 getOverrideFlagForModelScreenColors() に置き換え\n   *\n   * @return true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverwriteFlagForModelScreenColors(): boolean {\n    CubismLogWarning(\n      'getOverwriteFlagForModelScreenColors() is a deprecated function. Please use getOverrideFlagForModelScreenColors().'\n    );\n    return this.getOverrideFlagForModelScreenColors();\n  }\n\n  /**\n   * SDKから指定したモデルのスクリーン色を上書きするか\n   * @return true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverrideFlagForModelScreenColors(): boolean {\n    return this._isOverriddenModelScreenColors;\n  }\n\n  /**\n   * SDKから指定したモデルの乗算色を上書きするかセットする\n   *\n   * @deprecated 名称変更のため非推奨 setOverrideFlagForModelMultiplyColors(value: boolean) に置き換え\n   *\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteFlagForModelMultiplyColors(value: boolean) {\n    CubismLogWarning(\n      'setOverwriteFlagForModelMultiplyColors(value: boolean) is a deprecated function. Please use setOverrideFlagForModelMultiplyColors(value: boolean).'\n    );\n    this.setOverrideFlagForModelMultiplyColors(value);\n  }\n\n  /**\n   * SDKから指定したモデルの乗算色を上書きするかセットする\n   *\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverrideFlagForModelMultiplyColors(value: boolean) {\n    this._isOverriddenModelMultiplyColors = value;\n  }\n\n  /**\n   * SDKから指定したモデルのスクリーン色を上書きするかセットする\n   *\n   * @deprecated 名称変更のため非推奨 setOverrideFlagForModelScreenColors(value: boolean) に置き換え\n   *\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteFlagForModelScreenColors(value: boolean) {\n    CubismLogWarning(\n      'setOverwriteFlagForModelScreenColors(value: boolean) is a deprecated function. Please use setOverrideFlagForModelScreenColors(value: boolean).'\n    );\n    this.setOverrideFlagForModelScreenColors(value);\n  }\n\n  /**\n   * SDKから指定したモデルのスクリーン色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverrideFlagForModelScreenColors(value: boolean) {\n    this._isOverriddenModelScreenColors = value;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexの乗算色を上書きするか\n   *\n   * @deprecated 名称変更のため非推奨 getOverrideFlagForDrawableMultiplyColors(drawableIndex: number) に置き換え\n   *\n   * @param drawableIndex drawableのインデックス\n   *\n   * @return true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverwriteFlagForDrawableMultiplyColors(\n    drawableIndex: number\n  ): boolean {\n    CubismLogWarning(\n      'getOverwriteFlagForDrawableMultiplyColors(drawableIndex: number) is a deprecated function. Please use getOverrideFlagForDrawableMultiplyColors(drawableIndex: number).'\n    );\n    return this.getOverrideFlagForDrawableMultiplyColors(drawableIndex);\n  }\n\n  /**\n   * SDKから指定したDrawableIndexの乗算色を上書きするか\n   *\n   * @param drawableIndex drawableのインデックス\n   *\n   * @return true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverrideFlagForDrawableMultiplyColors(\n    drawableIndex: number\n  ): boolean {\n    return this._userDrawableMultiplyColors.at(drawableIndex).isOverridden;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするか\n   *\n   * @deprecated 名称変更のため非推奨 getOverrideFlagForDrawableScreenColors(drawableIndex: number) に置き換え\n   *\n   * @param drawableIndex drawableのインデックス\n   *\n   * @return true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverwriteFlagForDrawableScreenColors(\n    drawableIndex: number\n  ): boolean {\n    CubismLogWarning(\n      'getOverwriteFlagForDrawableScreenColors(drawableIndex: number) is a deprecated function. Please use getOverrideFlagForDrawableScreenColors(drawableIndex: number).'\n    );\n    return this.getOverrideFlagForDrawableScreenColors(drawableIndex);\n  }\n\n  /**\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするか\n   *\n   * @param drawableIndex drawableのインデックス\n   *\n   * @return true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverrideFlagForDrawableScreenColors(\n    drawableIndex: number\n  ): boolean {\n    return this._userDrawableScreenColors.at(drawableIndex).isOverridden;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexの乗算色を上書きするかセットする\n   *\n   * @deprecated 名称変更のため非推奨 setOverrideFlagForDrawableMultiplyColors(drawableIndex: number, value: boolean) に置き換え\n   *\n   * @param drawableIndex drawableのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteFlagForDrawableMultiplyColors(\n    drawableIndex: number,\n    value: boolean\n  ) {\n    CubismLogWarning(\n      'setOverwriteFlagForDrawableMultiplyColors(drawableIndex: number, value: boolean) is a deprecated function. Please use setOverrideFlagForDrawableMultiplyColors(drawableIndex: number, value: boolean).'\n    );\n    this.setOverrideFlagForDrawableMultiplyColors(drawableIndex, value);\n  }\n\n  /**\n   * SDKから指定したDrawableIndexの乗算色を上書きするかセットする\n   *\n   * @param drawableIndex drawableのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverrideFlagForDrawableMultiplyColors(\n    drawableIndex: number,\n    value: boolean\n  ) {\n    this._userDrawableMultiplyColors.at(drawableIndex).isOverridden = value;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするかセットする\n   *\n   * @deprecated 名称変更のため非推奨 setOverrideFlagForDrawableScreenColors(drawableIndex: number, value: boolean) に置き換え\n   *\n   * @param drawableIndex drawableのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteFlagForDrawableScreenColors(\n    drawableIndex: number,\n    value: boolean\n  ) {\n    CubismLogWarning(\n      'setOverwriteFlagForDrawableScreenColors(drawableIndex: number, value: boolean) is a deprecated function. Please use setOverrideFlagForDrawableScreenColors(drawableIndex: number, value: boolean).'\n    );\n    this.setOverrideFlagForDrawableScreenColors(drawableIndex, value);\n  }\n\n  /**\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするかセットする\n   *\n   * @param drawableIndex drawableのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverrideFlagForDrawableScreenColors(\n    drawableIndex: number,\n    value: boolean\n  ) {\n    this._userDrawableScreenColors.at(drawableIndex).isOverridden = value;\n  }\n\n  /**\n   * SDKからpartの乗算色を上書きするか\n   *\n   * @deprecated 名称変更のため非推奨 getOverrideColorForPartMultiplyColors(partIndex: number) に置き換え\n   *\n   * @param partIndex partのインデックス\n   *\n   * @return true    ->  SDKからの情報を優先する\n   *          false   ->  モデルに設定されている色情報を使用\n   */\n  public getOverwriteColorForPartMultiplyColors(partIndex: number) {\n    CubismLogWarning(\n      'getOverwriteColorForPartMultiplyColors(partIndex: number) is a deprecated function. Please use getOverrideColorForPartMultiplyColors(partIndex: number).'\n    );\n    return this.getOverrideColorForPartMultiplyColors(partIndex);\n  }\n\n  /**\n   * SDKからpartの乗算色を上書きするか\n   *\n   * @param partIndex partのインデックス\n   *\n   * @return true    ->  SDKからの情報を優先する\n   *          false   ->  モデルに設定されている色情報を使用\n   */\n  public getOverrideColorForPartMultiplyColors(partIndex: number) {\n    return this._userPartMultiplyColors.at(partIndex).isOverridden;\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするか\n   *\n   * @deprecated 名称変更のため非推奨 getOverrideColorForPartScreenColors(partIndex: number) に置き換え\n   *\n   * @param partIndex partのインデックス\n   *\n   * @return true    ->  SDKからの情報を優先する\n   *          false   ->  モデルに設定されている色情報を使用\n   */\n  public getOverwriteColorForPartScreenColors(partIndex: number) {\n    CubismLogWarning(\n      'getOverwriteColorForPartScreenColors(partIndex: number) is a deprecated function. Please use getOverrideColorForPartScreenColors(partIndex: number).'\n    );\n    return this.getOverrideColorForPartScreenColors(partIndex);\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするか\n   *\n   * @param partIndex partのインデックス\n   *\n   * @return true    ->  SDKからの情報を優先する\n   *          false   ->  モデルに設定されている色情報を使用\n   */\n  public getOverrideColorForPartScreenColors(partIndex: number) {\n    return this._userPartScreenColors.at(partIndex).isOverridden;\n  }\n\n  /**\n   * partのOverrideFlag setter関数\n   *\n   * @deprecated 名称変更のため非推奨 setOverrideColorForPartColors(\n   * partIndex: number,\n   * value: boolean,\n   * partColors: csmVector<PartColorData>,\n   * drawableColors: csmVector<DrawableColorData>) に置き換え\n   *\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   * @param partColors 設定するpartのカラーデータ配列\n   * @param drawableColors partに関連するDrawableのカラーデータ配列\n   */\n  public setOverwriteColorForPartColors(\n    partIndex: number,\n    value: boolean,\n    partColors: csmVector<PartColorData>,\n    drawableColors: csmVector<DrawableColorData>\n  ) {\n    CubismLogWarning(\n      'setOverwriteColorForPartColors(partIndex: number, value: boolean, partColors: csmVector<PartColorData>, drawableColors: csmVector<DrawableColorData>) is a deprecated function. Please use setOverrideColorForPartColors(partIndex: number, value: boolean, partColors: csmVector<PartColorData>, drawableColors: csmVector<DrawableColorData>).'\n    );\n    this.setOverrideColorForPartColors(\n      partIndex,\n      value,\n      partColors,\n      drawableColors\n    );\n  }\n\n  /**\n   * partのOverrideFlag setter関数\n   *\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   * @param partColors 設定するpartのカラーデータ配列\n   * @param drawableColors partに関連するDrawableのカラーデータ配列\n   */\n  public setOverrideColorForPartColors(\n    partIndex: number,\n    value: boolean,\n    partColors: csmVector<ColorData>,\n    drawableColors: csmVector<ColorData>\n  ) {\n    partColors.at(partIndex).isOverridden = value;\n\n    for (let i = 0; i < this._partChildDrawables.at(partIndex).getSize(); ++i) {\n      const drawableIndex = this._partChildDrawables.at(partIndex).at(i);\n      drawableColors.at(drawableIndex).isOverridden = value;\n\n      if (value) {\n        drawableColors.at(drawableIndex).color.r =\n          partColors.at(partIndex).color.r;\n        drawableColors.at(drawableIndex).color.g =\n          partColors.at(partIndex).color.g;\n        drawableColors.at(drawableIndex).color.b =\n          partColors.at(partIndex).color.b;\n        drawableColors.at(drawableIndex).color.a =\n          partColors.at(partIndex).color.a;\n      }\n    }\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするかをセットする\n   *\n   * @deprecated 名称変更のため非推奨 setOverrideColorForPartMultiplyColors(partIndex: number, value: boolean) に置き換え\n   *\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteColorForPartMultiplyColors(\n    partIndex: number,\n    value: boolean\n  ) {\n    CubismLogWarning(\n      'setOverwriteColorForPartMultiplyColors(partIndex: number, value: boolean) is a deprecated function. Please use setOverrideColorForPartMultiplyColors(partIndex: number, value: boolean).'\n    );\n    this.setOverrideColorForPartMultiplyColors(partIndex, value);\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするかをセットする\n   *\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverrideColorForPartMultiplyColors(\n    partIndex: number,\n    value: boolean\n  ) {\n    this._userPartMultiplyColors.at(partIndex).isOverridden = value;\n    this.setOverrideColorForPartColors(\n      partIndex,\n      value,\n      this._userPartMultiplyColors,\n      this._userDrawableMultiplyColors\n    );\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするかをセットする\n   *\n   * @deprecated 名称変更のため非推奨 setOverrideColorForPartScreenColors(partIndex: number, value: boolean) に置き換え\n   *\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteColorForPartScreenColors(\n    partIndex: number,\n    value: boolean\n  ) {\n    CubismLogWarning(\n      'setOverwriteColorForPartScreenColors(partIndex: number, value: boolean) is a deprecated function. Please use setOverrideColorForPartScreenColors(partIndex: number, value: boolean).'\n    );\n    this.setOverrideColorForPartScreenColors(partIndex, value);\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするかをセットする\n   *\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverrideColorForPartScreenColors(\n    partIndex: number,\n    value: boolean\n  ) {\n    this._userPartScreenColors.at(partIndex).isOverridden = value;\n    this.setOverrideColorForPartColors(\n      partIndex,\n      value,\n      this._userPartScreenColors,\n      this._userDrawableScreenColors\n    );\n  }\n\n  /**\n   * SDKから指定したOffscreenIndexの乗算色を上書きするか\n   *\n   * @param offscreenIndex offscreenのインデックス\n   *\n   * @return true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverrideFlagForOffscreenMultiplyColors(\n    offscreenIndex: number\n  ): boolean {\n    return this._userOffscreenMultiplyColors.at(offscreenIndex).isOverridden;\n  }\n\n  /**\n   * SDKから指定したOffscreenIndexのスクリーン色を上書きするか\n   *\n   * @param offscreenIndex offscreenのインデックス\n   *\n   * @return true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverrideFlagForOffscreenScreenColors(\n    offscreemIndex: number\n  ): boolean {\n    return this._userOffscreenScreenColors.at(offscreemIndex).isOverridden;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexの乗算色を上書きするかセットする\n   *\n   * @param offscreenIndex offscreenのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverrideFlagForOffscreenMultiplyColors(\n    offscreenIndex: number,\n    value: boolean\n  ) {\n    this._userOffscreenMultiplyColors.at(offscreenIndex).isOverridden = value;\n  }\n\n  /**\n   * SDKから指定したOffscreenIndexのスクリーン色を上書きするかセットする\n   *\n   * @param offscreenIndex offscreenのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverrideFlagForOffscreenScreenColors(\n    offscreenIndex: number,\n    value: boolean\n  ) {\n    this._userOffscreenScreenColors.at(offscreenIndex).isOverridden = value;\n  }\n\n  /**\n   * Drawableのカリング情報を取得する。\n   *\n   * @param   drawableIndex   Drawableのインデックス\n   *\n   * @return  Drawableのカリング情報\n   */\n  public getDrawableCulling(drawableIndex: number): boolean {\n    if (\n      this.getOverrideFlagForModelCullings() ||\n      this.getOverrideFlagForDrawableCullings(drawableIndex)\n    ) {\n      return this._userDrawableCullings.at(drawableIndex).isCulling;\n    }\n\n    const constantFlags = this._model.drawables.constantFlags;\n    return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(\n      constantFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableのカリング情報を設定する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param isCulling カリング情報\n   */\n  public setDrawableCulling(drawableIndex: number, isCulling: boolean): void {\n    this._userDrawableCullings.at(drawableIndex).isCulling = isCulling;\n  }\n\n  /**\n   * Offscreenのカリング情報を取得する。\n   *\n   * @param   offscreenIndex   Offscreenのインデックス\n   *\n   * @return  Offscreenのカリング情報\n   */\n  public getOffscreenCulling(offscreenIndex: number): boolean {\n    if (\n      this.getOverrideFlagForModelCullings() ||\n      this.getOverrideFlagForOffscreenCullings(offscreenIndex)\n    ) {\n      return this._userOffscreenCullings.at(offscreenIndex).isCulling;\n    }\n\n    const constantFlags = this._model.offscreens.constantFlags;\n    return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(\n      constantFlags[offscreenIndex]\n    );\n  }\n\n  /**\n   * Offscreenのカリング設定を設定する。\n   *\n   * @param offscreenIndex Offscreenのインデックス\n   * @param isCulling カリング情報\n   */\n  public setOffscreenCulling(offscreenIndex: number, isCulling: boolean): void {\n    this._userOffscreenCullings.at(offscreenIndex).isCulling = isCulling;\n  }\n\n  /**\n   * SDKからモデル全体のカリング設定を上書きするか。\n   *\n   * @deprecated 名称変更のため非推奨 getOverrideFlagForModelCullings() に置き換え\n   *\n   * @return  true    ->  SDK上のカリング設定を使用\n   *          false   ->  モデルのカリング設定を使用\n   */\n  public getOverwriteFlagForModelCullings(): boolean {\n    CubismLogWarning(\n      'getOverwriteFlagForModelCullings() is a deprecated function. Please use getOverrideFlagForModelCullings().'\n    );\n    return this.getOverrideFlagForModelCullings();\n  }\n\n  /**\n   * SDKからモデル全体のカリング設定を上書きするか。\n   *\n   * @return  true    ->  SDK上のカリング設定を使用\n   *          false   ->  モデルのカリング設定を使用\n   */\n  public getOverrideFlagForModelCullings(): boolean {\n    return this._isOverriddenCullings;\n  }\n\n  /**\n   * SDKからモデル全体のカリング設定を上書きするかを設定する。\n   *\n   * @deprecated 名称変更のため非推奨 setOverrideFlagForModelCullings(isOverriddenCullings: boolean) に置き換え\n   *\n   * @param isOveriddenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\n   */\n  public setOverwriteFlagForModelCullings(isOverriddenCullings: boolean): void {\n    CubismLogWarning(\n      'setOverwriteFlagForModelCullings(isOverriddenCullings: boolean) is a deprecated function. Please use setOverrideFlagForModelCullings(isOverriddenCullings: boolean).'\n    );\n    this.setOverrideFlagForModelCullings(isOverriddenCullings);\n  }\n\n  /**\n   * SDKからモデル全体のカリング設定を上書きするかを設定する。\n   *\n   * @param isOverriddenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\n   */\n  public setOverrideFlagForModelCullings(isOverriddenCullings: boolean): void {\n    this._isOverriddenCullings = isOverriddenCullings;\n  }\n\n  /**\n   *\n   * @deprecated 名称変更のため非推奨 getOverrideFlagForDrawableCullings(drawableIndex: number) に置き換え\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return  true    ->  SDK上のカリング設定を使用\n   *          false   ->  モデルのカリング設定を使用\n   */\n  public getOverwriteFlagForDrawableCullings(drawableIndex: number): boolean {\n    CubismLogWarning(\n      'getOverwriteFlagForDrawableCullings(drawableIndex: number) is a deprecated function. Please use getOverrideFlagForDrawableCullings(drawableIndex: number).'\n    );\n    return this.getOverrideFlagForDrawableCullings(drawableIndex);\n  }\n\n  /**\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return  true    ->  SDK上のカリング設定を使用\n   *          false   ->  モデルのカリング設定を使用\n   */\n  public getOverrideFlagForDrawableCullings(drawableIndex: number): boolean {\n    return this._userDrawableCullings.at(drawableIndex).isOverridden;\n  }\n\n  /**\n   * @param offscreenIndex Offscreenのインデックス\n   * @return  true    ->  SDK上のカリング設定を使用\n   *          false   ->  モデルのカリング設定を使用\n   */\n  public getOverrideFlagForOffscreenCullings(offscreenIndex: number): boolean {\n    return this._userOffscreenCullings.at(offscreenIndex).isOverridden;\n  }\n\n  /**\n   *\n   * @deprecated 名称変更のため非推奨 setOverrideFlagForDrawableCullings(drawableIndex: number, isOverriddenCullings: bolean) に置き換え\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param isOverriddenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\n   */\n  public setOverwriteFlagForDrawableCullings(\n    drawableIndex: number,\n    isOverriddenCullings: boolean\n  ): void {\n    CubismLogWarning(\n      'setOverwriteFlagForDrawableCullings(drawableIndex: number, isOverriddenCullings: boolean) is a deprecated function. Please use setOverrideFlagForDrawableCullings(drawableIndex: number, isOverriddenCullings: boolean).'\n    );\n    this.setOverrideFlagForDrawableCullings(\n      drawableIndex,\n      isOverriddenCullings\n    );\n  }\n\n  /**\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param isOverriddenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\n   */\n  public setOverrideFlagForDrawableCullings(\n    drawableIndex: number,\n    isOverriddenCullings: boolean\n  ): void {\n    this._userDrawableCullings.at(drawableIndex).isOverridden =\n      isOverriddenCullings;\n  }\n\n  /**\n   * モデルの不透明度を取得する\n   *\n   * @return 不透明度の値\n   */\n  public getModelOapcity(): number {\n    return this._modelOpacity;\n  }\n\n  /**\n   * モデルの不透明度を設定する\n   *\n   * @param value 不透明度の値\n   */\n  public setModelOapcity(value: number) {\n    this._modelOpacity = value;\n  }\n\n  /**\n   * モデルを取得\n   */\n  public getModel(): Live2DCubismCore.Model {\n    return this._model;\n  }\n\n  /**\n   * パーツのインデックスを取得\n   * @param partId パーツのID\n   * @return パーツのインデックス\n   */\n  public getPartIndex(partId: CubismIdHandle): number {\n    let partIndex: number;\n    const partCount: number = this._model.parts.count;\n\n    for (partIndex = 0; partIndex < partCount; ++partIndex) {\n      if (partId == this._partIds.at(partIndex)) {\n        return partIndex;\n      }\n    }\n\n    // モデルに存在していない場合、非存在パーツIDリスト内にあるかを検索し、そのインデックスを返す\n    if (this._notExistPartId.isExist(partId)) {\n      return this._notExistPartId.getValue(partId);\n    }\n\n    // 非存在パーツIDリストにない場合、新しく要素を追加する\n    partIndex = partCount + this._notExistPartId.getSize();\n    this._notExistPartId.setValue(partId, partIndex);\n    this._notExistPartOpacities.appendKey(partIndex);\n\n    return partIndex;\n  }\n\n  /**\n   * パーツのIDを取得する。\n   *\n   * @param partIndex 取得するパーツのインデックス\n   * @return パーツのID\n   */\n  public getPartId(partIndex: number): CubismIdHandle {\n    const partId = this._model.parts.ids[partIndex];\n    return CubismFramework.getIdManager().getId(partId);\n  }\n\n  /**\n   * パーツの個数の取得\n   * @return パーツの個数\n   */\n  public getPartCount(): number {\n    const partCount: number = this._model.parts.count;\n    return partCount;\n  }\n\n  /**\n   * パーツの親パーツインデックスのリストを取得\n   *\n   * @return パーツの親パーツインデックスのリスト\n   */\n  public getPartParentPartIndices(): Int32Array {\n    const parentIndices = this._model.parts.parentIndices;\n    return parentIndices;\n  }\n\n  /**\n   * パーツの不透明度の設定(Index)\n   * @param partIndex パーツのインデックス\n   * @param opacity 不透明度\n   */\n  public setPartOpacityByIndex(partIndex: number, opacity: number): void {\n    if (this._notExistPartOpacities.isExist(partIndex)) {\n      this._notExistPartOpacities.setValue(partIndex, opacity);\n      return;\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n\n    this._partOpacities[partIndex] = opacity;\n  }\n\n  /**\n   * パーツの不透明度の設定(Id)\n   * @param partId パーツのID\n   * @param opacity パーツの不透明度\n   */\n  public setPartOpacityById(partId: CubismIdHandle, opacity: number): void {\n    // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n    const index: number = this.getPartIndex(partId);\n\n    if (index < 0) {\n      return; // パーツがないのでスキップ\n    }\n\n    this.setPartOpacityByIndex(index, opacity);\n  }\n\n  /**\n   * パーツの不透明度の取得(index)\n   * @param partIndex パーツのインデックス\n   * @return パーツの不透明度\n   */\n  public getPartOpacityByIndex(partIndex: number): number {\n    if (this._notExistPartOpacities.isExist(partIndex)) {\n      // モデルに存在しないパーツIDの場合、非存在パーツリストから不透明度を返す。\n      return this._notExistPartOpacities.getValue(partIndex);\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n\n    return this._partOpacities[partIndex];\n  }\n\n  /**\n   * パーツの不透明度の取得(id)\n   * @param partId パーツのＩｄ\n   * @return パーツの不透明度\n   */\n  public getPartOpacityById(partId: CubismIdHandle): number {\n    // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n    const index: number = this.getPartIndex(partId);\n\n    if (index < 0) {\n      return 0; // パーツが無いのでスキップ\n    }\n\n    return this.getPartOpacityByIndex(index);\n  }\n\n  /**\n   * パラメータのインデックスの取得\n   * @param パラメータID\n   * @return パラメータのインデックス\n   */\n  public getParameterIndex(parameterId: CubismIdHandle): number {\n    let parameterIndex: number;\n    const idCount: number = this._model.parameters.count;\n\n    for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {\n      if (parameterId != this._parameterIds.at(parameterIndex)) {\n        continue;\n      }\n\n      return parameterIndex;\n    }\n\n    // モデルに存在していない場合、非存在パラメータIDリスト内を検索し、そのインデックスを返す\n    if (this._notExistParameterId.isExist(parameterId)) {\n      return this._notExistParameterId.getValue(parameterId);\n    }\n\n    // 非存在パラメータIDリストにない場合新しく要素を追加する\n    parameterIndex =\n      this._model.parameters.count + this._notExistParameterId.getSize();\n\n    this._notExistParameterId.setValue(parameterId, parameterIndex);\n    this._notExistParameterValues.appendKey(parameterIndex);\n\n    return parameterIndex;\n  }\n\n  /**\n   * パラメータの個数の取得\n   * @return パラメータの個数\n   */\n  public getParameterCount(): number {\n    return this._model.parameters.count;\n  }\n\n  /**\n   * パラメータの種類の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return csmParameterType_Normal -> 通常のパラメータ\n   *          csmParameterType_BlendShape -> ブレンドシェイプパラメータ\n   */\n  public getParameterType(\n    parameterIndex: number\n  ): Live2DCubismCore.csmParameterType {\n    return this._model.parameters.types[parameterIndex];\n  }\n\n  /**\n   * パラメータの最大値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータの最大値\n   */\n  public getParameterMaximumValue(parameterIndex: number): number {\n    return this._model.parameters.maximumValues[parameterIndex];\n  }\n\n  /**\n   * パラメータの最小値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータの最小値\n   */\n  public getParameterMinimumValue(parameterIndex: number): number {\n    return this._model.parameters.minimumValues[parameterIndex];\n  }\n\n  /**\n   * パラメータのデフォルト値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータのデフォルト値\n   */\n  public getParameterDefaultValue(parameterIndex: number): number {\n    return this._model.parameters.defaultValues[parameterIndex];\n  }\n\n  /**\n   * 指定したパラメータindexのIDを取得\n   *\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータID\n   */\n  public getParameterId(parameterIndex: number): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._model.parameters.ids[parameterIndex]\n    );\n  }\n\n  /**\n   * パラメータの値の取得\n   * @param parameterIndex    パラメータのインデックス\n   * @return パラメータの値\n   */\n  public getParameterValueByIndex(parameterIndex: number): number {\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\n      return this._notExistParameterValues.getValue(parameterIndex);\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\n    );\n\n    return this._parameterValues[parameterIndex];\n  }\n\n  /**\n   * パラメータの値の取得\n   * @param parameterId    パラメータのID\n   * @return パラメータの値\n   */\n  public getParameterValueById(parameterId: CubismIdHandle): number {\n    // 高速化のためにparameterIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n    const parameterIndex: number = this.getParameterIndex(parameterId);\n    return this.getParameterValueByIndex(parameterIndex);\n  }\n\n  /**\n   * パラメータの値の設定\n   * @param parameterIndex パラメータのインデックス\n   * @param value パラメータの値\n   * @param weight 重み\n   */\n  public setParameterValueByIndex(\n    parameterIndex: number,\n    value: number,\n    weight = 1.0\n  ): void {\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\n      this._notExistParameterValues.setValue(\n        parameterIndex,\n        weight == 1\n          ? value\n          : this._notExistParameterValues.getValue(parameterIndex) *\n              (1 - weight) +\n              value * weight\n      );\n\n      return;\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\n    );\n\n    if (this.isRepeat(parameterIndex)) {\n      value = this.getParameterRepeatValue(parameterIndex, value);\n    } else {\n      value = this.getParameterClampValue(parameterIndex, value);\n    }\n\n    this._parameterValues[parameterIndex] =\n      weight == 1\n        ? value\n        : (this._parameterValues[parameterIndex] =\n            this._parameterValues[parameterIndex] * (1 - weight) +\n            value * weight);\n  }\n\n  /**\n   * パラメータの値の設定\n   * @param parameterId パラメータのID\n   * @param value パラメータの値\n   * @param weight 重み\n   */\n  public setParameterValueById(\n    parameterId: CubismIdHandle,\n    value: number,\n    weight = 1.0\n  ): void {\n    const index: number = this.getParameterIndex(parameterId);\n    this.setParameterValueByIndex(index, value, weight);\n  }\n\n  /**\n   * パラメータの値の加算(index)\n   * @param parameterIndex パラメータインデックス\n   * @param value 加算する値\n   * @param weight 重み\n   */\n  public addParameterValueByIndex(\n    parameterIndex: number,\n    value: number,\n    weight = 1.0\n  ): void {\n    this.setParameterValueByIndex(\n      parameterIndex,\n      this.getParameterValueByIndex(parameterIndex) + value * weight\n    );\n  }\n\n  /**\n   * パラメータの値の加算(id)\n   * @param parameterId パラメータＩＤ\n   * @param value 加算する値\n   * @param weight 重み\n   */\n  public addParameterValueById(\n    parameterId: any,\n    value: number,\n    weight = 1.0\n  ): void {\n    const index: number = this.getParameterIndex(parameterId);\n    this.addParameterValueByIndex(index, value, weight);\n  }\n\n  /**\n   * Gets whether the parameter has the repeat setting.\n   *\n   * @param parameterIndex Parameter index\n   *\n   * @return true if it is set, otherwise returns false.\n   */\n  public isRepeat(parameterIndex: number): boolean {\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\n      return false;\n    }\n\n    // In-index range detection\n    CSM_ASSERT(\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\n    );\n\n    let isRepeat: boolean;\n\n    // Determines whether to perform parameter repeat processing\n    if (\n      this._isOverriddenParameterRepeat ||\n      this._userParameterRepeatDataList.at(parameterIndex).isOverridden\n    ) {\n      // Use repeat information set on the SDK side\n      isRepeat =\n        this._userParameterRepeatDataList.at(\n          parameterIndex\n        ).isParameterRepeated;\n    } else {\n      // Use repeat information set in Editor\n      isRepeat = this._model.parameters.repeats[parameterIndex] != 0;\n    }\n\n    return isRepeat;\n  }\n\n  /**\n   * Returns the calculated result ensuring the value falls within the parameter's range.\n   *\n   * @param parameterIndex Parameter index\n   * @param value Parameter value\n   *\n   * @return a value that falls within the parameter’s range. If the parameter does not exist, returns it as is.\n   */\n  public getParameterRepeatValue(\n    parameterIndex: number,\n    value: number\n  ): number {\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\n      return value;\n    }\n\n    // In-index range detection\n    CSM_ASSERT(\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\n    );\n\n    const maxValue: number =\n      this._model.parameters.maximumValues[parameterIndex];\n    const minValue: number =\n      this._model.parameters.minimumValues[parameterIndex];\n    const valueSize: number = maxValue - minValue;\n\n    if (maxValue < value) {\n      const overValue: number = CubismMath.mod(value - maxValue, valueSize);\n      if (!Number.isNaN(overValue)) {\n        value = minValue + overValue;\n      } else {\n        value = maxValue;\n      }\n    }\n    if (value < minValue) {\n      const overValue: number = CubismMath.mod(minValue - value, valueSize);\n      if (!Number.isNaN(overValue)) {\n        value = maxValue - overValue;\n      } else {\n        value = minValue;\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Returns the result of clamping the value to ensure it falls within the parameter's range.\n   *\n   * @param parameterIndex Parameter index\n   * @param value Parameter value\n   *\n   * @return the clamped value. If the parameter does not exist, returns it as is.\n   */\n  public getParameterClampValue(parameterIndex: number, value: number): number {\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\n      return value;\n    }\n\n    // In-index range detection\n    CSM_ASSERT(\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\n    );\n\n    const maxValue: number =\n      this._model.parameters.maximumValues[parameterIndex];\n    const minValue: number =\n      this._model.parameters.minimumValues[parameterIndex];\n\n    return CubismMath.clamp(value, minValue, maxValue);\n  }\n\n  /**\n   * Returns the repeat of the parameter.\n   *\n   * @param parameterIndex Parameter index\n   *\n   * @return the raw data parameter repeat from the Cubism Core.\n   */\n  public getParameterRepeats(parameterIndex: number): boolean {\n    return this._model.parameters.repeats[parameterIndex] != 0;\n  }\n\n  /**\n   * パラメータの値の乗算\n   * @param parameterId パラメータのID\n   * @param value 乗算する値\n   * @param weight 重み\n   */\n  public multiplyParameterValueById(\n    parameterId: CubismIdHandle,\n    value: number,\n    weight = 1.0\n  ): void {\n    const index: number = this.getParameterIndex(parameterId);\n    this.multiplyParameterValueByIndex(index, value, weight);\n  }\n\n  /**\n   * パラメータの値の乗算\n   * @param parameterIndex パラメータのインデックス\n   * @param value 乗算する値\n   * @param weight 重み\n   */\n  public multiplyParameterValueByIndex(\n    parameterIndex: number,\n    value: number,\n    weight = 1.0\n  ): void {\n    this.setParameterValueByIndex(\n      parameterIndex,\n      this.getParameterValueByIndex(parameterIndex) *\n        (1.0 + (value - 1.0) * weight)\n    );\n  }\n\n  /**\n   * Drawableのインデックスの取得\n   * @param drawableId DrawableのID\n   * @return Drawableのインデックス\n   */\n  public getDrawableIndex(drawableId: CubismIdHandle): number {\n    const drawableCount = this._model.drawables.count;\n\n    for (\n      let drawableIndex = 0;\n      drawableIndex < drawableCount;\n      ++drawableIndex\n    ) {\n      if (this._drawableIds.at(drawableIndex) == drawableId) {\n        return drawableIndex;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Drawableの個数の取得\n   * @return drawableの個数\n   */\n  public getDrawableCount(): number {\n    const drawableCount = this._model.drawables.count;\n    return drawableCount;\n  }\n\n  /**\n   * DrawableのIDを取得する\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのID\n   */\n  public getDrawableId(drawableIndex: number): CubismIdHandle {\n    const parameterIds: string[] = this._model.drawables.ids;\n    return CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);\n  }\n\n  /**\n   * Drawableの描画順リストの取得\n   * @return Drawableの描画順リスト\n   */\n  public getRenderOrders(): Int32Array {\n    const renderOrders: Int32Array = this._model.getRenderOrders();\n    return renderOrders;\n  }\n\n  /**\n   * @deprecated\n   * 関数名が誤っていたため、代替となる getDrawableTextureIndex を追加し、この関数は非推奨となりました。\n   *\n   * Drawableのテクスチャインデックスリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのテクスチャインデックスリスト\n   */\n  public getDrawableTextureIndices(drawableIndex: number): number {\n    return this.getDrawableTextureIndex(drawableIndex);\n  }\n\n  /**\n   * Drawableのテクスチャインデックスの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのテクスチャインデックス\n   */\n  public getDrawableTextureIndex(drawableIndex: number): number {\n    const textureIndices: Int32Array = this._model.drawables.textureIndices;\n    return textureIndices[drawableIndex];\n  }\n\n  /**\n   * DrawableのVertexPositionsの変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの頂点情報が変化したかを取得する。\n   *\n   * @param   drawableIndex   Drawableのインデックス\n   * @return  true    Drawableの頂点情報が直近のCubismModel.update関数で変化した\n   *          false   Drawableの頂点情報が直近のCubismModel.update関数で変化していない\n   */\n  public getDrawableDynamicFlagVertexPositionsDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableの頂点インデックスの個数の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点インデックスの個数\n   */\n  public getDrawableVertexIndexCount(drawableIndex: number): number {\n    const indexCounts: Int32Array = this._model.drawables.indexCounts;\n    return indexCounts[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点の個数の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点の個数\n   */\n  public getDrawableVertexCount(drawableIndex: number): number {\n    const vertexCounts = this._model.drawables.vertexCounts;\n    return vertexCounts[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点リストの取得\n   * @param drawableIndex drawableのインデックス\n   * @return drawableの頂点リスト\n   */\n  public getDrawableVertices(drawableIndex: number): Float32Array {\n    return this.getDrawableVertexPositions(drawableIndex);\n  }\n\n  /**\n   * Drawableの頂点インデックスリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点インデックスリスト\n   */\n  public getDrawableVertexIndices(drawableIndex: number): Uint16Array {\n    const indicesArray: Uint16Array[] = this._model.drawables.indices;\n    return indicesArray[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点リストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点リスト\n   */\n  public getDrawableVertexPositions(drawableIndex: number): Float32Array {\n    const verticesArray: Float32Array[] = this._model.drawables.vertexPositions;\n    return verticesArray[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点のUVリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点UVリスト\n   */\n  public getDrawableVertexUvs(drawableIndex: number): Float32Array {\n    const uvsArray: Float32Array[] = this._model.drawables.vertexUvs;\n    return uvsArray[drawableIndex];\n  }\n\n  /**\n   * Drawableの不透明度の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの不透明度\n   */\n  public getDrawableOpacity(drawableIndex: number): number {\n    const opacities: Float32Array = this._model.drawables.opacities;\n    return opacities[drawableIndex];\n  }\n\n  /**\n   * Drawableの乗算色の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの乗算色(RGBA)\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\n   */\n  public getDrawableMultiplyColor(drawableIndex: number): CubismTextureColor {\n    if (this._drawableMultiplyColors == null) {\n      this._drawableMultiplyColors = new Array<CubismTextureColor>(\n        this._model.drawables.count\n      );\n      this._drawableMultiplyColors.fill(new CubismTextureColor());\n    }\n    const multiplyColors: Float32Array = this._model.drawables.multiplyColors;\n\n    const index = drawableIndex * 4;\n    this._drawableMultiplyColors[drawableIndex].r = multiplyColors[index];\n    this._drawableMultiplyColors[drawableIndex].g = multiplyColors[index + 1];\n    this._drawableMultiplyColors[drawableIndex].b = multiplyColors[index + 2];\n    this._drawableMultiplyColors[drawableIndex].a = multiplyColors[index + 3];\n    return this._drawableMultiplyColors[drawableIndex];\n  }\n\n  /**\n   * Drawableのスクリーン色の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのスクリーン色(RGBA)\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\n   */\n  public getDrawableScreenColor(drawableIndex: number): CubismTextureColor {\n    if (this._drawableScreenColors == null) {\n      this._drawableScreenColors = new Array<CubismTextureColor>(\n        this._model.drawables.count\n      );\n      this._drawableScreenColors.fill(new CubismTextureColor());\n    }\n    const screenColors: Float32Array = this._model.drawables.screenColors;\n\n    const index = drawableIndex * 4;\n    this._drawableScreenColors[drawableIndex].r = screenColors[index];\n    this._drawableScreenColors[drawableIndex].g = screenColors[index + 1];\n    this._drawableScreenColors[drawableIndex].b = screenColors[index + 2];\n    this._drawableScreenColors[drawableIndex].a = screenColors[index + 3];\n    return this._drawableScreenColors[drawableIndex];\n  }\n\n  /**\n   * Offscreenの乗算色の取得\n   * @param offscreenIndex Offscreenのインデックス\n   * @return Offscreenの乗算色(RGBA)\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\n   */\n  public getOffscreenMultiplyColor(offscreenIndex: number): CubismTextureColor {\n    if (this._offscreenMultiplyColors == null) {\n      this._offscreenMultiplyColors = new Array<CubismTextureColor>(\n        this._model.offscreens.count\n      );\n      this._offscreenMultiplyColors.fill(new CubismTextureColor());\n    }\n    const multiplyColors: Float32Array = this._model.offscreens.multiplyColors;\n\n    const index = offscreenIndex * 4;\n    this._offscreenMultiplyColors[offscreenIndex].r = multiplyColors[index];\n    this._offscreenMultiplyColors[offscreenIndex].g = multiplyColors[index + 1];\n    this._offscreenMultiplyColors[offscreenIndex].b = multiplyColors[index + 2];\n    this._offscreenMultiplyColors[offscreenIndex].a = multiplyColors[index + 3];\n    return this._offscreenMultiplyColors[offscreenIndex];\n  }\n\n  /**\n   * Offscreenのスクリーン色の取得\n   * @param offscreenIndex Offscreenのインデックス\n   * @return Offscreenのスクリーン色(RGBA)\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\n   */\n  public getOffscreenScreenColor(offscreenIndex: number): CubismTextureColor {\n    if (this._offscreenScreenColors == null) {\n      this._offscreenScreenColors = new Array<CubismTextureColor>(\n        this._model.offscreens.count\n      );\n      this._offscreenScreenColors.fill(new CubismTextureColor());\n    }\n    const screenColors: Float32Array = this._model.offscreens.screenColors;\n\n    const index = offscreenIndex * 4;\n    this._offscreenScreenColors[offscreenIndex].r = screenColors[index];\n    this._offscreenScreenColors[offscreenIndex].g = screenColors[index + 1];\n    this._offscreenScreenColors[offscreenIndex].b = screenColors[index + 2];\n    this._offscreenScreenColors[offscreenIndex].a = screenColors[index + 3];\n    return this._offscreenScreenColors[offscreenIndex];\n  }\n\n  /**\n   * Drawableの親パーツのインデックスの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの親パーツのインデックス\n   */\n  public getDrawableParentPartIndex(drawableIndex: number): number {\n    return this._model.drawables.parentPartIndices[drawableIndex];\n  }\n\n  /**\n   * Drawableのブレンドモードを取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのブレンドモード\n   */\n  public getDrawableBlendMode(drawableIndex: number): CubismBlendMode {\n    const constantFlags = this._model.drawables.constantFlags;\n\n    return Live2DCubismCore.Utils.hasBlendAdditiveBit(\n      constantFlags[drawableIndex]\n    )\n      ? CubismBlendMode.CubismBlendMode_Additive\n      : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(\n            constantFlags[drawableIndex]\n          )\n        ? CubismBlendMode.CubismBlendMode_Multiplicative\n        : CubismBlendMode.CubismBlendMode_Normal;\n  }\n\n  /**\n   * Drawableのカラーブレンドの取得(Cubism 5.3 以降)\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return Drawableのカラーブレンド\n   */\n  public getDrawableColorBlend(drawableIndex: number): CubismColorBlend {\n    // キャッシュ\n    if (\n      this._drawableColorBlends[drawableIndex] ==\n      CubismColorBlend.ColorBlend_None\n    ) {\n      this._drawableColorBlends[drawableIndex] =\n        this._model.drawables.blendModes[drawableIndex] & 0xff;\n    }\n    return this._drawableColorBlends[drawableIndex];\n  }\n\n  /**\n   * Drawableのアルファブレンドの取得(Cubism 5.3 以降)\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return Drawableのアルファブレンド\n   */\n  public getDrawableAlphaBlend(drawableIndex: number): CubismAlphaBlend {\n    // キャッシュ\n    if (\n      this._drawableAlphaBlends[drawableIndex] ==\n      CubismAlphaBlend.AlphaBlend_None\n    ) {\n      this._drawableAlphaBlends[drawableIndex] =\n        (this._model.drawables.blendModes[drawableIndex] >> 8) & 0xff;\n    }\n    return this._drawableAlphaBlends[drawableIndex];\n  }\n\n  /**\n   * Drawableのマスクの反転使用の取得\n   *\n   * Drawableのマスク使用時の反転設定を取得する。\n   * マスクを使用しない場合は無視される。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return Drawableの反転設定\n   */\n  public getDrawableInvertedMaskBit(drawableIndex: number): boolean {\n    const constantFlags: Uint8Array = this._model.drawables.constantFlags;\n\n    return Live2DCubismCore.Utils.hasIsInvertedMaskBit(\n      constantFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableのクリッピングマスクリストの取得\n   * @return Drawableのクリッピングマスクリスト\n   */\n  public getDrawableMasks(): Int32Array[] {\n    const masks: Int32Array[] = this._model.drawables.masks;\n    return masks;\n  }\n\n  /**\n   * Drawableのクリッピングマスクの個数リストの取得\n   * @return Drawableのクリッピングマスクの個数リスト\n   */\n  public getDrawableMaskCounts(): Int32Array {\n    const maskCounts: Int32Array = this._model.drawables.maskCounts;\n    return maskCounts;\n  }\n\n  /**\n   * クリッピングマスクの使用状態\n   *\n   * @return true クリッピングマスクを使用している\n   * @return false クリッピングマスクを使用していない\n   */\n  public isUsingMasking(): boolean {\n    for (let d = 0; d < this._model.drawables.count; ++d) {\n      if (this._model.drawables.maskCounts[d] <= 0) {\n        continue;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Offscreenでクリッピングマスクを使用しているかどうかを取得\n   *\n   * @return true クリッピングマスクをオフスクリーンで使用している\n   */\n  public isUsingMaskingForOffscreen(): boolean {\n    for (let d = 0; d < this.getOffscreenCount(); ++d) {\n      if (this._model.offscreens.maskCounts[d] <= 0) {\n        continue;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Drawableの表示情報を取得する\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableが表示\n   * @return false Drawableが非表示\n   */\n  public getDrawableDynamicFlagIsVisible(drawableIndex: number): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);\n  }\n\n  /**\n   * DrawableのDrawOrderの変化情報の取得\n   *\n   * 直近のCubismModel.update関数でdrawableのdrawOrderが変化したかを取得する。\n   * drawOrderはartMesh上で指定する0から1000の情報\n   * @param drawableIndex drawableのインデックス\n   * @return true drawableの不透明度が直近のCubismModel.update関数で変化した\n   * @return false drawableの不透明度が直近のCubismModel.update関数で変化している\n   */\n  public getDrawableDynamicFlagVisibilityDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableの不透明度の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でdrawableの不透明度が変化したかを取得する。\n   *\n   * @param drawableIndex drawableのインデックス\n   * @return true Drawableの不透明度が直近のCubismModel.update関数で変化した\n   * @return false Drawableの不透明度が直近のCubismModel.update関数で変化してない\n   */\n  public getDrawableDynamicFlagOpacityDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasOpacityDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableの描画順序の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの描画の順序が変化したかを取得する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableの描画の順序が直近のCubismModel.update関数で変化した\n   * @return false Drawableの描画の順序が直近のCubismModel.update関数で変化してない\n   */\n  public getDrawableDynamicFlagRenderOrderDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableの乗算色・スクリーン色の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの乗算色・スクリーン色が変化したかを取得する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableの乗算色・スクリーン色が直近のCubismModel.update関数で変化した\n   * @return false Drawableの乗算色・スクリーン色が直近のCubismModel.update関数で変化してない\n   */\n  public getDrawableDynamicFlagBlendColorDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasBlendColorDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * オフスクリーンの個数を取得する\n   * @return オフスクリーンの個数\n   */\n  public getOffscreenCount(): number {\n    return this._model.offscreens.count;\n  }\n\n  /**\n   * Offscreenのカラーブレンドの取得(Cubism 5.3 以降)\n   *\n   * @param offscreenIndex Offscreenのインデックス\n   * @return Offscreenのカラーブレンド\n   */\n  public getOffscreenColorBlend(offscreenIndex: number): CubismColorBlend {\n    // キャッシュ\n    if (\n      this._offscreenColorBlends[offscreenIndex] ==\n      CubismColorBlend.ColorBlend_None\n    ) {\n      this._offscreenColorBlends[offscreenIndex] =\n        this._model.offscreens.blendModes[offscreenIndex] & 0xff;\n    }\n    return this._offscreenColorBlends[offscreenIndex];\n  }\n\n  /**\n   * Offscreenのアルファブレンドの取得(Cubism 5.3 以降)\n   *\n   * @param offscreenIndex Offscreenのインデックス\n   * @return Offscreenのアルファブレンド\n   */\n  public getOffscreenAlphaBlend(offscreenIndex: number): CubismAlphaBlend {\n    // キャッシュ\n    if (\n      this._offscreenAlphaBlends[offscreenIndex] ==\n      CubismAlphaBlend.AlphaBlend_None\n    ) {\n      this._offscreenAlphaBlends[offscreenIndex] =\n        (this._model.offscreens.blendModes[offscreenIndex] >> 8) & 0xff;\n    }\n    return this._offscreenAlphaBlends[offscreenIndex];\n  }\n\n  /**\n   * オフスクリーンのオーナーインデックス配列を取得する\n   * @return オフスクリーンのオーナーインデックス配列\n   */\n  public getOffscreenOwnerIndices(): Int32Array {\n    return this._model.offscreens.ownerIndices;\n  }\n\n  /**\n   * オフスクリーンの不透明度を取得\n   * @param offscreenIndex オフスクリーンのインデックス\n   * @return 不透明度\n   */\n  public getOffscreenOpacity(offscreenIndex: number): number {\n    if (offscreenIndex < 0 || offscreenIndex >= this._model.offscreens.count) {\n      return 1.0; // オフスクリーンが無いのでスキップ\n    }\n\n    return this._model.offscreens.opacities[offscreenIndex];\n  }\n\n  /**\n   * オフスクリーンのクリッピングマスクリストの取得\n   * @return オフスクリーンのクリッピングマスクリスト\n   */\n  public getOffscreenMasks(): Int32Array[] {\n    return this._model.offscreens.masks;\n  }\n\n  /**\n   * オフスクリーンのクリッピングマスクの個数リストの取得\n   * @return オフスクリーンのクリッピングマスクの個数リスト\n   */\n  public getOffscreenMaskCounts(): Int32Array {\n    return this._model.offscreens.maskCounts;\n  }\n\n  /**\n   * オフスクリーンのマスク反転設定を取得する\n   * @param offscreenIndex オフスクリーンのインデックス\n   * @return オフスクリーンのマスク反転設定\n   */\n  public getOffscreenInvertedMask(offscreenIndex: number): boolean {\n    const constantFlags: Uint8Array = this._model.offscreens.constantFlags;\n    // Live2DCubismCore.Utils.hasIsInvertedMaskBit を利用\n    return Live2DCubismCore.Utils.hasIsInvertedMaskBit(\n      constantFlags[offscreenIndex]\n    );\n  }\n\n  /**\n   * ブレンドモード使用判定\n   * @return ブレンドモードを使用しているか\n   */\n  public isBlendModeEnabled(): boolean {\n    return this._isBlendModeEnabled;\n  }\n\n  /**\n   * 保存されたパラメータの読み込み\n   */\n  public loadParameters(): void {\n    let parameterCount: number = this._model.parameters.count;\n    const savedParameterCount: number = this._savedParameters.getSize();\n\n    if (parameterCount > savedParameterCount) {\n      parameterCount = savedParameterCount;\n    }\n\n    for (let i = 0; i < parameterCount; ++i) {\n      this._parameterValues[i] = this._savedParameters.at(i);\n    }\n  }\n\n  /**\n   * 初期化する\n   */\n  public initialize(): void {\n    CSM_ASSERT(this._model);\n\n    this._parameterValues = this._model.parameters.values;\n    this._partOpacities = this._model.parts.opacities;\n    this._offscreenOpacities = this._model.offscreens.opacities;\n\n    this._parameterMaximumValues = this._model.parameters.maximumValues;\n    this._parameterMinimumValues = this._model.parameters.minimumValues;\n\n    {\n      const parameterIds: string[] = this._model.parameters.ids;\n      const parameterCount: number = this._model.parameters.count;\n\n      this._parameterIds.prepareCapacity(parameterCount);\n      this._userParameterRepeatDataList.prepareCapacity(parameterCount);\n      for (let i = 0; i < parameterCount; ++i) {\n        this._parameterIds.pushBack(\n          CubismFramework.getIdManager().getId(parameterIds[i])\n        );\n        this._userParameterRepeatDataList.pushBack(\n          new ParameterRepeatData(false, false)\n        );\n      }\n    }\n\n    const partCount: number = this._model.parts.count;\n    {\n      const partIds: string[] = this._model.parts.ids;\n\n      this._partIds.prepareCapacity(partCount);\n      for (let i = 0; i < partCount; ++i) {\n        this._partIds.pushBack(\n          CubismFramework.getIdManager().getId(partIds[i])\n        );\n      }\n\n      this._userPartMultiplyColors.prepareCapacity(partCount);\n      this._userPartScreenColors.prepareCapacity(partCount);\n\n      this._partChildDrawables.prepareCapacity(partCount);\n    }\n\n    {\n      const drawableIds: string[] = this._model.drawables.ids;\n      const drawableCount: number = this._model.drawables.count;\n\n      this._userDrawableMultiplyColors.prepareCapacity(drawableCount);\n      this._userDrawableScreenColors.prepareCapacity(drawableCount);\n\n      // カリング設定\n      this._userDrawableCullings.prepareCapacity(drawableCount);\n      const userCulling: CullingData = new CullingData(false, false);\n\n      // Part\n      {\n        for (let i = 0; i < partCount; ++i) {\n          const multiplyColor: CubismTextureColor = new CubismTextureColor(\n            1.0,\n            1.0,\n            1.0,\n            1.0\n          );\n          const screenColor: CubismTextureColor = new CubismTextureColor(\n            0.0,\n            0.0,\n            0.0,\n            1.0\n          );\n\n          const userMultiplyColor: PartColorData = new PartColorData(\n            false,\n            multiplyColor\n          );\n          const userScreenColor: PartColorData = new PartColorData(\n            false,\n            screenColor\n          );\n\n          this._userPartMultiplyColors.pushBack(userMultiplyColor);\n          this._userPartScreenColors.pushBack(userScreenColor);\n          this._partChildDrawables.pushBack(new csmVector<number>());\n          this._partChildDrawables.at(i).prepareCapacity(drawableCount);\n        }\n      }\n\n      // Drawables\n      {\n        for (let i = 0; i < drawableCount; ++i) {\n          const multiplyColor: CubismTextureColor = new CubismTextureColor(\n            1.0,\n            1.0,\n            1.0,\n            1.0\n          );\n          const screenColor: CubismTextureColor = new CubismTextureColor(\n            0.0,\n            0.0,\n            0.0,\n            1.0\n          );\n\n          const userMultiplyColor: ColorData = new ColorData(\n            false,\n            multiplyColor\n          );\n          const userScreenColor: ColorData = new ColorData(false, screenColor);\n\n          this._drawableIds.pushBack(\n            CubismFramework.getIdManager().getId(drawableIds[i])\n          );\n\n          this._userDrawableMultiplyColors.pushBack(userMultiplyColor);\n          this._userDrawableScreenColors.pushBack(userScreenColor);\n\n          this._userDrawableCullings.pushBack(userCulling);\n\n          const parentIndex = this.getDrawableParentPartIndex(i);\n          if (parentIndex >= 0) {\n            this._partChildDrawables.at(parentIndex).pushBack(i);\n          }\n        }\n      }\n\n      // blendMode\n      // オフスクリーンが存在するか、DrawableのブレンドモードでColorBlend、AlphaBlendを使用するのであればブレンドモードを有効にする。\n      if (this.getOffscreenCount() > 0) {\n        this._isBlendModeEnabled = true;\n      } else {\n        const blendModes = this._model.drawables.blendModes;\n        for (let i = 0; i < drawableCount; ++i) {\n          const colorBlendType = this.getDrawableColorBlend(i);\n          const alphaBlendType = this.getDrawableAlphaBlend(i);\n\n          // NormalOver、AddCompatible、MultiplyCompatible以外であればブレンドモードを有効にする。\n          if (\n            !(\n              colorBlendType == CubismColorBlend.ColorBlend_Normal &&\n              alphaBlendType == CubismAlphaBlend.AlphaBlend_Over\n            ) &&\n            colorBlendType != CubismColorBlend.ColorBlend_AddCompatible &&\n            colorBlendType != CubismColorBlend.ColorBlend_MultiplyCompatible\n          ) {\n            this._isBlendModeEnabled = true;\n            break;\n          }\n        }\n      }\n\n      // Offscreen\n      {\n        // オフスクリーンの初期化\n        const offscreenCount: number = this._model.offscreens.count;\n\n        this._userOffscreenMultiplyColors = new csmVector<ColorData>();\n        this._userOffscreenScreenColors = new csmVector<ColorData>();\n        this._userOffscreenCullings = new csmVector<CullingData>();\n\n        // 乗算色・スクリーン色・カリング・オフスクリーン情報の配列を用意\n        this._userOffscreenMultiplyColors.prepareCapacity(offscreenCount);\n        this._userOffscreenScreenColors.prepareCapacity(offscreenCount);\n        this._userOffscreenCullings.prepareCapacity(offscreenCount);\n\n        for (let i = 0; i < offscreenCount; ++i) {\n          const multiplyColor: CubismTextureColor = new CubismTextureColor(\n            1.0,\n            1.0,\n            1.0,\n            1.0\n          );\n          const screenColor: CubismTextureColor = new CubismTextureColor(\n            0.0,\n            0.0,\n            0.0,\n            1.0\n          );\n\n          // 乗算色\n          const userMultiplyColor: ColorData = new ColorData(\n            false,\n            multiplyColor\n          );\n          // スクリーン色\n          const userScreenColor: ColorData = new ColorData(false, screenColor);\n\n          this._userOffscreenMultiplyColors.pushBack(userMultiplyColor);\n          this._userOffscreenScreenColors.pushBack(userScreenColor);\n          this._userOffscreenCullings.pushBack(userCulling);\n        }\n      }\n      this.setupPartsHierarchy();\n    }\n  }\n\n  /**\n   * パーツ階層構造を取得する\n   * @return パーツ階層構造の配列\n   */\n  public getPartsHierarchy(): csmVector<CubismModelPartInfo> {\n    return this._partsHierarchy;\n  }\n\n  /**\n   * パーツ階層構造をセットアップする\n   */\n  public setupPartsHierarchy(): void {\n    this._partsHierarchy.clear();\n\n    // すべてのパーツのパーツ情報管理構造体を作成\n    const partCount = this.getPartCount();\n    for (let i = 0; i < partCount; ++i) {\n      const partInfo = new CubismModelPartInfo();\n      this._partsHierarchy.pushBack(partInfo);\n    }\n\n    // Partごとに親パーツを取得し、親パーツの子objectリストに追加する\n    for (let i = 0; i < partCount; ++i) {\n      const parentPartIndex = this.getPartParentPartIndices()[i];\n\n      if (parentPartIndex === NoParentIndex) {\n        continue;\n      }\n\n      for (\n        let partIndex = 0;\n        partIndex < this._partsHierarchy.getSize();\n        ++partIndex\n      ) {\n        if (partIndex === parentPartIndex) {\n          const objectInfo = new CubismModelObjectInfo(\n            i,\n            CubismModelObjectType.CubismModelObjectType_Parts\n          );\n          this._partsHierarchy.at(partIndex).objects.pushBack(objectInfo);\n          break;\n        }\n      }\n    }\n\n    // Drawableごとに親パーツを取得し、親パーツの子objectリストに追加する\n    const drawableCount = this.getDrawableCount();\n    for (let i = 0; i < drawableCount; ++i) {\n      const parentPartIndex = this.getDrawableParentPartIndex(i);\n\n      if (parentPartIndex === NoParentIndex) {\n        continue;\n      }\n\n      for (\n        let partIndex = 0;\n        partIndex < this._partsHierarchy.getSize();\n        ++partIndex\n      ) {\n        if (partIndex === parentPartIndex) {\n          const objectInfo = new CubismModelObjectInfo(\n            i,\n            CubismModelObjectType.CubismModelObjectType_Drawable\n          );\n          this._partsHierarchy.at(partIndex).objects.pushBack(objectInfo);\n          break;\n        }\n      }\n    }\n\n    // パーツ子描画オブジェクト情報構造体を作成していく\n    for (let i = 0; i < this._partsHierarchy.getSize(); ++i) {\n      // パーツ管理構造体を取得\n      this.getPartChildDrawObjects(i);\n    }\n  }\n\n  /**\n   * 指定したパーツの子描画オブジェクト情報を取得・構築する\n   * @param partInfoIndex パーツ情報のインデックス\n   * @return PartChildDrawObjects\n   */\n  public getPartChildDrawObjects(partInfoIndex: number): PartChildDrawObjects {\n    if (this._partsHierarchy.at(partInfoIndex).getChildObjectCount() < 1) {\n      // 子オブジェクトがない場合\n      return this._partsHierarchy.at(partInfoIndex).childDrawObjects;\n    }\n\n    const childDrawObjects =\n      this._partsHierarchy.at(partInfoIndex).childDrawObjects;\n\n    // 既にchildDrawObjectsが処理されている場合はスキップ\n    if (\n      childDrawObjects.drawableIndices.getSize() !== 0 ||\n      childDrawObjects.offscreenIndices.getSize() !== 0\n    ) {\n      return childDrawObjects;\n    }\n\n    const objects = this._partsHierarchy.at(partInfoIndex).objects;\n\n    for (let i = 0; i < objects.getSize(); ++i) {\n      const obj = objects.at(i);\n\n      if (\n        obj.objectType === CubismModelObjectType.CubismModelObjectType_Parts\n      ) {\n        // 子のパーツの場合、再帰的に子objectsを取得\n        this.getPartChildDrawObjects(obj.objectIndex);\n\n        // 子パーツの子Drawable、Offscreenを取得\n        const childToChildDrawObjects = this._partsHierarchy.at(\n          obj.objectIndex\n        ).childDrawObjects;\n\n        for (\n          let j = 0;\n          j < childToChildDrawObjects.drawableIndices.getSize();\n          ++j\n        ) {\n          childDrawObjects.drawableIndices.pushBack(\n            childToChildDrawObjects.drawableIndices.at(j)\n          );\n        }\n        for (\n          let j = 0;\n          j < childToChildDrawObjects.offscreenIndices.getSize();\n          ++j\n        ) {\n          childDrawObjects.offscreenIndices.pushBack(\n            childToChildDrawObjects.offscreenIndices.at(j)\n          );\n        }\n\n        // Offscreenの確認\n        const offscreenIndices = this.getOffscreenIndices();\n        const offscreenIndex = offscreenIndices\n          ? offscreenIndices[obj.objectIndex]\n          : NoOffscreenIndex;\n        if (offscreenIndex !== NoOffscreenIndex) {\n          childDrawObjects.offscreenIndices.pushBack(offscreenIndex);\n        }\n      } else if (\n        obj.objectType === CubismModelObjectType.CubismModelObjectType_Drawable\n      ) {\n        // Drawableの場合、パーツの子Drawableに追加\n        childDrawObjects.drawableIndices.pushBack(obj.objectIndex);\n      }\n    }\n\n    return childDrawObjects;\n  }\n\n  /**\n   * パーツのオフスクリーンインデックス配列を取得\n   * @return Int32Array offscreenIndices\n   */\n  private getOffscreenIndices(): Int32Array {\n    // _model.parts.offscreenIndices が存在する場合のみ返す\n    return this._model.parts.offscreenIndices;\n  }\n\n  /**\n   * コンストラクタ\n   * @param model モデル\n   */\n  public constructor(model: Live2DCubismCore.Model) {\n    this._model = model;\n    this._parameterValues = null;\n    this._parameterMaximumValues = null;\n    this._parameterMinimumValues = null;\n    this._partOpacities = null;\n    this._offscreenOpacities = null;\n    this._savedParameters = new csmVector<number>();\n    this._parameterIds = new csmVector<CubismIdHandle>();\n    this._drawableIds = new csmVector<CubismIdHandle>();\n    this._partIds = new csmVector<CubismIdHandle>();\n    this._isOverriddenParameterRepeat = true;\n    this._isOverriddenModelMultiplyColors = false;\n    this._isOverriddenModelScreenColors = false;\n    this._isOverriddenCullings = false;\n    this._modelOpacity = 1.0;\n\n    this._isBlendModeEnabled = false;\n    this._drawableColorBlends = null;\n    this._drawableAlphaBlends = null;\n    this._offscreenColorBlends = null;\n    this._offscreenAlphaBlends = null;\n    this._drawableMultiplyColors = null;\n    this._drawableScreenColors = null;\n    this._offscreenMultiplyColors = null;\n    this._offscreenScreenColors = null;\n\n    this._userParameterRepeatDataList = new csmVector<ParameterRepeatData>();\n    this._userDrawableMultiplyColors = new csmVector<ColorData>();\n    this._userDrawableScreenColors = new csmVector<ColorData>();\n    this._userDrawableCullings = new csmVector<CullingData>();\n    this._userPartMultiplyColors = new csmVector<ColorData>();\n    this._userPartScreenColors = new csmVector<ColorData>();\n    this._partChildDrawables = new csmVector<csmVector<number>>();\n    this._partsHierarchy = new csmVector<CubismModelPartInfo>();\n\n    this._notExistPartId = new csmMap<CubismIdHandle, number>();\n    this._notExistParameterId = new csmMap<CubismIdHandle, number>();\n    this._notExistParameterValues = new csmMap<number, number>();\n    this._notExistPartOpacities = new csmMap<number, number>();\n\n    // Drawableのカラーブレンドとアルファブレンドの初期化\n    this._drawableColorBlends = new Array<CubismColorBlend>(\n      model.drawables.count\n    ).fill(CubismColorBlend.ColorBlend_None);\n    this._drawableAlphaBlends = new Array<CubismAlphaBlend>(\n      model.drawables.count\n    ).fill(CubismAlphaBlend.AlphaBlend_None);\n\n    // Offscreenのカラーブレンドとアルファブレンドの初期化\n    this._offscreenColorBlends = new Array<CubismColorBlend>(\n      model.offscreens.count\n    ).fill(CubismColorBlend.ColorBlend_None);\n    this._offscreenAlphaBlends = new Array<CubismAlphaBlend>(\n      model.offscreens.count\n    ).fill(CubismAlphaBlend.AlphaBlend_None);\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    this._model.release();\n    this._model = null;\n\n    this._drawableColorBlends = null;\n    this._drawableAlphaBlends = null;\n    this._offscreenColorBlends = null;\n    this._offscreenAlphaBlends = null;\n\n    this._drawableMultiplyColors = null;\n    this._drawableScreenColors = null;\n    this._offscreenMultiplyColors = null;\n    this._offscreenScreenColors = null;\n  }\n\n  private _notExistPartOpacities: csmMap<number, number>; // 存在していないパーツの不透明度のリスト\n  private _notExistPartId: csmMap<CubismIdHandle, number>; // 存在していないパーツIDのリスト\n\n  private _notExistParameterValues: csmMap<number, number>; // 存在していないパラメータの値のリスト\n  private _notExistParameterId: csmMap<CubismIdHandle, number>; // 存在していないパラメータIDのリスト\n\n  private _savedParameters: csmVector<number>; // 保存されたパラメータ\n\n  /**\n   * Flag to determine whether to override model-wide parameter repeats on the SDK\n   */\n  private _isOverriddenParameterRepeat: boolean;\n\n  private _isOverriddenModelMultiplyColors: boolean; // SDK上でモデル全体の乗算色を上書きするか判定するフラグ\n  private _isOverriddenModelScreenColors: boolean; // SDK上でモデル全体のスクリーン色を上書きするか判定するフラグ\n\n  /**\n   * List to manage ParameterRepeat and Override flag to be set for each Parameter\n   */\n  private _userParameterRepeatDataList: csmVector<ParameterRepeatData>;\n\n  private _userDrawableMultiplyColors: csmVector<ColorData>; // Drawableごとに設定する乗算色と上書きフラグを管理するリスト\n  private _userDrawableScreenColors: csmVector<ColorData>; // Drawableごとに設定するスクリーン色と上書きフラグを管理するリスト\n  private _userPartScreenColors: csmVector<ColorData>; // Part 乗算色の配列\n  private _userPartMultiplyColors: csmVector<ColorData>; // Part スクリーン色の配列\n  private _userOffscreenMultiplyColors: csmVector<ColorData>; // Offscreen 乗算色の配列\n  private _userOffscreenScreenColors: csmVector<ColorData>; // Off\n  private _partChildDrawables: csmVector<csmVector<number>>; // Partの子DrawableIndexの配列\n  private _partsHierarchy: csmVector<CubismModelPartInfo>; // Partの親子構造\n\n  private _model: Live2DCubismCore.Model; // モデル\n\n  private _parameterValues: Float32Array; // パラメータの値のリスト\n  private _parameterMaximumValues: Float32Array; // パラメータの最大値のリスト\n  private _parameterMinimumValues: Float32Array; // パラメータの最小値のリスト\n\n  private _partOpacities: Float32Array; // パーツの不透明度のリスト\n  private _offscreenOpacities: Float32Array; // オフスクリーンの不透明度のリスト\n\n  private _modelOpacity: number; // モデルの不透明度\n\n  private _parameterIds: csmVector<CubismIdHandle>;\n  private _partIds: csmVector<CubismIdHandle>;\n  private _drawableIds: csmVector<CubismIdHandle>;\n\n  private _isOverriddenCullings: boolean; // モデルのカリング設定をすべて上書きするか？\n  private _userDrawableCullings: csmVector<CullingData>; // カリング設定の配列\n  private _userOffscreenCullings: csmVector<CullingData>; // オフスクリーンのカリング設定を使用するか？\n\n  private _isBlendModeEnabled: boolean; // ブレンドモードを使用しているか\n\n  private _drawableColorBlends: CubismColorBlend[]; // Drawableのカラーブレンドの配列\n  private _drawableAlphaBlends: CubismAlphaBlend[]; // Drawableのアルファブレンドの配列\n  private _offscreenColorBlends: CubismColorBlend[]; // Offscreen のカラーブレンドの配列\n  private _offscreenAlphaBlends: CubismAlphaBlend[]; // Offscreen のアルファブレンドの配列\n\n  private _drawableMultiplyColors: CubismTextureColor[]; // Drawableの乗算色の配列\n  private _drawableScreenColors: CubismTextureColor[]; // Drawableのスクリーン色の配列\n  private _offscreenMultiplyColors: CubismTextureColor[]; // Offscreenの乗算色の配列\n  private _offscreenScreenColors: CubismTextureColor[]; // Offscreenのスクリーン色の配列\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodel';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismModel = $.CubismModel;\n  export type CubismModel = $.CubismModel;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { Constant } from '../live2dcubismframework';\nimport { csmVector } from '../type/csmvector';\nimport { csmRect } from '../type/csmrectf';\nimport { CubismMatrix44 } from '../math/cubismmatrix44';\nimport { CubismModel } from '../model/cubismmodel';\nimport { CubismClippingContext, CubismTextureColor } from './cubismrenderer';\nimport { CubismLogError, CubismLogWarning } from '../utils/cubismdebug';\n\nconst ColorChannelCount = 4; // 実験時に1チャンネルの場合は1、RGBだけの場合は3、アルファも含める場合は4\nconst ClippingMaskMaxCountOnDefault = 36; // 通常のフレームバッファ一枚あたりのマスク最大数\nconst ClippingMaskMaxCountOnMultiRenderTexture = 32; // フレームバッファが2枚以上ある場合のフレームバッファ一枚あたりのマスク最大数\n\nexport type ClippingContextConstructor<\n  T_ClippingContext extends CubismClippingContext\n> = new (\n  manager: CubismClippingManager<T_ClippingContext>,\n  drawableMasks: Int32Array,\n  drawableMaskCounts: number\n) => T_ClippingContext;\n\nexport interface ICubismClippingManager {\n  getClippingMaskBufferSize(): number;\n}\n\nexport abstract class CubismClippingManager<\n  T_ClippingContext extends CubismClippingContext\n> implements ICubismClippingManager\n{\n  /**\n   * コンストラクタ\n   */\n  public constructor(\n    clippingContextFactory: ClippingContextConstructor<T_ClippingContext>\n  ) {\n    this._renderTextureCount = 0;\n    this._clippingMaskBufferSize = 256;\n    this._clippingContextListForMask = new csmVector<T_ClippingContext>();\n    this._clippingContextListForDraw = new csmVector<T_ClippingContext>();\n    this._clippingContextListForOffscreen = new csmVector<T_ClippingContext>();\n    this._channelColors = new csmVector<CubismTextureColor>();\n    this._tmpBoundsOnModel = new csmRect();\n    this._tmpMatrix = new CubismMatrix44();\n    this._tmpMatrixForMask = new CubismMatrix44();\n    this._tmpMatrixForDraw = new CubismMatrix44();\n    this._clearedMaskBufferFlags = new csmVector<boolean>();\n\n    this._clippingContexttConstructor = clippingContextFactory;\n\n    let tmp: CubismTextureColor = new CubismTextureColor();\n    tmp.r = 1.0;\n    tmp.g = 0.0;\n    tmp.b = 0.0;\n    tmp.a = 0.0;\n    this._channelColors.pushBack(tmp);\n\n    tmp = new CubismTextureColor();\n    tmp.r = 0.0;\n    tmp.g = 1.0;\n    tmp.b = 0.0;\n    tmp.a = 0.0;\n    this._channelColors.pushBack(tmp);\n\n    tmp = new CubismTextureColor();\n    tmp.r = 0.0;\n    tmp.g = 0.0;\n    tmp.b = 1.0;\n    tmp.a = 0.0;\n    this._channelColors.pushBack(tmp);\n\n    tmp = new CubismTextureColor();\n    tmp.r = 0.0;\n    tmp.g = 0.0;\n    tmp.b = 0.0;\n    tmp.a = 1.0;\n    this._channelColors.pushBack(tmp);\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    for (let i = 0; i < this._clippingContextListForMask.getSize(); i++) {\n      if (this._clippingContextListForMask.at(i)) {\n        this._clippingContextListForMask.at(i).release();\n        this._clippingContextListForMask.set(i, void 0);\n      }\n      this._clippingContextListForMask.set(i, null);\n    }\n    this._clippingContextListForMask = null;\n\n    // _clippingContextListForDrawは_clippingContextListForMaskにあるインスタンスを指している。上記の処理により要素ごとのDELETEは不要。\n    for (let i = 0; i < this._clippingContextListForDraw.getSize(); i++) {\n      this._clippingContextListForDraw.set(i, null);\n    }\n    this._clippingContextListForDraw = null;\n\n    for (let i = 0; i < this._channelColors.getSize(); i++) {\n      this._channelColors.set(i, null);\n    }\n\n    this._channelColors = null;\n\n    if (this._clearedMaskBufferFlags != null) {\n      this._clearedMaskBufferFlags.clear();\n    }\n    this._clearedMaskBufferFlags = null;\n  }\n\n  /**\n   * マネージャの初期化処理\n   * クリッピングマスクを使う描画オブジェクトの登録を行う\n   * @param model モデルのインスタンス\n   * @param renderTextureCount バッファの生成数\n   */\n  public initializeForDrawable(\n    model: CubismModel,\n    renderTextureCount: number\n  ): void {\n    // レンダーテクスチャの合計枚数の設定\n    // 1以上の整数でない場合はそれぞれ警告を出す\n    if (renderTextureCount % 1 != 0) {\n      CubismLogWarning(\n        'The number of render textures must be specified as an integer. The decimal point is rounded down and corrected to an integer.'\n      );\n      // 小数点以下を除去\n      renderTextureCount = ~~renderTextureCount;\n    }\n    if (renderTextureCount < 1) {\n      CubismLogWarning(\n        'The number of render textures must be an integer greater than or equal to 1. Set the number of render textures to 1.'\n      );\n    }\n    // 負の値が使われている場合は強制的に1枚と設定する\n    this._renderTextureCount = renderTextureCount < 1 ? 1 : renderTextureCount;\n\n    this._clearedMaskBufferFlags = new csmVector<boolean>(\n      this._renderTextureCount\n    );\n\n    // クリッピングマスクを使う描画オブジェクトをすべて登録する\n    // クリッピングマスクは、通常数個程度に限定して使うものとする\n    for (let i = 0; i < model.getDrawableCount(); i++) {\n      if (model.getDrawableMaskCounts()[i] <= 0) {\n        // クリッピングマスクが使用されていないアートメッシュ（多くの場合使用しない）\n        this._clippingContextListForDraw.pushBack(null);\n        continue;\n      }\n\n      // 既にあるClipContextと同じかチェックする\n      let clippingContext: T_ClippingContext = this.findSameClip(\n        model.getDrawableMasks()[i],\n        model.getDrawableMaskCounts()[i]\n      );\n      if (clippingContext == null) {\n        // 同一のマスクが存在していない場合は生成する\n\n        clippingContext = new this._clippingContexttConstructor(\n          this,\n          model.getDrawableMasks()[i],\n          model.getDrawableMaskCounts()[i]\n        );\n        this._clippingContextListForMask.pushBack(clippingContext);\n      }\n\n      clippingContext.addClippedDrawable(i);\n\n      this._clippingContextListForDraw.pushBack(clippingContext);\n    }\n  }\n\n  /**\n   * オフスクリーン用の初期化処理\n   *\n   * @param model モデルのインスタンス\n   * @param maskBufferCount オフスクリーン用のマスクバッファの数\n   */\n  public initializeForOffscreen(\n    model: CubismModel,\n    maskBufferCount: number\n  ): void {\n    this._renderTextureCount = maskBufferCount;\n\n    // レンダーテクスチャのクリアフラグの設定\n    for (let i = 0; i < this._renderTextureCount; ++i) {\n      this._clearedMaskBufferFlags.pushBack(false);\n    }\n\n    //クリッピングマスクを使う描画オブジェクトを全て登録する\n    //クリッピングマスクは、通常数個程度に限定して使うものとする\n    for (let i = 0; i < model.getOffscreenCount(); ++i) {\n      if (model.getOffscreenMaskCounts()[i] <= 0) {\n        //クリッピングマスクが使用されていないオフスクリーン（多くの場合使用しない）\n        this._clippingContextListForOffscreen.pushBack(null);\n        continue;\n      }\n\n      // 既にあるClipContextと同じかチェックする\n      let cc = this.findSameClip(\n        model.getOffscreenMasks()[i],\n        model.getOffscreenMaskCounts()[i]\n      );\n      if (cc == null) {\n        // 同一のマスクが存在していない場合は生成する\n        cc = new this._clippingContexttConstructor(\n          this,\n          model.getOffscreenMasks()[i],\n          model.getOffscreenMaskCounts()[i]\n        );\n        this._clippingContextListForMask.pushBack(cc);\n      }\n\n      cc.addClippedOffscreen(i);\n\n      this._clippingContextListForOffscreen.pushBack(cc);\n    }\n  }\n\n  /**\n   * 既にマスクを作っているかを確認\n   * 作っている様であれば該当するクリッピングマスクのインスタンスを返す\n   * 作っていなければNULLを返す\n   * @param drawableMasks 描画オブジェクトをマスクする描画オブジェクトのリスト\n   * @param drawableMaskCounts 描画オブジェクトをマスクする描画オブジェクトの数\n   * @return 該当するクリッピングマスクが存在すればインスタンスを返し、なければNULLを返す\n   */\n  public findSameClip(\n    drawableMasks: Int32Array,\n    drawableMaskCounts: number\n  ): T_ClippingContext {\n    // 作成済みClippingContextと一致するか確認\n    for (let i = 0; i < this._clippingContextListForMask.getSize(); i++) {\n      const clippingContext: T_ClippingContext =\n        this._clippingContextListForMask.at(i);\n      const count: number = clippingContext._clippingIdCount;\n\n      // 個数が違う場合は別物\n      if (count != drawableMaskCounts) {\n        continue;\n      }\n\n      let sameCount = 0;\n\n      // 同じIDを持つか確認。配列の数が同じなので、一致した個数が同じなら同じ物を持つとする\n      for (let j = 0; j < count; j++) {\n        const clipId: number = clippingContext._clippingIdList[j];\n\n        for (let k = 0; k < count; k++) {\n          if (drawableMasks[k] == clipId) {\n            sameCount++;\n            break;\n          }\n        }\n      }\n\n      if (sameCount == count) {\n        return clippingContext;\n      }\n    }\n\n    return null; // 見つからなかった\n  }\n\n  /**\n   * 高精細マスク処理用の行列を計算する\n   * @param model モデルのインスタンス\n   * @param isRightHanded 処理が右手系であるか\n   */\n  public setupMatrixForHighPrecision(\n    model: CubismModel,\n    isRightHanded: boolean\n  ): void {\n    // 全てのクリッピングを用意する\n    // 同じクリップ（複数の場合はまとめて一つのクリップ）を使う場合は1度だけ設定する\n    let usingClipCount = 0;\n    for (\n      let clipIndex = 0;\n      clipIndex < this._clippingContextListForMask.getSize();\n      clipIndex++\n    ) {\n      // １つのクリッピングマスクに関して\n      const cc: T_ClippingContext =\n        this._clippingContextListForMask.at(clipIndex);\n\n      // このクリップを利用する描画オブジェクト群全体を囲む矩形を計算\n      this.calcClippedDrawableTotalBounds(model, cc);\n\n      if (cc._isUsing) {\n        usingClipCount++; // 使用中としてカウント\n      }\n    }\n\n    // マスク行列作成処理\n    if (usingClipCount > 0) {\n      this.setupLayoutBounds(0);\n\n      // サイズがレンダーテクスチャの枚数と合わない場合は合わせる\n      if (this._clearedMaskBufferFlags.getSize() != this._renderTextureCount) {\n        this._clearedMaskBufferFlags.clear();\n        for (let i = 0; i < this._renderTextureCount; i++) {\n          this._clearedMaskBufferFlags.pushBack(false);\n        }\n      } else {\n        // マスクのクリアフラグを毎フレーム開始時に初期化\n        for (let i = 0; i < this._renderTextureCount; i++) {\n          this._clearedMaskBufferFlags.set(i, false);\n        }\n      }\n\n      // 実際にマスクを生成する\n      // 全てのマスクをどの様にレイアウトして描くかを決定し、ClipContext , ClippedDrawContext に記憶する\n      for (\n        let clipIndex = 0;\n        clipIndex < this._clippingContextListForMask.getSize();\n        clipIndex++\n      ) {\n        // --- 実際に１つのマスクを描く ---\n        const clipContext: T_ClippingContext =\n          this._clippingContextListForMask.at(clipIndex);\n        const allClippedDrawRect: csmRect = clipContext._allClippedDrawRect; //このマスクを使う、全ての描画オブジェクトの論理座標上の囲み矩形\n        const layoutBoundsOnTex01 = clipContext._layoutBounds; //この中にマスクを収める\n        const margin = 0.05;\n        let scaleX = 0.0;\n        let scaleY = 0.0;\n        const ppu: number = model.getPixelsPerUnit();\n        const maskPixelSize: number = clipContext\n          .getClippingManager()\n          .getClippingMaskBufferSize();\n        const physicalMaskWidth: number =\n          layoutBoundsOnTex01.width * maskPixelSize;\n        const physicalMaskHeight: number =\n          layoutBoundsOnTex01.height * maskPixelSize;\n\n        this._tmpBoundsOnModel.setRect(allClippedDrawRect);\n        if (this._tmpBoundsOnModel.width * ppu > physicalMaskWidth) {\n          this._tmpBoundsOnModel.expand(allClippedDrawRect.width * margin, 0.0);\n          scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\n        } else {\n          scaleX = ppu / physicalMaskWidth;\n        }\n\n        if (this._tmpBoundsOnModel.height * ppu > physicalMaskHeight) {\n          this._tmpBoundsOnModel.expand(\n            0.0,\n            allClippedDrawRect.height * margin\n          );\n          scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\n        } else {\n          scaleY = ppu / physicalMaskHeight;\n        }\n\n        // マスク生成時に使う行列を求める\n        this.createMatrixForMask(\n          isRightHanded,\n          layoutBoundsOnTex01,\n          scaleX,\n          scaleY\n        );\n\n        clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\n        clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\n      }\n    }\n  }\n\n  /**\n   * オフスクリーンの高精細マスク処理用の行列を計算する\n   *\n   * @param model モデルのインスタンス\n   * @param isRightHanded 処理が右手系であるか\n   * @param mvp モデルビュー投影行列\n   */\n  public setupMatrixForOffscreenHighPrecision(\n    model: CubismModel,\n    isRightHanded: boolean,\n    mvp: CubismMatrix44\n  ): void {\n    // 全てのクリッピングを用意する\n    // 同じクリップ（複数の場合はまとめて１つのクリップ）を使う場合は１度だけ設定する\n    let usingClipCount = 0;\n    for (\n      let clipIndex = 0;\n      clipIndex < this._clippingContextListForMask.getSize();\n      clipIndex++\n    ) {\n      // １つのクリッピングマスクに関して\n      const cc: T_ClippingContext =\n        this._clippingContextListForMask.at(clipIndex);\n\n      // このクリップを利用する描画オブジェクト群全体を囲む矩形を計算\n      this.calcClippedOffscreenTotalBounds(model, cc);\n\n      if (cc._isUsing) {\n        usingClipCount++; //使用中としてカウント\n      }\n    }\n\n    if (usingClipCount <= 0) {\n      return;\n    }\n    // マスク行列作成処理\n    this.setupLayoutBounds(0);\n\n    // サイズがレンダーテクスチャの枚数と合わない場合は合わせる\n    if (this._clearedMaskBufferFlags.getSize() != this._renderTextureCount) {\n      this._clearedMaskBufferFlags.clear();\n\n      for (let i = 0; i < this._renderTextureCount; ++i) {\n        this._clearedMaskBufferFlags.pushBack(false);\n      }\n    } else {\n      // マスクのクリアフラグを毎フレーム開始時に初期化\n      for (let i = 0; i < this._renderTextureCount; ++i) {\n        this._clearedMaskBufferFlags.set(i, false);\n      }\n    }\n\n    // 実際にマスクを生成する\n    // 全てのマスクをどの様にレイアウトして描くかを決定し、ClipContext , ClippedDrawContext に記憶する\n    for (\n      let clipIndex = 0;\n      clipIndex < this._clippingContextListForMask.getSize();\n      clipIndex++\n    ) {\n      // --- 実際に１つのマスクを描く ---\n      const clipContext = this._clippingContextListForMask.at(clipIndex);\n      const allClippedDrawRect = clipContext._allClippedDrawRect; //このマスクを使う、全ての描画オブジェクトの論理座標上の囲み矩形\n      const layoutBoundsOnTex01 = clipContext._layoutBounds; //この中にマスクを収める\n      const margin = 0.05;\n      let scaleX = 0.0;\n      let scaleY = 0.0;\n      const ppu = model.getPixelsPerUnit();\n      const maskPixel = clipContext\n        .getClippingManager()\n        .getClippingMaskBufferSize();\n      const physicalMaskWidth = layoutBoundsOnTex01.width * maskPixel;\n      const physicalMaskHeight = layoutBoundsOnTex01.height * maskPixel;\n\n      this._tmpBoundsOnModel.setRect(allClippedDrawRect);\n      if (this._tmpBoundsOnModel.width * ppu > physicalMaskWidth) {\n        this._tmpBoundsOnModel.expand(allClippedDrawRect.width * margin, 0.0);\n        scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\n      } else {\n        scaleX = ppu / physicalMaskWidth;\n      }\n\n      if (this._tmpBoundsOnModel.height * ppu > physicalMaskHeight) {\n        this._tmpBoundsOnModel.expand(0.0, allClippedDrawRect.height * margin);\n        scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\n      } else {\n        scaleY = ppu / physicalMaskHeight;\n      }\n\n      // マスク生成時に使う行列を求める\n      this.createMatrixForMask(\n        isRightHanded,\n        layoutBoundsOnTex01,\n        scaleX,\n        scaleY\n      );\n\n      clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\n      clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\n\n      // clipContext * mvp^-1\n      const invertMvp = mvp.getInvert();\n      clipContext._matrixForDraw.multiplyByMatrix(invertMvp);\n    }\n  }\n\n  /**\n   * マスクを使う描画オブジェクトの全体の矩形を計算する。\n   *\n   * @param model モデルのインスタンス\n   * @param clippingContext クリッピングコンテキスト\n   */\n  public calcClippedOffscreenTotalBounds(\n    model: CubismModel,\n    clippingContext: T_ClippingContext\n  ): void {\n    // 被クリッピングマスク（マスクされる描画オブジェクト）の全体の矩形\n    let clippedDrawTotalMinX = Number.MAX_VALUE,\n      clippedDrawTotalMinY = Number.MAX_VALUE;\n    let clippedDrawTotalMaxX = -Number.MAX_VALUE,\n      clippedDrawTotalMaxY = -Number.MAX_VALUE;\n\n    // このマスクが実際に必要か判定する\n    // このクリッピングを利用する「描画オブジェクト」がひとつでも使用可能であればマスクを生成する必要がある\n    const clippedOffscreenCount =\n      clippingContext._clippedOffscreenIndexList.length;\n\n    const clippedOffscreenChildDrawableIndexList = new csmVector<number>();\n    for (\n      let clippedOffscreenIndex = 0;\n      clippedOffscreenIndex < clippedOffscreenCount;\n      clippedOffscreenIndex++\n    ) {\n      // マスクを使用する描画オブジェクトの描画される矩形を求める\n      const offscreenIndex =\n        clippingContext._clippedOffscreenIndexList[clippedOffscreenIndex];\n\n      this.getOffscreenChildDrawableIndexList(\n        model,\n        offscreenIndex,\n        clippedOffscreenChildDrawableIndexList\n      );\n    }\n\n    const childDrawableCount = clippedOffscreenChildDrawableIndexList.getSize();\n    for (\n      let childDrawableIndex = 0;\n      childDrawableIndex < childDrawableCount;\n      childDrawableIndex++\n    ) {\n      const drawableVertexCount = model.getDrawableVertexCount(\n        clippedOffscreenChildDrawableIndexList.at(childDrawableIndex)\n      );\n      const drawableVertexes = model.getDrawableVertices(\n        clippedOffscreenChildDrawableIndexList.at(childDrawableIndex)\n      );\n\n      let minX = Number.MAX_VALUE,\n        minY = Number.MAX_VALUE;\n      let maxX = -Number.MAX_VALUE,\n        maxY = -Number.MAX_VALUE;\n\n      const loop = drawableVertexCount * Constant.vertexStep;\n      for (\n        let pi = Constant.vertexOffset;\n        pi < loop;\n        pi += Constant.vertexStep\n      ) {\n        const x = drawableVertexes[pi];\n        const y = drawableVertexes[pi + 1];\n        if (x < minX) minX = x;\n        if (x > maxX) maxX = x;\n        if (y < minY) minY = y;\n        if (y > maxY) maxY = y;\n      }\n\n      if (minX == Number.MAX_VALUE) continue; //有効な点がひとつも取れなかったのでスキップする\n\n      // 全体の矩形に反映\n      if (minX < clippedDrawTotalMinX) clippedDrawTotalMinX = minX;\n      if (minY < clippedDrawTotalMinY) clippedDrawTotalMinY = minY;\n      if (maxX > clippedDrawTotalMaxX) clippedDrawTotalMaxX = maxX;\n      if (maxY > clippedDrawTotalMaxY) clippedDrawTotalMaxY = maxY;\n    }\n\n    if (clippedDrawTotalMinX == Number.MAX_VALUE) {\n      clippingContext._allClippedDrawRect.x = 0.0;\n      clippingContext._allClippedDrawRect.y = 0.0;\n      clippingContext._allClippedDrawRect.width = 0.0;\n      clippingContext._allClippedDrawRect.height = 0.0;\n      clippingContext._isUsing = false;\n    } else {\n      clippingContext._isUsing = true;\n      const w = clippedDrawTotalMaxX - clippedDrawTotalMinX;\n      const h = clippedDrawTotalMaxY - clippedDrawTotalMinY;\n      clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;\n      clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;\n      clippingContext._allClippedDrawRect.width = w;\n      clippingContext._allClippedDrawRect.height = h;\n    }\n  }\n\n  /**\n   * マスクを使う描画オブジェクトの全体の矩形を計算する。\n   *\n   * @param model モデルのインスタンス\n   * @param offscreenIndex オフスクリーンのインデックス\n   * @param childDrawableIndexList オフスクリーンの子Drawableのインデックスリスト\n   */\n  public getOffscreenChildDrawableIndexList(\n    model: CubismModel,\n    offscreenIndex: number,\n    childDrawableIndexList: csmVector<number>\n  ): void {\n    // 親オブジェクトを取得\n    const ownerIndex = model.getOffscreenOwnerIndices()[offscreenIndex];\n\n    // パーツのみ\n    this.getPartChildDrawableIndexList(\n      model,\n      ownerIndex,\n      childDrawableIndexList\n    );\n  }\n\n  /**\n   * パーツの子Drawableのインデックスリストを取得する。\n   *\n   * @param model モデルのインスタンス\n   * @param partIndex パーツのインデックス\n   * @param childDrawableIndexList パーツの子Drawableのインデックスリスト\n   */\n  public getPartChildDrawableIndexList(\n    model: CubismModel,\n    partIndex: number,\n    childDrawableIndexList: csmVector<number>\n  ): void {\n    const childDrawObjects = model\n      .getPartsHierarchy()\n      .at(partIndex).childDrawObjects;\n    for (let i = 0; i < childDrawObjects.drawableIndices.getSize(); ++i) {\n      childDrawableIndexList.pushBack(childDrawObjects.drawableIndices.at(i));\n    }\n\n    for (let i = 0; i < childDrawObjects.offscreenIndices.getSize(); ++i) {\n      this.getOffscreenChildDrawableIndexList(\n        model,\n        childDrawObjects.offscreenIndices.at(i),\n        childDrawableIndexList\n      );\n    }\n  }\n\n  /**\n   * マスク作成・描画用の行列を作成する。\n   * @param isRightHanded 座標を右手系として扱うかを指定\n   * @param layoutBoundsOnTex01 マスクを収める領域\n   * @param scaleX 描画オブジェクトの伸縮率\n   * @param scaleY 描画オブジェクトの伸縮率\n   */\n  public createMatrixForMask(\n    isRightHanded: boolean,\n    layoutBoundsOnTex01: csmRect,\n    scaleX: number,\n    scaleY: number\n  ): void {\n    this._tmpMatrix.loadIdentity();\n    {\n      // Layout0..1 を -1..1に変換\n      this._tmpMatrix.translateRelative(-1.0, -1.0);\n      this._tmpMatrix.scaleRelative(2.0, 2.0);\n    }\n    {\n      // view to Layout0..1\n      this._tmpMatrix.translateRelative(\n        layoutBoundsOnTex01.x,\n        layoutBoundsOnTex01.y\n      ); //new = [translate]\n      this._tmpMatrix.scaleRelative(scaleX, scaleY); //new = [translate][scale]\n      this._tmpMatrix.translateRelative(\n        -this._tmpBoundsOnModel.x,\n        -this._tmpBoundsOnModel.y\n      ); //new = [translate][scale][translate]\n    }\n    // tmpMatrixForMask が計算結果\n    this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());\n\n    this._tmpMatrix.loadIdentity();\n    {\n      this._tmpMatrix.translateRelative(\n        layoutBoundsOnTex01.x,\n        layoutBoundsOnTex01.y * (isRightHanded ? -1.0 : 1.0)\n      ); //new = [translate]\n      this._tmpMatrix.scaleRelative(\n        scaleX,\n        scaleY * (isRightHanded ? -1.0 : 1.0)\n      ); //new = [translate][scale]\n      this._tmpMatrix.translateRelative(\n        -this._tmpBoundsOnModel.x,\n        -this._tmpBoundsOnModel.y\n      ); //new = [translate][scale][translate]\n    }\n\n    this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());\n  }\n\n  /**\n   * クリッピングコンテキストを配置するレイアウト\n   * 指定された数のレンダーテクスチャを極力いっぱいに使ってマスクをレイアウトする\n   * マスクグループの数が4以下ならRGBA各チャンネルに一つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する。\n   *\n   * @param usingClipCount 配置するクリッピングコンテキストの数\n   */\n  public setupLayoutBounds(usingClipCount: number): void {\n    const useClippingMaskMaxCount =\n      this._renderTextureCount <= 1\n        ? ClippingMaskMaxCountOnDefault\n        : ClippingMaskMaxCountOnMultiRenderTexture * this._renderTextureCount;\n\n    if (usingClipCount <= 0 || usingClipCount > useClippingMaskMaxCount) {\n      if (usingClipCount > useClippingMaskMaxCount) {\n        // マスクの制限数の警告を出す\n        CubismLogError(\n          'not supported mask count : {0}\\n[Details] render texture count : {1}, mask count : {2}',\n          usingClipCount - useClippingMaskMaxCount,\n          this._renderTextureCount,\n          usingClipCount\n        );\n      }\n      // この場合は一つのマスクターゲットを毎回クリアして使用する\n      for (\n        let index = 0;\n        index < this._clippingContextListForMask.getSize();\n        index++\n      ) {\n        const clipContext: T_ClippingContext =\n          this._clippingContextListForMask.at(index);\n        clipContext._layoutChannelIndex = 0; // どうせ毎回消すので固定\n        clipContext._layoutBounds.x = 0.0;\n        clipContext._layoutBounds.y = 0.0;\n        clipContext._layoutBounds.width = 1.0;\n        clipContext._layoutBounds.height = 1.0;\n        clipContext._bufferIndex = 0;\n      }\n      return;\n    }\n\n    // レンダーテクスチャが1枚なら9分割する（最大36枚）\n    const layoutCountMaxValue = this._renderTextureCount <= 1 ? 9 : 8;\n\n    // 指定された数のレンダーテクスチャを極力いっぱいに使ってマスクをレイアウトする（デフォルトなら1）。\n    // マスクグループの数が4以下ならRGBA各チャンネルに1つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する。\n    let countPerSheetDiv: number = usingClipCount / this._renderTextureCount; // レンダーテクスチャ1枚あたり何枚割り当てるか。\n    const reduceLayoutTextureCount: number =\n      usingClipCount % this._renderTextureCount; // レイアウトの数を1枚減らすレンダーテクスチャの数（この数だけのレンダーテクスチャが対象）。\n\n    // 1枚に割り当てるマスクの分割数を取りたいため、小数点は切り上げる\n    countPerSheetDiv = Math.ceil(countPerSheetDiv);\n\n    // RGBAを順番に使っていく\n    let divCount: number = countPerSheetDiv / ColorChannelCount; // 1チャンネルに配置する基本のマスク\n    const modCount: number = countPerSheetDiv % ColorChannelCount; // 余り、この番号のチャンネルまでに一つずつ配分する（インデックスではない）\n\n    // 小数点は切り捨てる\n    divCount = ~~divCount;\n\n    // RGBAそれぞれのチャンネルを用意していく（0:R, 1:G, 2:B, 3:A）\n    let curClipIndex = 0; // 順番に設定していく\n\n    for (\n      let renderTextureIndex = 0;\n      renderTextureIndex < this._renderTextureCount;\n      renderTextureIndex++\n    ) {\n      for (\n        let channelIndex = 0;\n        channelIndex < ColorChannelCount;\n        channelIndex++\n      ) {\n        // このチャンネルにレイアウトする数\n        // NOTE: レイアウト数 = 1チャンネルに配置する基本のマスク + 余りのマスクを置くチャンネルなら1つ追加\n        let layoutCount: number = divCount + (channelIndex < modCount ? 1 : 0);\n\n        // レイアウトの数を1枚減らす場合にそれを行うチャンネルを決定\n        // divが0の時は正常なインデックスの範囲内になるように調整\n        const checkChannelIndex = modCount + (divCount < 1 ? -1 : 0);\n\n        // 今回が対象のチャンネルかつ、レイアウトの数を1枚減らすレンダーテクスチャが存在する場合\n        if (channelIndex == checkChannelIndex && reduceLayoutTextureCount > 0) {\n          // 現在のレンダーテクスチャが、対象のレンダーテクスチャであればレイアウトの数を1枚減らす。\n          layoutCount -= !(renderTextureIndex < reduceLayoutTextureCount)\n            ? 1\n            : 0;\n        }\n\n        // 分割方法を決定する\n        if (layoutCount == 0) {\n          // 何もしない\n        } else if (layoutCount == 1) {\n          // 全てをそのまま使う\n          const clipContext: T_ClippingContext =\n            this._clippingContextListForMask.at(curClipIndex++);\n          clipContext._layoutChannelIndex = channelIndex;\n          clipContext._layoutBounds.x = 0.0;\n          clipContext._layoutBounds.y = 0.0;\n          clipContext._layoutBounds.width = 1.0;\n          clipContext._layoutBounds.height = 1.0;\n          clipContext._bufferIndex = renderTextureIndex;\n        } else if (layoutCount == 2) {\n          for (let i = 0; i < layoutCount; i++) {\n            let xpos: number = i % 2;\n\n            // 小数点は切り捨てる\n            xpos = ~~xpos;\n\n            const cc: T_ClippingContext = this._clippingContextListForMask.at(\n              curClipIndex++\n            );\n            cc._layoutChannelIndex = channelIndex;\n\n            // UVを2つに分解して使う\n            cc._layoutBounds.x = xpos * 0.5;\n            cc._layoutBounds.y = 0.0;\n            cc._layoutBounds.width = 0.5;\n            cc._layoutBounds.height = 1.0;\n            cc._bufferIndex = renderTextureIndex;\n          }\n        } else if (layoutCount <= 4) {\n          // 4分割して使う\n          for (let i = 0; i < layoutCount; i++) {\n            let xpos: number = i % 2;\n            let ypos: number = i / 2;\n\n            // 小数点は切り捨てる\n            xpos = ~~xpos;\n            ypos = ~~ypos;\n\n            const cc = this._clippingContextListForMask.at(curClipIndex++);\n            cc._layoutChannelIndex = channelIndex;\n\n            cc._layoutBounds.x = xpos * 0.5;\n            cc._layoutBounds.y = ypos * 0.5;\n            cc._layoutBounds.width = 0.5;\n            cc._layoutBounds.height = 0.5;\n            cc._bufferIndex = renderTextureIndex;\n          }\n        } else if (layoutCount <= layoutCountMaxValue) {\n          // 9分割して使う\n          for (let i = 0; i < layoutCount; i++) {\n            let xpos = i % 3;\n            let ypos = i / 3;\n\n            // 小数点は切り捨てる\n            xpos = ~~xpos;\n            ypos = ~~ypos;\n\n            const cc: T_ClippingContext = this._clippingContextListForMask.at(\n              curClipIndex++\n            );\n            cc._layoutChannelIndex = channelIndex;\n\n            cc._layoutBounds.x = xpos / 3.0;\n            cc._layoutBounds.y = ypos / 3.0;\n            cc._layoutBounds.width = 1.0 / 3.0;\n            cc._layoutBounds.height = 1.0 / 3.0;\n            cc._bufferIndex = renderTextureIndex;\n          }\n        } else {\n          // マスクの制限枚数を超えた場合の処理\n          CubismLogError(\n            'not supported mask count : {0}\\n[Details] render texture count : {1}, mask count : {2}',\n            usingClipCount - useClippingMaskMaxCount,\n            this._renderTextureCount,\n            usingClipCount\n          );\n\n          // SetupShaderProgramでオーバーアクセスが発生するので仮で数値を入れる\n          // もちろん描画結果は正しいものではなくなる\n          for (let index = 0; index < layoutCount; index++) {\n            const cc: T_ClippingContext = this._clippingContextListForMask.at(\n              curClipIndex++\n            );\n\n            cc._layoutChannelIndex = 0;\n\n            cc._layoutBounds.x = 0.0;\n            cc._layoutBounds.y = 0.0;\n            cc._layoutBounds.width = 1.0;\n            cc._layoutBounds.height = 1.0;\n            cc._bufferIndex = 0;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * マスクされる描画オブジェクト群全体を囲む矩形（モデル座標系）を計算する\n   * @param model モデルのインスタンス\n   * @param clippingContext クリッピングマスクのコンテキスト\n   */\n  public calcClippedDrawableTotalBounds(\n    model: CubismModel,\n    clippingContext: T_ClippingContext\n  ): void {\n    // 被クリッピングマスク（マスクされる描画オブジェクト）の全体の矩形\n    let clippedDrawTotalMinX: number = Number.MAX_VALUE;\n    let clippedDrawTotalMinY: number = Number.MAX_VALUE;\n    let clippedDrawTotalMaxX: number = Number.MIN_VALUE;\n    let clippedDrawTotalMaxY: number = Number.MIN_VALUE;\n\n    // このマスクが実際に必要か判定する\n    // このクリッピングを利用する「描画オブジェクト」がひとつでも使用可能であればマスクを生成する必要がある\n    const clippedDrawCount: number =\n      clippingContext._clippedDrawableIndexList.length;\n\n    for (\n      let clippedDrawableIndex = 0;\n      clippedDrawableIndex < clippedDrawCount;\n      clippedDrawableIndex++\n    ) {\n      // マスクを使用する描画オブジェクトの描画される矩形を求める\n      const drawableIndex: number =\n        clippingContext._clippedDrawableIndexList[clippedDrawableIndex];\n\n      const drawableVertexCount: number =\n        model.getDrawableVertexCount(drawableIndex);\n      const drawableVertexes: Float32Array =\n        model.getDrawableVertices(drawableIndex);\n\n      let minX: number = Number.MAX_VALUE;\n      let minY: number = Number.MAX_VALUE;\n      let maxX: number = -Number.MAX_VALUE;\n      let maxY: number = -Number.MAX_VALUE;\n\n      const loop: number = drawableVertexCount * Constant.vertexStep;\n      for (\n        let pi: number = Constant.vertexOffset;\n        pi < loop;\n        pi += Constant.vertexStep\n      ) {\n        const x: number = drawableVertexes[pi];\n        const y: number = drawableVertexes[pi + 1];\n\n        if (x < minX) {\n          minX = x;\n        }\n        if (x > maxX) {\n          maxX = x;\n        }\n        if (y < minY) {\n          minY = y;\n        }\n        if (y > maxY) {\n          maxY = y;\n        }\n      }\n\n      // 有効な点が一つも取れなかったのでスキップ\n      if (minX == Number.MAX_VALUE) {\n        continue;\n      }\n\n      // 全体の矩形に反映\n      if (minX < clippedDrawTotalMinX) {\n        clippedDrawTotalMinX = minX;\n      }\n      if (minY < clippedDrawTotalMinY) {\n        clippedDrawTotalMinY = minY;\n      }\n      if (maxX > clippedDrawTotalMaxX) {\n        clippedDrawTotalMaxX = maxX;\n      }\n      if (maxY > clippedDrawTotalMaxY) {\n        clippedDrawTotalMaxY = maxY;\n      }\n\n      if (clippedDrawTotalMinX == Number.MAX_VALUE) {\n        clippingContext._allClippedDrawRect.x = 0.0;\n        clippingContext._allClippedDrawRect.y = 0.0;\n        clippingContext._allClippedDrawRect.width = 0.0;\n        clippingContext._allClippedDrawRect.height = 0.0;\n        clippingContext._isUsing = false;\n      } else {\n        clippingContext._isUsing = true;\n        const w: number = clippedDrawTotalMaxX - clippedDrawTotalMinX;\n        const h: number = clippedDrawTotalMaxY - clippedDrawTotalMinY;\n        clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;\n        clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;\n        clippingContext._allClippedDrawRect.width = w;\n        clippingContext._allClippedDrawRect.height = h;\n      }\n    }\n  }\n\n  /**\n   * 画面描画に使用するクリッピングマスクのリストを取得する\n   * @return 画面描画に使用するクリッピングマスクのリスト\n   */\n  public getClippingContextListForDraw(): csmVector<T_ClippingContext> {\n    return this._clippingContextListForDraw;\n  }\n\n  public getClippingContextListForOffscreen(): csmVector<T_ClippingContext> {\n    return this._clippingContextListForOffscreen;\n  }\n\n  /**\n   * クリッピングマスクバッファのサイズを取得する\n   * @return クリッピングマスクバッファのサイズ\n   */\n  public getClippingMaskBufferSize(): number {\n    return this._clippingMaskBufferSize;\n  }\n\n  /**\n   * このバッファのレンダーテクスチャの枚数を取得する\n   * @return このバッファのレンダーテクスチャの枚数\n   */\n  public getRenderTextureCount(): number {\n    return this._renderTextureCount;\n  }\n\n  /**\n   * カラーチャンネル（RGBA）のフラグを取得する\n   * @param channelNo カラーチャンネル（RGBA）の番号（0:R, 1:G, 2:B, 3:A）\n   */\n  public getChannelFlagAsColor(channelNo: number): CubismTextureColor {\n    return this._channelColors.at(channelNo);\n  }\n\n  /**\n   * クリッピングマスクバッファのサイズを設定する\n   * @param size クリッピングマスクバッファのサイズ\n   */\n  public setClippingMaskBufferSize(size: number): void {\n    this._clippingMaskBufferSize = size;\n  }\n\n  protected _clearedMaskBufferFlags: csmVector<boolean>; //マスクのクリアフラグの配列\n\n  protected _channelColors: csmVector<CubismTextureColor>;\n  protected _clippingContextListForMask: csmVector<T_ClippingContext>; // マスク用クリッピングコンテキストのリスト\n  protected _clippingContextListForDraw: csmVector<T_ClippingContext>; // 描画用クリッピングコンテキストのリスト\n  protected _clippingContextListForOffscreen: csmVector<T_ClippingContext>; // オフスクリーン用クリッピングコンテキストのリスト\n  protected _clippingMaskBufferSize: number; // クリッピングマスクのバッファサイズ（初期値:256）\n  protected _renderTextureCount: number; // 生成するレンダーテクスチャの枚数\n\n  protected _tmpMatrix: CubismMatrix44; // マスク計算用の行列\n  protected _tmpMatrixForMask: CubismMatrix44; // マスク計算用の行列\n  protected _tmpMatrixForDraw: CubismMatrix44; // マスク計算用の行列\n  protected _tmpBoundsOnModel: csmRect; // マスク配置計算用の矩形\n\n  protected _clippingContexttConstructor: ClippingContextConstructor<T_ClippingContext>;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismRenderTarget } from './cubismrendertarget';\n\n/**\n * WebGL用オフスクリーンサーフェス\n * マスクの描画及びオフスクリーン機能に必要なフレームバッファなどを管理する。\n */\nexport class CubismRenderTarget_WebGL implements CubismRenderTarget {\n  /**\n   * WebGL2RenderingContext.blitFramebuffer() でバッファのコピーを行う。\n   *\n   * @param src コピー元のオフスクリーンサーフェス\n   * @param dst コピー先のオフスクリーンサーフェス\n   */\n  public static copyBuffer(\n    gl: WebGL2RenderingContext,\n    src: CubismRenderTarget_WebGL,\n    dst: CubismRenderTarget_WebGL\n  ): void {\n    if (src == null || dst == null) {\n      return;\n    }\n\n    if (!(gl instanceof WebGL2RenderingContext)) {\n      throw new Error('WebGL2RenderingContext is required for buffer copy.');\n    }\n\n    const previousFramebuffer = gl.getParameter(\n      gl.FRAMEBUFFER_BINDING\n    ) as WebGLFramebuffer;\n\n    // 各オフスクリーンサーフェスのレンダーテクスチャをバインド\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, src.getRenderTexture());\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dst.getRenderTexture());\n\n    // バッファのコピーを実行\n    gl.blitFramebuffer(\n      0,\n      0,\n      src.getBufferWidth(),\n      src.getBufferHeight(),\n      0,\n      0,\n      dst.getBufferWidth(),\n      dst.getBufferHeight(),\n      gl.COLOR_BUFFER_BIT,\n      gl.NEAREST\n    );\n\n    // コピー後、元のフレームバッファを復元\n    gl.bindFramebuffer(gl.FRAMEBUFFER, previousFramebuffer);\n  }\n\n  /**\n   * 描画を開始する。\n   *\n   * @param restoreFbo EndDraw時に復元するFBOを指定する。nullを指定すると、beginDraw時に現在のFBOを記憶しておく。\n   */\n  public beginDraw(restoreFbo: WebGLFramebuffer = null): void {\n    if (this._renderTexture == null) {\n      return;\n    }\n\n    // バックバッファのサーフェイスを記憶しておく。\n    if (restoreFbo == null) {\n      this._oldFbo = this._gl.getParameter(this._gl.FRAMEBUFFER_BINDING);\n    } else {\n      this._oldFbo = restoreFbo;\n    }\n\n    // RenderTextureをactiveにセット\n    this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._renderTexture);\n  }\n\n  /**\n   * 描画を終了し、バックバッファのサーフェイスを復元する。\n   */\n  public endDraw(): void {\n    // バックバッファのサーフェイスを復元\n    this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._oldFbo);\n  }\n\n  /**\n   * バインドされているカラーバッファのクリアを行う。\n   *\n   * @param r 赤の成分 (0.0 - 1.0)\n   * @param g 緑の成分 (0.0 - 1.0)\n   * @param b 青の成分 (0.0 - 1.0)\n   * @param a アルファの成分 (0.0 - 1.0)\n   */\n  public clear(r: number, g: number, b: number, a: number): void {\n    // クリア処理\n    this._gl.clearColor(r, g, b, a);\n    this._gl.clear(this._gl.COLOR_BUFFER_BIT);\n  }\n\n  /**\n   * オフスクリーンサーフェスを作成する。\n   *\n   * @param gl WebGLRenderingContextまたはWebGL2RenderingContext\n   *          NOTE: Cubism 5.3以降のモデルが使用される場合はWebGL2RenderingContextを使用すること。\n   * @param displayBufferWidth オフスクリーンサーフェスの幅\n   * @param displayBufferHeight オフスクリーンサーフェスの高さ\n   * @param previousFramebuffer 前のフレームバッファ\n   *\n   * @return 成功した場合はtrue、失敗した場合はfalse\n   */\n  public createOffscreenRenderTarget(\n    gl: WebGLRenderingContext | WebGL2RenderingContext,\n    displayBufferWidth: number,\n    displayBufferHeight: number,\n    previousFramebuffer: WebGLFramebuffer\n  ): boolean {\n    this.destroyRenderTarget();\n\n    this._colorBuffer = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, this._colorBuffer);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      displayBufferWidth,\n      displayBufferHeight,\n      0,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      null\n    );\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    // フレームバッファを作成\n    const ret = gl.createFramebuffer();\n    if (ret == null) {\n      console.error('Failed to create framebuffer');\n      return false;\n    }\n\n    // 作成したフレームバッファをバインド\n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret);\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      this._colorBuffer,\n      0\n    );\n\n    // 状態をチェック\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n    // フレームバッファが完全でない場合はエラーを出力して以前のフレームバッファを復元\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      console.error('Framebuffer is not complete');\n      gl.bindFramebuffer(gl.FRAMEBUFFER, previousFramebuffer);\n      gl.deleteFramebuffer(ret);\n\n      this.destroyRenderTarget();\n\n      return false;\n    }\n\n    this._renderTexture = ret;\n    this._bufferWidth = displayBufferWidth;\n    this._bufferHeight = displayBufferHeight;\n\n    this._gl = gl;\n\n    return true;\n  }\n\n  /**\n   * レンダーターゲットを破棄する。\n   */\n  public destroyRenderTarget(): void {\n    if (this._colorBuffer) {\n      this._gl.bindTexture(this._gl.TEXTURE_2D, null);\n      this._gl.deleteTexture(this._colorBuffer);\n      this._colorBuffer = null;\n    }\n\n    if (this._renderTexture) {\n      this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, null);\n      this._gl.deleteFramebuffer(this._renderTexture);\n      this._renderTexture = null;\n    }\n  }\n\n  /**\n   * WebGLのコンテキストを取得する。\n   *\n   * @return WebGLRenderingContextまたはWebGL2RenderingContext\n   */\n  public getGL(): WebGLRenderingContext | WebGL2RenderingContext {\n    return this._gl;\n  }\n\n  /**\n   * レンダーテクスチャを取得する。\n   *\n   * @return WebGLFramebuffer\n   */\n  public getRenderTexture(): WebGLFramebuffer {\n    return this._renderTexture;\n  }\n\n  /**\n   * カラーバッファを取得する。\n   *\n   * @return WebGLTexture\n   */\n  public getColorBuffer(): WebGLTexture {\n    return this._colorBuffer;\n  }\n\n  /**\n   * カラーバッファの幅を取得する。\n   *\n   * @return カラーバッファの幅\n   */\n  public getBufferWidth(): number {\n    return this._bufferWidth;\n  }\n\n  /**\n   * カラーバッファの高さを取得する。\n   *\n   * @return カラーバッファの高さ\n   */\n  public getBufferHeight(): number {\n    return this._bufferHeight;\n  }\n\n  /**\n   * オフスクリーンサーフェスが有効かどうかを確認する。\n   *\n   * @return 有効な場合はtrue、無効な場合はfalse\n   */\n  public isValid(): boolean {\n    return this._renderTexture != null;\n  }\n\n  /**\n   * オフスクリーンのインデックスを設定する。\n   *\n   * @param offscreenIndex オフスクリーンのインデックス\n   */\n  public setOffscreenIndex(offscreenIndex: number): void {\n    this._offscreenIndex = offscreenIndex;\n  }\n\n  /**\n   * オフスクリーンのインデックスを取得する。\n   *\n   * @return オフスクリーンのインデックス\n   */\n  public getOffscreenIndex(): number {\n    return this._offscreenIndex;\n  }\n\n  /**\n   * 以前のフレームバッファを取得する。\n   *\n   * @return 以前のフレームバッファ\n   */\n  public getOldFBO(): WebGLFramebuffer {\n    return this._oldFbo;\n  }\n\n  /**\n   * 以前のオフスクリーンサーフェスを設定する。\n   *\n   * @param oldOffscreen 以前のオフスクリーンサーフェス\n   */\n  public setOldOffscreen(oldOffscreen: CubismRenderTarget_WebGL): void {\n    this._oldOffscreen = oldOffscreen;\n  }\n\n  /**\n   * 以前のオフスクリーンサーフェスを取得する。\n   *\n   * @return 以前のオフスクリーンサーフェス\n   */\n  public getOldOffscreen(): CubismRenderTarget_WebGL {\n    return this._oldOffscreen;\n  }\n\n  /**\n   * 親のオフスクリーンサーフェスを設定する。\n   *\n   * @param parentOffscreenRenderTarget 親のオフスクリーンサーフェス\n   */\n  public setParentPartOffscreen(\n    parentOffscreenRenderTarget: CubismRenderTarget_WebGL\n  ): void {\n    this._parentOffscreenRenderTarget = parentOffscreenRenderTarget;\n  }\n\n  /**\n   * 親のオフスクリーンサーフェスを取得する。\n   *\n   * @return 親のオフスクリーンサーフェス\n   */\n  public getParentPartOffscreen(): CubismRenderTarget_WebGL {\n    return this._parentOffscreenRenderTarget;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._gl = null;\n    this._colorBuffer = null;\n    this._renderTexture = null;\n    this._bufferWidth = 0;\n    this._bufferHeight = 0;\n    this._oldFbo = null;\n    this._offscreenIndex = -1;\n    this._parentOffscreenRenderTarget = null;\n    this._oldOffscreen = null;\n  }\n\n  private _gl: WebGLRenderingContext | WebGL2RenderingContext; // WebGLのコンテキスト\n  private _colorBuffer: WebGLTexture; // カラーバッファ\n  private _renderTexture: WebGLFramebuffer; // フレームバッファ\n  private _bufferWidth: number; // カラーバッファの幅\n  private _bufferHeight: number; // カラーバッファの高さ\n  private _oldFbo: WebGLFramebuffer; // 以前のフレームバッファ\n\n  private _offscreenIndex: number; // オフスクリーンのインデックス\n  private _parentOffscreenRenderTarget: CubismRenderTarget_WebGL; // 親のオフスクリーンレンダーターゲット\n  private _oldOffscreen: CubismRenderTarget_WebGL; // 以前のオフスクリーンレンダーターゲット\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismrendertarget_webgl';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismOffscreenSurface_WebGL = $.CubismRenderTarget_WebGL;\n  export type CubismOffscreenSurface_WebGL = $.CubismRenderTarget_WebGL;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMatrix44 } from '../math/cubismmatrix44';\nimport {\n  CubismColorBlend,\n  CubismModel,\n  CubismAlphaBlend\n} from '../model/cubismmodel';\nimport { csmMap, iterator } from '../type/csmmap';\nimport { csmRect } from '../type/csmrectf';\nimport { csmVector } from '../type/csmvector';\nimport { CubismLogError, CubismLogWarning } from '../utils/cubismdebug';\nimport { CubismRenderTarget_WebGL } from './cubismrendertarget_webgl';\nimport { CubismBlendMode, CubismTextureColor } from './cubismrenderer';\nimport { CubismRenderer_WebGL } from './cubismrenderer_webgl';\n\n// Shader\nconst VertShaderSrcCopyPath = 'vertshadersrccopy.vert';\nconst FragShaderSrcCopyPath = 'fragshadersrccopy.frag';\nconst FragShaderSrcColorBlendPath = 'fragshadersrccolorblend.frag';\nconst FragShaderSrcAlphaBlendPath = 'fragshadersrcalphablend.frag';\nconst VertShaderSrcBlendPath = 'vertshadersrcblend.vert';\nconst FragShaderSrcBlendPath = 'fragshadersrcpremultipliedalphablend.frag';\n\n// Blend mode Prefix\nconst ColorBlendPrefix = 'ColorBlend_';\nconst AlphaBlendPrefix = 'AlphaBlend_';\n\nlet s_instance: CubismShaderManager_WebGL; // インスタンス（シングルトン）\n\nconst s_renderTargetVertexArray: Float32Array = new Float32Array([\n  -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0\n]);\nconst s_renderTargetUvArray: Float32Array = new Float32Array([\n  0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0\n]);\nconst s_renderTargetReverseUvArray = new Float32Array([\n  0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0\n]);\n\n/**\n * WebGL用のシェーダープログラムを生成・破棄するクラス\n */\nexport class CubismShader_WebGL {\n  /**\n   * 非同期でシェーダーをパスから読み込む\n   *\n   * @param url シェーダーのURL\n   *\n   * @return シェーダーのソースコード\n   */\n  private async loadShader(url: string): Promise<string> {\n    const response = await fetch(url);\n    return await response.text();\n  }\n\n  /**\n   * ブレンドモード用のシェーダーを読み込む\n   */\n  private async loadBlendModeShaders(): Promise<void> {\n    const shaderDir = '../../Framework/Shaders/WebGL/';\n\n    // シェーダーファイルのパスとプロパティの対応\n    // NOTE: prop は CubismShader_WebGL に設定された変数名\n    const shaderFiles: { path: string; prop: keyof CubismShader_WebGL }[] = [\n      { path: shaderDir + VertShaderSrcCopyPath, prop: '_vertShaderSrcCopy' },\n      { path: shaderDir + FragShaderSrcCopyPath, prop: '_fragShaderSrcCopy' },\n      {\n        path: shaderDir + FragShaderSrcColorBlendPath,\n        prop: '_fragShaderSrcColorBlend'\n      },\n      {\n        path: shaderDir + FragShaderSrcAlphaBlendPath,\n        prop: '_fragShaderSrcAlphaBlend'\n      },\n      { path: shaderDir + VertShaderSrcBlendPath, prop: '_vertShaderSrcBlend' },\n      { path: shaderDir + FragShaderSrcBlendPath, prop: '_fragShaderSrcBlend' }\n    ];\n\n    // シェーダーファイルを非同期で読み込み、結果をプロパティに設定\n    const results = await Promise.all(\n      shaderFiles.map(file =>\n        this.loadShader(file.path)\n          .then(data => ({ prop: file.prop, data }))\n          .catch(error => {\n            console.error(`Error loading ${file.path} shader:`, error);\n            return { prop: file.prop, data: '' };\n          })\n      )\n    );\n\n    // 変数に内容を登録\n    results.forEach(result => {\n      (this as any)[result.prop] = result.data;\n    });\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._shaderSets = new csmVector<CubismShaderSet>();\n    this._isShaderLoaded = false;\n\n    // カラーブレンド用のマップ\n    this._colorBlendMap = new csmMap<CubismColorBlend, string>();\n    this._colorBlendValues = new csmVector<CubismColorBlend>();\n\n    const colorBlendKeys = Object.keys(CubismColorBlend);\n\n    // Object.values() のポリフィル\n    const colorBlendRawValues = Object.keys(CubismColorBlend).map(\n      k => CubismColorBlend[k as keyof typeof CubismColorBlend]\n    );\n\n    for (let i = 0; i < colorBlendKeys.length; i++) {\n      const colorBlendKey = colorBlendKeys[i];\n\n      if (colorBlendKey.includes(ColorBlendPrefix)) {\n        const blendModeName = colorBlendKey.slice(ColorBlendPrefix.length);\n\n        const colorBlendNumber = parseInt(colorBlendRawValues[i].toString());\n\n        this._colorBlendMap.setValue(colorBlendNumber, blendModeName);\n\n        this._colorBlendValues.pushBack(colorBlendNumber);\n      }\n    }\n\n    // アルファブレンド用のマップ\n    this._alphaBlendMap = new csmMap<CubismAlphaBlend, string>();\n    this._alphaBlendValues = new csmVector<CubismAlphaBlend>();\n\n    const alphaBlendKeys = Object.keys(CubismAlphaBlend);\n\n    // Object.values() のポリフィル\n    const alphaBlendRawValues = Object.keys(CubismAlphaBlend).map(\n      k => CubismAlphaBlend[k as keyof typeof CubismAlphaBlend]\n    );\n\n    for (let i = 0; i < alphaBlendKeys.length; i++) {\n      const alphaBlendKey = alphaBlendKeys[i];\n\n      if (alphaBlendKey.includes(AlphaBlendPrefix)) {\n        const blendModeName = alphaBlendKey.slice(AlphaBlendPrefix.length);\n\n        const alphaBlendNumber = parseInt(alphaBlendRawValues[i].toString());\n\n        this._alphaBlendMap.setValue(alphaBlendNumber, blendModeName);\n\n        this._alphaBlendValues.pushBack(alphaBlendNumber);\n      }\n    }\n\n    this._blendShaderSetMap = new csmMap<string, number>();\n\n    this._shaderCount =\n      ShaderNames.ShaderNames_ShaderCount +\n      1 +\n      (this._colorBlendValues.getSize() - 3) *\n        (this._alphaBlendValues.getSize() - 1) *\n        3;\n    // シェーダーの数 =\n    // (マスク生成用 + (通常用 + 加算 + 乗算) * (マスク無の乗算済アルファ対応版 + マスク有の乗算済アルファ対応版 + マスク有反転の乗算済アルファ対応版))\n    // + 1（コピー用のシェーダー）\n    // + カラーブレンドの数（後方互換とNone除く） * アルファブレンドの数（None除く） * （通常 + マスク + 反転マスク）\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    this.releaseShaderProgram();\n  }\n\n  /**\n   * 描画用のシェーダプログラムの一連のセットアップを実行する\n   *\n   * @param renderer レンダラー\n   * @param model 描画対象のモデル\n   * @param index 描画対象のメッシュのインデックス\n   */\n  public setupShaderProgramForDrawable(\n    renderer: CubismRenderer_WebGL,\n    model: Readonly<CubismModel>,\n    index: number\n  ): void {\n    if (!renderer.isPremultipliedAlpha()) {\n      CubismLogError('NoPremultipliedAlpha is not allowed');\n    }\n\n    if (this._shaderSets.getSize() == 0) {\n      this.generateShaders();\n    }\n\n    // Blending\n    let srcColor: number;\n    let dstColor: number;\n    let srcAlpha: number;\n    let dstAlpha: number;\n\n    // _shaderSets用のオフセット計算\n    const masked: boolean =\n      renderer.getClippingContextBufferForDrawable() != null; // この描画オブジェクトはマスク対象か\n    const invertedMask: boolean = model.getDrawableInvertedMaskBit(index);\n    const offset: number = masked ? (invertedMask ? 2 : 1) : 0;\n\n    let shaderSet: CubismShaderSet;\n    // Cubism 5.2以前のシェーダを使用する場合はtrue\n    let isUsingCompatible: boolean = true;\n\n    if (model.isBlendModeEnabled()) {\n      const colorBlendMode: CubismColorBlend =\n        model.getDrawableColorBlend(index);\n      const alphaBlendMode: CubismAlphaBlend =\n        model.getDrawableAlphaBlend(index);\n\n      if (\n        colorBlendMode == CubismColorBlend.ColorBlend_None ||\n        alphaBlendMode == CubismAlphaBlend.AlphaBlend_None ||\n        (colorBlendMode == CubismColorBlend.ColorBlend_Normal &&\n          alphaBlendMode == CubismAlphaBlend.AlphaBlend_Over)\n      ) {\n        // Cubism 5.2以前のシェーダを使用する。\n        shaderSet = this._shaderSets.at(\n          ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset\n        );\n\n        srcColor = this.gl.ONE;\n        dstColor = this.gl.ONE_MINUS_SRC_ALPHA;\n        srcAlpha = this.gl.ONE;\n        dstAlpha = this.gl.ONE_MINUS_SRC_ALPHA;\n      } else {\n        switch (colorBlendMode) {\n          // Cubism 5.2以前のシェーダを使用する。\n          case CubismColorBlend.ColorBlend_AddCompatible:\n            shaderSet = this._shaderSets.at(\n              ShaderNames.ShaderNames_AddPremultipliedAlpha + offset\n            );\n            srcColor = this.gl.ONE;\n            dstColor = this.gl.ONE;\n            srcAlpha = this.gl.ZERO;\n            dstAlpha = this.gl.ONE;\n            break;\n          // Cubism 5.2以前のシェーダを使用する。\n          case CubismColorBlend.ColorBlend_MultiplyCompatible:\n            shaderSet = this._shaderSets.at(\n              ShaderNames.ShaderNames_MultPremultipliedAlpha + offset\n            );\n            srcColor = this.gl.DST_COLOR;\n            dstColor = this.gl.ONE_MINUS_SRC_ALPHA;\n            srcAlpha = this.gl.ZERO;\n            dstAlpha = this.gl.ONE;\n            break;\n          // ブレンドモードの組み合わせでシェーダーを決定\n          default:\n            {\n              const srcBuffer =\n                renderer._currentOffscreen != null\n                  ? renderer._currentOffscreen\n                  : renderer.getModelRenderTarget(0);\n\n              // 先にコピーを行う\n              CubismRenderTarget_WebGL.copyBuffer(\n                this.gl as WebGL2RenderingContext,\n                srcBuffer,\n                renderer.getModelRenderTarget(1)\n              );\n              const baseShaderSetIndex = this._blendShaderSetMap.getValue(\n                this._colorBlendMap.getValue(colorBlendMode) +\n                  this._alphaBlendMap.getValue(alphaBlendMode)\n              );\n              shaderSet = this._shaderSets.at(baseShaderSetIndex + offset);\n              srcColor = this.gl.ONE;\n              dstColor = this.gl.ZERO;\n              srcAlpha = this.gl.ONE;\n              dstAlpha = this.gl.ZERO;\n              isUsingCompatible = false;\n            }\n            break;\n        }\n      }\n    } else {\n      // Cubism 5.2以前のシェーダを使用する。\n      switch (model.getDrawableBlendMode(index)) {\n        case CubismBlendMode.CubismBlendMode_Normal:\n        default:\n          shaderSet = this._shaderSets.at(\n            ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset\n          );\n          srcColor = this.gl.ONE;\n          dstColor = this.gl.ONE_MINUS_SRC_ALPHA;\n          srcAlpha = this.gl.ONE;\n          dstAlpha = this.gl.ONE_MINUS_SRC_ALPHA;\n          break;\n\n        case CubismBlendMode.CubismBlendMode_Additive:\n          shaderSet = this._shaderSets.at(\n            ShaderNames.ShaderNames_AddPremultipliedAlpha + offset\n          );\n          srcColor = this.gl.ONE;\n          dstColor = this.gl.ONE;\n          srcAlpha = this.gl.ZERO;\n          dstAlpha = this.gl.ONE;\n          break;\n\n        case CubismBlendMode.CubismBlendMode_Multiplicative:\n          shaderSet = this._shaderSets.at(\n            ShaderNames.ShaderNames_MultPremultipliedAlpha + offset\n          );\n          srcColor = this.gl.DST_COLOR;\n          dstColor = this.gl.ONE_MINUS_SRC_ALPHA;\n          srcAlpha = this.gl.ZERO;\n          dstAlpha = this.gl.ONE;\n          break;\n      }\n    }\n\n    this.gl.useProgram(shaderSet.shaderProgram);\n\n    // 頂点配列の設定\n    if (renderer._bufferData.vertex == null) {\n      renderer._bufferData.vertex = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.vertex);\n\n    // 頂点配列の設定\n    const vertexArray: Float32Array = model.getDrawableVertices(index);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\n    this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\n    this.gl.vertexAttribPointer(\n      shaderSet.attributePositionLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      0,\n      0\n    );\n\n    // テクスチャ頂点の設定\n    if (renderer._bufferData.uv == null) {\n      renderer._bufferData.uv = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.uv);\n    const uvArray: Float32Array = model.getDrawableVertexUvs(index);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\n    this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\n    this.gl.vertexAttribPointer(\n      shaderSet.attributeTexCoordLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      0,\n      0\n    );\n\n    if (masked) {\n      this.gl.activeTexture(this.gl.TEXTURE1);\n\n      // frameBufferに書かれたテクスチャ\n      const tex: WebGLTexture = renderer\n        .getDrawableMaskBuffer(\n          renderer.getClippingContextBufferForDrawable()._bufferIndex\n        )\n        .getColorBuffer();\n      this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\n      this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);\n\n      // view座標をClippingContextの座標に変換するための行列を設定\n      this.gl.uniformMatrix4fv(\n        shaderSet.uniformClipMatrixLocation,\n        false,\n        renderer.getClippingContextBufferForDrawable()._matrixForDraw.getArray()\n      );\n\n      // 使用するカラーチャンネルを設定\n      const channelIndex: number =\n        renderer.getClippingContextBufferForDrawable()._layoutChannelIndex;\n      const colorChannel: CubismTextureColor = renderer\n        .getClippingContextBufferForDrawable()\n        .getClippingManager()\n        .getChannelFlagAsColor(channelIndex);\n      this.gl.uniform4f(\n        shaderSet.uniformChannelFlagLocation,\n        colorChannel.r,\n        colorChannel.g,\n        colorChannel.b,\n        colorChannel.a\n      );\n\n      if (model.isBlendModeEnabled()) {\n        this.gl.uniform1f(\n          shaderSet.uniformInvertMaskFlagLocation,\n          invertedMask ? 1.0 : 0.0\n        );\n      }\n    }\n\n    // テクスチャ設定\n    const textureNo: number = model.getDrawableTextureIndex(index);\n    const textureId: WebGLTexture = renderer\n      .getBindedTextures()\n      .getValue(textureNo);\n    this.gl.activeTexture(this.gl.TEXTURE0);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\n    this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\n\n    //座標変換\n    const matrix4x4: CubismMatrix44 = renderer.getMvpMatrix();\n    this.gl.uniformMatrix4fv(\n      shaderSet.uniformMatrixLocation,\n      false,\n      matrix4x4.getArray()\n    );\n\n    //ベース色の取得\n    let baseColor: CubismTextureColor = null;\n\n    if (model.isBlendModeEnabled()) {\n      // ブレンドモードではモデルカラーは最後に処理するため不透明度のみ対応させる\n      const drawableOpacity = model.getDrawableOpacity(index);\n      baseColor = new CubismTextureColor(\n        drawableOpacity,\n        drawableOpacity,\n        drawableOpacity,\n        drawableOpacity\n      );\n    } else {\n      baseColor = renderer.getModelColorWithOpacity(\n        model.getDrawableOpacity(index)\n      );\n    }\n\n    const multiplyColor: CubismTextureColor = model.getMultiplyColor(index);\n    const screenColor: CubismTextureColor = model.getScreenColor(index);\n\n    this.gl.uniform4f(\n      shaderSet.uniformBaseColorLocation,\n      baseColor.r,\n      baseColor.g,\n      baseColor.b,\n      baseColor.a\n    );\n\n    this.gl.uniform4f(\n      shaderSet.uniformMultiplyColorLocation,\n      multiplyColor.r,\n      multiplyColor.g,\n      multiplyColor.b,\n      multiplyColor.a\n    );\n\n    this.gl.uniform4f(\n      shaderSet.uniformScreenColorLocation,\n      screenColor.r,\n      screenColor.g,\n      screenColor.b,\n      screenColor.a\n    );\n\n    // Cubism 5.3以降のシェーダを使用する場合\n    if (model.isBlendModeEnabled()) {\n      this.gl.activeTexture(this.gl.TEXTURE2);\n\n      // Cubism 5.2以前のシェーダを使用する場合は不要なのでこの処理をスキップ\n      if (!isUsingCompatible) {\n        const tex: WebGLTexture = renderer\n          .getModelRenderTarget(1)\n          .getColorBuffer();\n        this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\n        this.gl.uniform1i(shaderSet.samplerFrameBufferTextureLocation, 2);\n      }\n    }\n\n    // IBOを作成し、データを転送\n    if (renderer._bufferData.index == null) {\n      renderer._bufferData.index = this.gl.createBuffer();\n    }\n    const indexArray: Uint16Array = model.getDrawableVertexIndices(index);\n\n    this.gl.bindBuffer(\n      this.gl.ELEMENT_ARRAY_BUFFER,\n      renderer._bufferData.index\n    );\n    this.gl.bufferData(\n      this.gl.ELEMENT_ARRAY_BUFFER,\n      indexArray,\n      this.gl.DYNAMIC_DRAW\n    );\n\n    this.gl.blendFuncSeparate(srcColor, dstColor, srcAlpha, dstAlpha);\n  }\n\n  /**\n   * オフスクリーン用のシェーダプログラムの一連のセットアップを実行する\n   *\n   * @param renderer レンダラー\n   * @param model 描画対象のモデル\n   * @param offscreen 描画対象のオフスクリーン\n   */\n  public setupShaderProgramForOffscreen(\n    renderer: CubismRenderer_WebGL,\n    model: Readonly<CubismModel>,\n    offscreen: CubismRenderTarget_WebGL\n  ): void {\n    if (!renderer.isPremultipliedAlpha()) {\n      CubismLogError('NoPremultipliedAlpha is not allowed');\n    }\n\n    if (this._shaderSets.getSize() === 0) {\n      this.generateShaders();\n    }\n\n    if (this._isShaderLoaded == false) {\n      CubismLogWarning('Shader program is not initialized.');\n      return;\n    }\n\n    // Blending\n    let srcColor: number;\n    let dstColor: number;\n    let srcAlpha: number;\n    let dstAlpha: number;\n\n    const offscreenIndex: number = offscreen.getOffscreenIndex();\n    // _shaderSets用のオフセット計算\n    const masked: boolean =\n      renderer.getClippingContextBufferForOffscreen() != null; // この描画オブジェクトはマスク対象か\n    const invertedMask: boolean =\n      model.getOffscreenInvertedMask(offscreenIndex);\n    const offset: number = masked ? (invertedMask ? 2 : 1) : 0;\n\n    let shaderSet: CubismShaderSet;\n    // Cubism 5.2以前のシェーダを使用する場合はtrue\n    let isUsingCompatible: boolean = true;\n\n    const colorBlendMode: CubismColorBlend =\n      model.getOffscreenColorBlend(offscreenIndex);\n    const alphaBlendMode: CubismAlphaBlend =\n      model.getOffscreenAlphaBlend(offscreenIndex);\n\n    if (\n      colorBlendMode == CubismColorBlend.ColorBlend_None ||\n      alphaBlendMode == CubismAlphaBlend.AlphaBlend_None ||\n      (colorBlendMode == CubismColorBlend.ColorBlend_Normal &&\n        alphaBlendMode == CubismAlphaBlend.AlphaBlend_Over)\n    ) {\n      // Cubism 5.2以前のシェーダを使用する。\n      shaderSet = this._shaderSets.at(\n        ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset\n      );\n\n      srcColor = this.gl.ONE;\n      dstColor = this.gl.ONE_MINUS_SRC_ALPHA;\n      srcAlpha = this.gl.ONE;\n      dstAlpha = this.gl.ONE_MINUS_SRC_ALPHA;\n    } else {\n      switch (colorBlendMode as CubismColorBlend) {\n        // Cubism 5.2以前のシェーダを使用する。\n        case CubismColorBlend.ColorBlend_AddCompatible:\n          shaderSet = this._shaderSets.at(\n            ShaderNames.ShaderNames_AddPremultipliedAlpha + offset\n          );\n          srcColor = this.gl.ONE;\n          dstColor = this.gl.ONE;\n          srcAlpha = this.gl.ZERO;\n          dstAlpha = this.gl.ONE;\n          break;\n        case CubismColorBlend.ColorBlend_MultiplyCompatible:\n          shaderSet = this._shaderSets.at(\n            ShaderNames.ShaderNames_MultPremultipliedAlpha + offset\n          );\n          srcColor = this.gl.DST_COLOR;\n          dstColor = this.gl.ONE_MINUS_SRC_ALPHA;\n          srcAlpha = this.gl.ZERO;\n          dstAlpha = this.gl.ONE;\n          break;\n        default:\n          {\n            const srcBuffer =\n              offscreen.getOldOffscreen() != null\n                ? offscreen.getOldOffscreen()\n                : renderer.getModelRenderTarget(0);\n\n            // 先にコピーを行う\n            CubismRenderTarget_WebGL.copyBuffer(\n              this.gl as WebGL2RenderingContext,\n              srcBuffer,\n              renderer.getModelRenderTarget(1)\n            );\n            const baseShaderSetIndex = this._blendShaderSetMap.getValue(\n              this._colorBlendMap.getValue(colorBlendMode) +\n                this._alphaBlendMap.getValue(alphaBlendMode)\n            );\n            shaderSet = this._shaderSets.at(baseShaderSetIndex + offset);\n            srcColor = this.gl.ONE;\n            dstColor = this.gl.ZERO;\n            srcAlpha = this.gl.ONE;\n            dstAlpha = this.gl.ZERO;\n            isUsingCompatible = false;\n          }\n          break;\n      }\n    }\n\n    this.gl.useProgram(shaderSet.shaderProgram);\n\n    // 頂点配列の設定\n    CubismRenderTarget_WebGL.copyBuffer(\n      this.gl as WebGL2RenderingContext,\n      offscreen,\n      renderer.getModelRenderTarget(2)\n    );\n    this.gl.activeTexture(this.gl.TEXTURE0);\n    const tex0 = renderer.getModelRenderTarget(2).getColorBuffer();\n    this.gl.bindTexture(this.gl.TEXTURE_2D, tex0);\n    this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\n\n    //座標変換\n    const matrix4x4: CubismMatrix44 = new CubismMatrix44();\n    matrix4x4.loadIdentity();\n    this.gl.uniformMatrix4fv(\n      shaderSet.uniformMatrixLocation,\n      false,\n      matrix4x4.getArray()\n    );\n\n    // ベース色の取得\n    const offscreenOpacity = model.getOffscreenOpacity(offscreenIndex);\n    // 乗算済みアルファを使用するのでオフスクリーンの透明度を 1.0 に乗算した状態\n    const baseColor: CubismTextureColor = new CubismTextureColor(\n      offscreenOpacity,\n      offscreenOpacity,\n      offscreenOpacity,\n      offscreenOpacity\n    );\n\n    const multiplyColor: CubismTextureColor =\n      model.getMultiplyColorOffscreen(offscreenIndex);\n    const screenColor: CubismTextureColor =\n      model.getScreenColorOffscreen(offscreenIndex);\n\n    this.gl.uniform4f(\n      shaderSet.uniformBaseColorLocation,\n      baseColor.r,\n      baseColor.g,\n      baseColor.b,\n      baseColor.a\n    );\n\n    this.gl.uniform4f(\n      shaderSet.uniformMultiplyColorLocation,\n      multiplyColor.r,\n      multiplyColor.g,\n      multiplyColor.b,\n      multiplyColor.a\n    );\n\n    this.gl.uniform4f(\n      shaderSet.uniformScreenColorLocation,\n      screenColor.r,\n      screenColor.g,\n      screenColor.b,\n      screenColor.a\n    );\n\n    this.gl.activeTexture(this.gl.TEXTURE2);\n\n    // Cubism 5.2以前のシェーダを使用する場合は不要なのでこの処理をスキップ\n    if (!isUsingCompatible) {\n      const tex1: WebGLTexture = renderer\n        .getModelRenderTarget(1)\n        .getColorBuffer();\n      this.gl.bindTexture(this.gl.TEXTURE_2D, tex1);\n      this.gl.uniform1i(shaderSet.samplerFrameBufferTextureLocation, 2);\n    }\n\n    if (masked) {\n      this.gl.activeTexture(this.gl.TEXTURE1);\n\n      // frameBufferに書かれたテクスチャ\n      const tex2: WebGLTexture = renderer\n        .getOffscreenMaskBuffer(\n          renderer.getClippingContextBufferForOffscreen()._bufferIndex\n        )\n        .getColorBuffer();\n      this.gl.bindTexture(this.gl.TEXTURE_2D, tex2);\n      this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);\n\n      // view座標をClippingContextの座標に変換するための行列を設定\n      this.gl.uniformMatrix4fv(\n        shaderSet.uniformClipMatrixLocation,\n        false,\n        renderer\n          .getClippingContextBufferForOffscreen()\n          ._matrixForDraw.getArray()\n      );\n\n      // 使用するカラーチャンネルを設定\n      const channelIndex: number =\n        renderer.getClippingContextBufferForOffscreen()._layoutChannelIndex;\n      const colorChannel: CubismTextureColor = renderer\n        .getClippingContextBufferForOffscreen()\n        .getClippingManager()\n        .getChannelFlagAsColor(channelIndex);\n      this.gl.uniform4f(\n        shaderSet.uniformChannelFlagLocation,\n        colorChannel.r,\n        colorChannel.g,\n        colorChannel.b,\n        colorChannel.a\n      );\n\n      if (model.isBlendModeEnabled()) {\n        this.gl.uniform1f(\n          shaderSet.uniformInvertMaskFlagLocation,\n          invertedMask ? 1.0 : 0.0\n        );\n      }\n    }\n\n    // 頂点位置属性の設定\n    if (!renderer._bufferData.vertex) {\n      renderer._bufferData.vertex = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.vertex);\n    this.gl.bufferData(\n      this.gl.ARRAY_BUFFER,\n      s_renderTargetVertexArray,\n      this.gl.STATIC_DRAW\n    );\n    this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\n    this.gl.vertexAttribPointer(\n      shaderSet.attributePositionLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      Float32Array.BYTES_PER_ELEMENT * 2,\n      0\n    );\n\n    // テクスチャ座標属性の設定\n    if (!renderer._bufferData.uv) {\n      renderer._bufferData.uv = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.uv);\n    this.gl.bufferData(\n      this.gl.ARRAY_BUFFER,\n      s_renderTargetReverseUvArray,\n      this.gl.STATIC_DRAW\n    );\n    this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\n    this.gl.vertexAttribPointer(\n      shaderSet.attributeTexCoordLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      Float32Array.BYTES_PER_ELEMENT * 2,\n      0\n    );\n\n    this.gl.blendFuncSeparate(srcColor, dstColor, srcAlpha, dstAlpha);\n  }\n\n  /**\n   * マスク用のシェーダプログラムの一連のセットアップを実行する\n   *\n   * @param renderer レンダラー\n   * @param model 描画対象のモデル\n   * @param index 描画対象のメッシュのインデックス\n   */\n  public setupShaderProgramForMask(\n    renderer: CubismRenderer_WebGL,\n    model: Readonly<CubismModel>,\n    index: number\n  ): void {\n    if (!renderer.isPremultipliedAlpha()) {\n      CubismLogError('NoPremultipliedAlpha is not allowed');\n    }\n\n    if (this._shaderSets.getSize() == 0) {\n      this.generateShaders();\n    }\n\n    const shaderSet: CubismShaderSet = this._shaderSets.at(\n      ShaderNames.ShaderNames_SetupMask\n    );\n    this.gl.useProgram(shaderSet.shaderProgram);\n\n    // 頂点配列の設定\n    if (renderer._bufferData.vertex == null) {\n      renderer._bufferData.vertex = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.vertex);\n    const vertexArray: Float32Array = model.getDrawableVertices(index);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\n    this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\n    this.gl.vertexAttribPointer(\n      shaderSet.attributePositionLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      0,\n      0\n    );\n\n    //テクスチャ設定\n    if (renderer._bufferData.uv == null) {\n      renderer._bufferData.uv = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.uv);\n    const textureNo: number = model.getDrawableTextureIndex(index);\n    const textureId: WebGLTexture = renderer\n      .getBindedTextures()\n      .getValue(textureNo);\n    this.gl.activeTexture(this.gl.TEXTURE0);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\n    this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\n\n    // テクスチャ頂点の設定\n    if (renderer._bufferData.uv == null) {\n      renderer._bufferData.uv = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.uv);\n    const uvArray: Float32Array = model.getDrawableVertexUvs(index);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\n    this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\n    this.gl.vertexAttribPointer(\n      shaderSet.attributeTexCoordLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      0,\n      0\n    );\n\n    // チャンネル\n    const channelIndex: number =\n      renderer.getClippingContextBufferForMask()._layoutChannelIndex;\n    const colorChannel: CubismTextureColor = renderer\n      .getClippingContextBufferForMask()\n      .getClippingManager()\n      .getChannelFlagAsColor(channelIndex);\n    this.gl.uniform4f(\n      shaderSet.uniformChannelFlagLocation,\n      colorChannel.r,\n      colorChannel.g,\n      colorChannel.b,\n      colorChannel.a\n    );\n\n    this.gl.uniformMatrix4fv(\n      shaderSet.uniformClipMatrixLocation,\n      false,\n      renderer.getClippingContextBufferForMask()._matrixForMask.getArray()\n    );\n\n    const rect: csmRect =\n      renderer.getClippingContextBufferForMask()._layoutBounds;\n\n    this.gl.uniform4f(\n      shaderSet.uniformBaseColorLocation,\n      rect.x * 2.0 - 1.0,\n      rect.y * 2.0 - 1.0,\n      rect.getRight() * 2.0 - 1.0,\n      rect.getBottom() * 2.0 - 1.0\n    );\n\n    const multiplyColor: CubismTextureColor = model.getMultiplyColor(index);\n    const screenColor: CubismTextureColor = model.getScreenColor(index);\n\n    this.gl.uniform4f(\n      shaderSet.uniformMultiplyColorLocation,\n      multiplyColor.r,\n      multiplyColor.g,\n      multiplyColor.b,\n      multiplyColor.a\n    );\n\n    this.gl.uniform4f(\n      shaderSet.uniformScreenColorLocation,\n      screenColor.r,\n      screenColor.g,\n      screenColor.b,\n      screenColor.a\n    );\n\n    // Blending\n    const srcColor: number = this.gl.ZERO;\n    const dstColor: number = this.gl.ONE_MINUS_SRC_COLOR;\n    const srcAlpha: number = this.gl.ZERO;\n    const dstAlpha: number = this.gl.ONE_MINUS_SRC_ALPHA;\n\n    // IBOを作成し、データを転送\n    if (renderer._bufferData.index == null) {\n      renderer._bufferData.index = this.gl.createBuffer();\n    }\n    const indexArray: Uint16Array = model.getDrawableVertexIndices(index);\n\n    this.gl.bindBuffer(\n      this.gl.ELEMENT_ARRAY_BUFFER,\n      renderer._bufferData.index\n    );\n    this.gl.bufferData(\n      this.gl.ELEMENT_ARRAY_BUFFER,\n      indexArray,\n      this.gl.DYNAMIC_DRAW\n    );\n\n    this.gl.blendFuncSeparate(srcColor, dstColor, srcAlpha, dstAlpha);\n  }\n\n  /**\n   * オフスクリーンのレンダリングターゲット用のシェーダープログラムを設定する\n   *\n   * @param renderer レンダラー\n   */\n  public setupShaderProgramForOffscreenRenderTarget(\n    renderer: CubismRenderer_WebGL\n  ): void {\n    if (this._shaderSets.getSize() === 0) {\n      this.generateShaders();\n    }\n\n    if (this._isShaderLoaded == false) {\n      CubismLogWarning('Shader program is not initialized.');\n      return;\n    }\n\n    // この時点のテクスチャはPMAになっているはずなので計算を行う\n    const baseColor = renderer.getModelColor();\n    baseColor.r *= baseColor.a;\n    baseColor.g *= baseColor.a;\n    baseColor.b *= baseColor.a;\n    this.copyTexture(renderer, baseColor);\n  }\n\n  /**\n   * オフスクリーンのレンダリングターゲットの内容をコピーする\n   *\n   * @param renderer レンダラー\n   * @param baseColor ベースカラー\n   */\n  public copyTexture(\n    renderer: CubismRenderer_WebGL,\n    baseColor: CubismTextureColor\n  ) {\n    // Blending\n    const srcColor = this.gl.ONE;\n    const dstColor = this.gl.ONE_MINUS_SRC_ALPHA;\n    const srcAlpha = this.gl.ONE;\n    const dstAlpha = this.gl.ONE_MINUS_SRC_ALPHA;\n\n    const shaderSet = this._shaderSets.at(10); // ShaderNames_Copy = 10\n\n    this.gl.useProgram(shaderSet.shaderProgram);\n\n    this.gl.uniform4f(\n      shaderSet.uniformBaseColorLocation,\n      baseColor.r,\n      baseColor.g,\n      baseColor.b,\n      baseColor.a\n    );\n\n    // オフスクリーンの内容を設定\n    this.gl.activeTexture(this.gl.TEXTURE0);\n    const tex = renderer.getModelRenderTarget(0).getColorBuffer();\n    this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\n    this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\n\n    // 頂点位置属性の設定\n    if (!renderer._bufferData.vertex) {\n      renderer._bufferData.vertex = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.vertex);\n    this.gl.bufferData(\n      this.gl.ARRAY_BUFFER,\n      s_renderTargetVertexArray,\n      this.gl.STATIC_DRAW\n    );\n    this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\n    this.gl.vertexAttribPointer(\n      shaderSet.attributePositionLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      Float32Array.BYTES_PER_ELEMENT * 2,\n      0\n    );\n\n    // テクスチャ座標属性の設定\n    if (!renderer._bufferData.uv) {\n      renderer._bufferData.uv = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.uv);\n    this.gl.bufferData(\n      this.gl.ARRAY_BUFFER,\n      s_renderTargetUvArray,\n      this.gl.STATIC_DRAW\n    );\n    this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\n    this.gl.vertexAttribPointer(\n      shaderSet.attributeTexCoordLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      Float32Array.BYTES_PER_ELEMENT * 2,\n      0\n    );\n\n    this.gl.blendFuncSeparate(srcColor, dstColor, srcAlpha, dstAlpha);\n  }\n\n  /**\n   * シェーダープログラムを解放する\n   */\n  public releaseShaderProgram(): void {\n    for (let i = 0; i < this._shaderSets.getSize(); i++) {\n      this.gl.deleteProgram(this._shaderSets.at(i).shaderProgram);\n      this._shaderSets.at(i).shaderProgram = 0;\n      this._shaderSets.set(i, void 0);\n      this._shaderSets.set(i, null);\n    }\n  }\n\n  /**\n   * シェーダープログラムを初期化する\n   *\n   * @param vertShaderSrc 頂点シェーダのソース\n   * @param fragShaderSrc フラグメントシェーダのソース\n   */\n  public generateShaders(): void {\n    this._isShaderLoaded = false;\n    for (let i = 0; i < this._shaderCount; i++) {\n      this._shaderSets.pushBack(new CubismShaderSet());\n    }\n\n    this._shaderSets.at(0).shaderProgram = this.loadShaderProgram(\n      vertexShaderSrcSetupMask,\n      fragmentShaderSrcsetupMask\n    );\n\n    this._shaderSets.at(1).shaderProgram = this.loadShaderProgram(\n      vertexShaderSrc,\n      fragmentShaderSrcPremultipliedAlpha\n    );\n    this._shaderSets.at(2).shaderProgram = this.loadShaderProgram(\n      vertexShaderSrcMasked,\n      fragmentShaderSrcMaskPremultipliedAlpha\n    );\n    this._shaderSets.at(3).shaderProgram = this.loadShaderProgram(\n      vertexShaderSrcMasked,\n      fragmentShaderSrcMaskInvertedPremultipliedAlpha\n    );\n\n    // 加算も通常と同じシェーダーを利用する\n    this._shaderSets.at(4).shaderProgram = this._shaderSets.at(1).shaderProgram;\n    this._shaderSets.at(5).shaderProgram = this._shaderSets.at(2).shaderProgram;\n    this._shaderSets.at(6).shaderProgram = this._shaderSets.at(3).shaderProgram;\n\n    // 乗算も通常と同じシェーダーを利用する\n    this._shaderSets.at(7).shaderProgram = this._shaderSets.at(1).shaderProgram;\n    this._shaderSets.at(8).shaderProgram = this._shaderSets.at(2).shaderProgram;\n    this._shaderSets.at(9).shaderProgram = this._shaderSets.at(3).shaderProgram;\n\n    // SetupMask\n    this._shaderSets.at(0).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(0).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(0).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(0).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(0).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(0).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(0).uniformClipMatrixLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(0).shaderProgram,\n        'u_clipMatrix'\n      );\n    this._shaderSets.at(0).uniformChannelFlagLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(0).shaderProgram,\n        'u_channelFlag'\n      );\n    this._shaderSets.at(0).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(0).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(0).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(0).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(0).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(0).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 通常（PremultipliedAlpha）\n    this._shaderSets.at(1).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(1).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(1).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(1).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(1).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(1).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(1).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(1).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(1).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(1).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(1).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(1).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(1).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(1).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 通常（クリッピング、PremultipliedAlpha）\n    this._shaderSets.at(2).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(2).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(2).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(2).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(2).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(2).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(2).samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets.at(2).shaderProgram,\n      's_texture1'\n    );\n    this._shaderSets.at(2).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(2).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(2).uniformClipMatrixLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(2).shaderProgram,\n        'u_clipMatrix'\n      );\n    this._shaderSets.at(2).uniformChannelFlagLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(2).shaderProgram,\n        'u_channelFlag'\n      );\n    this._shaderSets.at(2).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(2).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(2).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(2).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(2).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(2).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 通常（クリッピング・反転, PremultipliedAlpha）\n    this._shaderSets.at(3).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(3).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(3).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(3).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(3).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(3).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(3).samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets.at(3).shaderProgram,\n      's_texture1'\n    );\n    this._shaderSets.at(3).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(3).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(3).uniformClipMatrixLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(3).shaderProgram,\n        'u_clipMatrix'\n      );\n    this._shaderSets.at(3).uniformChannelFlagLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(3).shaderProgram,\n        'u_channelFlag'\n      );\n    this._shaderSets.at(3).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(3).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(3).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(3).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(3).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(3).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 加算（PremultipliedAlpha）\n    this._shaderSets.at(4).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(4).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(4).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(4).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(4).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(4).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(4).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(4).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(4).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(4).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(4).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(4).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(4).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(4).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 加算（クリッピング、PremultipliedAlpha）\n    this._shaderSets.at(5).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(5).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(5).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(5).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(5).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(5).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(5).samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets.at(5).shaderProgram,\n      's_texture1'\n    );\n    this._shaderSets.at(5).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(5).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(5).uniformClipMatrixLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(5).shaderProgram,\n        'u_clipMatrix'\n      );\n    this._shaderSets.at(5).uniformChannelFlagLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(5).shaderProgram,\n        'u_channelFlag'\n      );\n    this._shaderSets.at(5).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(5).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(5).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(5).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(5).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(5).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 加算（クリッピング・反転、PremultipliedAlpha）\n    this._shaderSets.at(6).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(6).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(6).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(6).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(6).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(6).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(6).samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets.at(6).shaderProgram,\n      's_texture1'\n    );\n    this._shaderSets.at(6).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(6).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(6).uniformClipMatrixLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(6).shaderProgram,\n        'u_clipMatrix'\n      );\n    this._shaderSets.at(6).uniformChannelFlagLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(6).shaderProgram,\n        'u_channelFlag'\n      );\n    this._shaderSets.at(6).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(6).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(6).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(6).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(6).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(6).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 乗算（PremultipliedAlpha）\n    this._shaderSets.at(7).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(7).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(7).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(7).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(7).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(7).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(7).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(7).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(7).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(7).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(7).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(7).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(7).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(7).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 乗算（クリッピング、PremultipliedAlpha）\n    this._shaderSets.at(8).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(8).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(8).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(8).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(8).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(8).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(8).samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets.at(8).shaderProgram,\n      's_texture1'\n    );\n    this._shaderSets.at(8).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(8).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(8).uniformClipMatrixLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(8).shaderProgram,\n        'u_clipMatrix'\n      );\n    this._shaderSets.at(8).uniformChannelFlagLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(8).shaderProgram,\n        'u_channelFlag'\n      );\n    this._shaderSets.at(8).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(8).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(8).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(8).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(8).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(8).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 乗算（クリッピング・反転、PremultipliedAlpha）\n    this._shaderSets.at(9).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(9).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(9).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(9).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(9).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(9).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(9).samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets.at(9).shaderProgram,\n      's_texture1'\n    );\n    this._shaderSets.at(9).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(9).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(9).uniformClipMatrixLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(9).shaderProgram,\n        'u_clipMatrix'\n      );\n    this._shaderSets.at(9).uniformChannelFlagLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(9).shaderProgram,\n        'u_channelFlag'\n      );\n    this._shaderSets.at(9).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(9).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(9).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(9).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(9).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(9).shaderProgram,\n        'u_screenColor'\n      );\n\n    // ブレンドモード用のシェーダーのソースの読み込み\n    this.loadBlendModeShaders()\n      .then(() => {\n        // NOTE: ファイルの読み込みを待つ必要があるためこのようにする\n        this.registerBlendShader();\n        this._isShaderLoaded = true;\n      })\n      .catch(error => {\n        console.error('Failed to load blend mode shaders:', error);\n      });\n  }\n\n  /**\n   * ブレンドモード用のシェーダープログラムを登録する\n   */\n  public registerBlendShader(): void {\n    // コピー用シェーダーの設定\n    const vertShaderSrcCopy = this._vertShaderSrcCopy;\n    const fragShaderSrcCopy = this._fragShaderSrcCopy;\n\n    const copyShaderSet = this._shaderSets.at(10); // ShaderNames.Copy = 10\n    copyShaderSet.shaderProgram = this.loadShaderProgram(\n      vertShaderSrcCopy,\n      fragShaderSrcCopy\n    );\n    copyShaderSet.attributeTexCoordLocation = this.gl.getAttribLocation(\n      copyShaderSet.shaderProgram,\n      'a_texCoord'\n    );\n    copyShaderSet.attributePositionLocation = this.gl.getAttribLocation(\n      copyShaderSet.shaderProgram,\n      'a_position'\n    );\n    copyShaderSet.uniformBaseColorLocation = this.gl.getUniformLocation(\n      copyShaderSet.shaderProgram,\n      'u_baseColor'\n    );\n\n    let shaderSetIndex = 11;\n    // ブレンドモード用シェーダーの設定\n    for (\n      let colorBlendIndex = 0;\n      colorBlendIndex < this._colorBlendValues.getSize();\n      colorBlendIndex++\n    ) {\n      // NONEと後方互換はスキップ\n      if (\n        this._colorBlendValues.at(colorBlendIndex) ==\n          CubismColorBlend.ColorBlend_None ||\n        this._colorBlendValues.at(colorBlendIndex) ==\n          CubismColorBlend.ColorBlend_AddCompatible ||\n        this._colorBlendValues.at(colorBlendIndex) ==\n          CubismColorBlend.ColorBlend_MultiplyCompatible\n      ) {\n        continue;\n      }\n\n      // カラーブレンド用のマクロ\n      const colorBlendValue = this._colorBlendValues.at(colorBlendIndex);\n      const colorBlendName = this._colorBlendMap\n        .getValue(colorBlendValue)\n        .toUpperCase();\n      const colorBlendMacro = `#define COLOR_BLEND_${colorBlendName}\\n`;\n\n      for (\n        let alphablendIndex = 0;\n        alphablendIndex < this._alphaBlendValues.getSize();\n        alphablendIndex++\n      ) {\n        // NONEと、カラーブレンド「Normal」かつアルファブレンド「Over」はスキップ\n        if (\n          this._alphaBlendValues.at(alphablendIndex) ==\n            CubismAlphaBlend.AlphaBlend_None ||\n          (this._colorBlendValues.at(colorBlendIndex) ==\n            CubismColorBlend.ColorBlend_Normal &&\n            this._alphaBlendValues.at(alphablendIndex) ==\n              CubismAlphaBlend.AlphaBlend_Over)\n        ) {\n          continue;\n        }\n\n        // アルファブレンド用のマクロ\n        const alphaBlendValue = this._alphaBlendValues.at(alphablendIndex);\n        const alphaBlendName = this._alphaBlendMap\n          .getValue(alphaBlendValue)\n          .toUpperCase();\n        const alphaBlendMacro = `#define ALPHA_BLEND_${alphaBlendName}\\n`;\n\n        // シェーダーのソースを生成\n        this.generateBlendShader(\n          colorBlendMacro,\n          alphaBlendMacro,\n          shaderSetIndex\n        );\n\n        this._blendShaderSetMap.setValue(\n          this._colorBlendMap.getValue(\n            this._colorBlendValues.at(colorBlendIndex)\n          ) +\n            this._alphaBlendMap.getValue(\n              this._alphaBlendValues.at(alphablendIndex)\n            ),\n          shaderSetIndex\n        );\n\n        // 1つの組み合わせが終わるこのタイミングでシェーダーのインデックスを更新\n        shaderSetIndex += ShaderType.ShaderType_Count;\n      }\n    }\n  }\n\n  /**\n   * ブレンドモード用のシェーダープログラムを生成する\n   *\n   * @param colorBlendMacro カラーブレンド用のマクロ\n   * @param alphaBlendMacro アルファブレンド用のマクロ\n   * @param shaderSetBaseIndex _shaderSets のインデックス\n   */\n  private generateBlendShader(\n    colorBlendMacro: string,\n    alphaBlendMacro: string,\n    shaderSetBaseIndex: number\n  ): void {\n    for (\n      let shaderTypeIndex: ShaderType = 0;\n      shaderTypeIndex < ShaderType.ShaderType_Count;\n      shaderTypeIndex++\n    ) {\n      // ループごとにシェーダーのソースを初期化\n      let vertexShaderSrc: string = '';\n      let fragmentShaderStr: string = 'precision mediump float;\\n';\n\n      // シェーダの種類が変わるたびにインデックスを変更\n      const shaderSetIndex = shaderSetBaseIndex + shaderTypeIndex;\n\n      // マクロの定義\n      fragmentShaderStr += colorBlendMacro;\n      fragmentShaderStr += alphaBlendMacro;\n\n      // ブレンドモードの種類に応じたマクロの定義\n      fragmentShaderStr += this._fragShaderSrcColorBlend;\n      fragmentShaderStr += this._fragShaderSrcAlphaBlend;\n\n      // シェーダの種類に応じたマクロの定義\n      if (\n        shaderTypeIndex == ShaderType.ShaderType_Masked ||\n        shaderTypeIndex == ShaderType.ShaderType_MaskedInverted\n      ) {\n        const clippingMaskMacro = '#define CLIPPING_MASK\\n';\n        vertexShaderSrc += clippingMaskMacro;\n        fragmentShaderStr += clippingMaskMacro;\n      }\n\n      // シェーダの本体のソースをファイルから読み込み\n      vertexShaderSrc += this._vertShaderSrcBlend;\n      fragmentShaderStr += this._fragShaderSrcBlend;\n\n      // シェーダープログラムの生成\n      this._shaderSets.at(shaderSetIndex).shaderProgram =\n        this.loadShaderProgram(vertexShaderSrc, fragmentShaderStr);\n\n      // シェーダープログラムへの変数のリンク\n      this._shaderSets.at(shaderSetIndex).attributePositionLocation =\n        this.gl.getAttribLocation(\n          this._shaderSets.at(shaderSetIndex).shaderProgram,\n          'a_position'\n        );\n      this._shaderSets.at(shaderSetIndex).attributeTexCoordLocation =\n        this.gl.getAttribLocation(\n          this._shaderSets.at(shaderSetIndex).shaderProgram,\n          'a_texCoord'\n        );\n      this._shaderSets.at(shaderSetIndex).samplerTexture0Location =\n        this.gl.getUniformLocation(\n          this._shaderSets.at(shaderSetIndex).shaderProgram,\n          's_texture0'\n        );\n      this._shaderSets.at(shaderSetIndex).uniformMatrixLocation =\n        this.gl.getUniformLocation(\n          this._shaderSets.at(shaderSetIndex).shaderProgram,\n          'u_matrix'\n        );\n      this._shaderSets.at(shaderSetIndex).uniformBaseColorLocation =\n        this.gl.getUniformLocation(\n          this._shaderSets.at(shaderSetIndex).shaderProgram,\n          'u_baseColor'\n        );\n      this._shaderSets.at(shaderSetIndex).uniformMultiplyColorLocation =\n        this.gl.getUniformLocation(\n          this._shaderSets.at(shaderSetIndex).shaderProgram,\n          'u_multiplyColor'\n        );\n      this._shaderSets.at(shaderSetIndex).uniformScreenColorLocation =\n        this.gl.getUniformLocation(\n          this._shaderSets.at(shaderSetIndex).shaderProgram,\n          'u_screenColor'\n        );\n\n      // ブレンドモード用のテクスチャ\n      this._shaderSets.at(shaderSetIndex).samplerFrameBufferTextureLocation =\n        this.gl.getUniformLocation(\n          this._shaderSets.at(shaderSetIndex).shaderProgram,\n          's_blendTexture'\n        );\n\n      // クリップ対象の場合\n      if (\n        shaderTypeIndex == ShaderType.ShaderType_Masked ||\n        shaderTypeIndex == ShaderType.ShaderType_MaskedInverted\n      ) {\n        // マスク用テクスチャ\n        this._shaderSets.at(shaderSetIndex).samplerTexture1Location =\n          this.gl.getUniformLocation(\n            this._shaderSets.at(shaderSetIndex).shaderProgram,\n            's_texture1'\n          );\n\n        // クリップ用の行列\n        this._shaderSets.at(shaderSetIndex).uniformClipMatrixLocation =\n          this.gl.getUniformLocation(\n            this._shaderSets.at(shaderSetIndex).shaderProgram,\n            'u_clipMatrix'\n          );\n\n        // チャンネルフラグ\n        this._shaderSets.at(shaderSetIndex).uniformChannelFlagLocation =\n          this.gl.getUniformLocation(\n            this._shaderSets.at(shaderSetIndex).shaderProgram,\n            'u_channelFlag'\n          );\n\n        // 反転マスク用の値（反転なら 1.0 が代入される）\n        this._shaderSets.at(shaderSetIndex).uniformInvertMaskFlagLocation =\n          this.gl.getUniformLocation(\n            this._shaderSets.at(shaderSetIndex).shaderProgram,\n            'u_invertClippingMask'\n          );\n      }\n    }\n  }\n\n  /**\n   * シェーダプログラムをロードしてアドレスを返す\n   *\n   * @param vertexShaderSource    頂点シェーダのソース\n   * @param fragmentShaderSource  フラグメントシェーダのソース\n   *\n   * @return シェーダプログラムのアドレス\n   */\n  public loadShaderProgram(\n    vertexShaderSource: string,\n    fragmentShaderSource: string\n  ): WebGLProgram {\n    // Create Shader Program\n    let shaderProgram: WebGLProgram = this.gl.createProgram();\n\n    let vertShader = this.compileShaderSource(\n      this.gl.VERTEX_SHADER,\n      vertexShaderSource\n    );\n\n    if (!vertShader) {\n      CubismLogError('Vertex shader compile error!');\n      return 0;\n    }\n\n    let fragShader = this.compileShaderSource(\n      this.gl.FRAGMENT_SHADER,\n      fragmentShaderSource\n    );\n    if (!fragShader) {\n      CubismLogError('Fragment shader compile error!');\n      return 0;\n    }\n\n    // Attach vertex shader to program\n    this.gl.attachShader(shaderProgram, vertShader);\n\n    // Attach fragment shader to program\n    this.gl.attachShader(shaderProgram, fragShader);\n\n    // link program\n    this.gl.linkProgram(shaderProgram);\n    const linkStatus = this.gl.getProgramParameter(\n      shaderProgram,\n      this.gl.LINK_STATUS\n    );\n\n    // リンクに失敗したらシェーダーを削除\n    if (!linkStatus) {\n      CubismLogError('Failed to link program: {0}', shaderProgram);\n\n      this.gl.deleteShader(vertShader);\n      vertShader = 0;\n\n      this.gl.deleteShader(fragShader);\n      fragShader = 0;\n\n      if (shaderProgram) {\n        this.gl.deleteProgram(shaderProgram);\n        shaderProgram = 0;\n      }\n\n      return 0;\n    }\n\n    // Release vertex and fragment shaders.\n    this.gl.deleteShader(vertShader);\n    this.gl.deleteShader(fragShader);\n\n    return shaderProgram;\n  }\n\n  /**\n   * シェーダープログラムをコンパイルする\n   *\n   * @param shaderType シェーダタイプ(Vertex/Fragment)\n   * @param shaderSource シェーダソースコード\n   *\n   * @return コンパイルされたシェーダープログラム\n   */\n  public compileShaderSource(\n    shaderType: GLenum,\n    shaderSource: string\n  ): WebGLProgram {\n    const source: string = shaderSource;\n\n    const shader: WebGLProgram = this.gl.createShader(shaderType);\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader);\n\n    if (!shader) {\n      const log: string = this.gl.getShaderInfoLog(shader);\n      CubismLogError('Shader compile log: {0} ', log);\n    }\n\n    const status: any = this.gl.getShaderParameter(\n      shader,\n      this.gl.COMPILE_STATUS\n    );\n    if (!status) {\n      const log: string = this.gl.getShaderInfoLog(shader);\n      CubismLogError('Shader compile log: {0} ', log);\n      this.gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  }\n\n  /**\n   * WebGLレンダリングコンテキストを設定する\n   *\n   * @param gl WebGLレンダリングコンテキスト\n   */\n  public setGl(gl: WebGLRenderingContext | WebGL2RenderingContext): void {\n    this.gl = gl;\n  }\n\n  _shaderSets: csmVector<CubismShaderSet>; // ロードしたシェーダープログラムを保持する変数\n  gl: WebGLRenderingContext | WebGL2RenderingContext; // webglコンテキスト\n\n  _colorBlendMap: csmMap<CubismColorBlend, string>; // カラーブレンドの値と名称を紐づけする変数\n  _alphaBlendMap: csmMap<CubismAlphaBlend, string>; // アルファブレンドの値と名称を紐づけする変数\n\n  _colorBlendValues: csmVector<CubismColorBlend>; // カラーブレンドの値を保持する変数\n  _alphaBlendValues: csmVector<CubismAlphaBlend>; // アルファブレンドの値を保持する変数\n\n  _blendShaderSetMap: csmMap<string, number>; // ブレンドモード用のシェーダーの名称とインデックスを紐づけする変数\n\n  _shaderCount: number; // シェーダープログラムの数\n\n  _vertShaderSrcCopy: string; // コピー用の頂点シェーダーのソース\n  _fragShaderSrcCopy: string; // コピー用のフラグメントシェーダーのソース\n\n  _fragShaderSrcColorBlend: string; // ブレンドモード用のシェーダーのソース\n  _fragShaderSrcAlphaBlend: string; // アルファブレンド用のシェーダーのソース\n  _vertShaderSrcBlend: string; // 頂点シェーダーのソース\n  _fragShaderSrcBlend: string; // フラグメントシェーダーのソース\n  _isShaderLoaded: boolean; // シェーダーの読み込みが完了したかどうか\n}\n\n/**\n * GLContextごとにCubismShader_WebGLを確保するためのクラス\n * シングルトンなクラスであり、CubismShaderManager_WebGL.getInstanceからアクセスする。\n */\nexport class CubismShaderManager_WebGL {\n  /**\n   * インスタンスを取得する（シングルトン）\n   *\n   * @return インスタンス\n   */\n  public static getInstance(): CubismShaderManager_WebGL {\n    if (s_instance == null) {\n      s_instance = new CubismShaderManager_WebGL();\n    }\n    return s_instance;\n  }\n\n  /**\n   * インスタンスを開放する（シングルトン）\n   */\n  public static deleteInstance(): void {\n    if (s_instance) {\n      s_instance.release();\n      s_instance = null;\n    }\n  }\n\n  /**\n   * Privateなコンストラクタ\n   */\n  private constructor() {\n    this._shaderMap = new csmMap<WebGLRenderingContext, CubismShader_WebGL>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    for (\n      const ite: iterator<WebGLRenderingContext, CubismShader_WebGL> =\n        this._shaderMap.begin();\n      ite.notEqual(this._shaderMap.end());\n      ite.preIncrement()\n    ) {\n      ite.ptr().second.release();\n    }\n    this._shaderMap.clear();\n  }\n\n  /**\n   * GLContextをキーにShaderを取得する\n   *\n   * @param gl glコンテキスト\n   *\n   * @return shaderを返す\n   */\n  public getShader(gl: WebGLRenderingContext): CubismShader_WebGL {\n    return this._shaderMap.getValue(gl);\n  }\n\n  /**\n   * GLContextを登録する\n   *\n   * @param gl glコンテキスト\n   */\n  public setGlContext(gl: WebGLRenderingContext): void {\n    if (!this._shaderMap.isExist(gl)) {\n      const instance = new CubismShader_WebGL();\n      instance.setGl(gl);\n      this._shaderMap.setValue(gl, instance);\n    }\n  }\n\n  /**\n   * GLContextごとのShaderを保持する変数\n   */\n  private _shaderMap: csmMap<WebGLRenderingContext, CubismShader_WebGL>;\n}\n\n/**\n * CubismShader_WebGLのインナークラス\n */\nexport class CubismShaderSet {\n  shaderProgram: WebGLProgram; // シェーダープログラムのアドレス\n  attributePositionLocation: GLuint; // シェーダープログラムに渡す変数のアドレス（Position）\n  attributeTexCoordLocation: GLuint; // シェーダープログラムに渡す変数のアドレス（TexCoord）\n  uniformMatrixLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Matrix）\n  uniformClipMatrixLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（ClipMatrix）\n  samplerTexture0Location: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Texture0）\n  samplerTexture1Location: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Texture1）\n  uniformBaseColorLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（BaseColor）\n  uniformChannelFlagLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（ChannelFlag）\n  uniformMultiplyColorLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（MultiplyColor）\n  uniformScreenColorLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（ScreenColor）\n  samplerFrameBufferTextureLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（BlendTexture）\n  uniformInvertMaskFlagLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（InvertMask）\n}\n\n/**\n * シェーダーの名前を定義する列挙型\n */\nexport enum ShaderNames {\n  // SetupMask\n  ShaderNames_SetupMask,\n\n  // Normal\n  ShaderNames_NormalPremultipliedAlpha,\n  ShaderNames_NormalMaskedPremultipliedAlpha,\n  ShaderNames_NomralMaskedInvertedPremultipliedAlpha,\n\n  // Add\n  ShaderNames_AddPremultipliedAlpha,\n  ShaderNames_AddMaskedPremultipliedAlpha,\n  ShaderNames_AddMaskedPremultipliedAlphaInverted,\n\n  // Mult\n  ShaderNames_MultPremultipliedAlpha,\n  ShaderNames_MultMaskedPremultipliedAlpha,\n  ShaderNames_MultMaskedPremultipliedAlphaInverted,\n\n  // ShaderCount\n  ShaderNames_ShaderCount\n}\n\n/**\n * シェーダーの種類を定義する列挙型\n */\nexport enum ShaderType {\n  ShaderType_Normal = 0,\n  ShaderType_Masked = 1,\n  ShaderType_MaskedInverted = 2,\n  ShaderType_Count\n}\n\nexport const vertexShaderSrcSetupMask =\n  'attribute vec4     a_position;' +\n  'attribute vec2     a_texCoord;' +\n  'varying vec2       v_texCoord;' +\n  'varying vec4       v_myPos;' +\n  'uniform mat4       u_clipMatrix;' +\n  'void main()' +\n  '{' +\n  '   gl_Position = u_clipMatrix * a_position;' +\n  '   v_myPos = u_clipMatrix * a_position;' +\n  '   v_texCoord = a_texCoord;' +\n  '   v_texCoord.y = 1.0 - v_texCoord.y;' +\n  '}';\n\nexport const fragmentShaderSrcsetupMask =\n  'precision mediump float;' +\n  'varying vec2       v_texCoord;' +\n  'varying vec4       v_myPos;' +\n  'uniform vec4       u_baseColor;' +\n  'uniform vec4       u_channelFlag;' +\n  'uniform sampler2D  s_texture0;' +\n  'void main()' +\n  '{' +\n  '   float isInside = ' +\n  '       step(u_baseColor.x, v_myPos.x/v_myPos.w)' +\n  '       * step(u_baseColor.y, v_myPos.y/v_myPos.w)' +\n  '       * step(v_myPos.x/v_myPos.w, u_baseColor.z)' +\n  '       * step(v_myPos.y/v_myPos.w, u_baseColor.w);' +\n  '   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;' +\n  '}';\n\n//----- バーテックスシェーダプログラム -----\n// Normal & Add & Mult 共通\nexport const vertexShaderSrc =\n  'attribute vec4     a_position;' + //v.vertex\n  'attribute vec2     a_texCoord;' + //v.texcoord\n  'varying vec2       v_texCoord;' + //v2f.texcoord\n  'uniform mat4       u_matrix;' +\n  'void main()' +\n  '{' +\n  '   gl_Position = u_matrix * a_position;' +\n  '   v_texCoord = a_texCoord;' +\n  '   v_texCoord.y = 1.0 - v_texCoord.y;' +\n  '}';\n\n// Normal & Add & Mult 共通（クリッピングされたものの描画用）\nexport const vertexShaderSrcMasked =\n  'attribute vec4     a_position;' +\n  'attribute vec2     a_texCoord;' +\n  'varying vec2       v_texCoord;' +\n  'varying vec4       v_clipPos;' +\n  'uniform mat4       u_matrix;' +\n  'uniform mat4       u_clipMatrix;' +\n  'void main()' +\n  '{' +\n  '   gl_Position = u_matrix * a_position;' +\n  '   v_clipPos = u_clipMatrix * a_position;' +\n  '   v_texCoord = a_texCoord;' +\n  '   v_texCoord.y = 1.0 - v_texCoord.y;' +\n  '}';\n\n//----- フラグメントシェーダプログラム -----\n// Normal & Add & Mult 共通 （PremultipliedAlpha）\nexport const fragmentShaderSrcPremultipliedAlpha =\n  'precision mediump float;' +\n  'varying vec2       v_texCoord;' + //v2f.texcoord\n  'uniform vec4       u_baseColor;' +\n  'uniform sampler2D  s_texture0;' + //_MainTex\n  'uniform vec4       u_multiplyColor;' +\n  'uniform vec4       u_screenColor;' +\n  'void main()' +\n  '{' +\n  '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +\n  '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +\n  '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +\n  '   vec4 color = texColor * u_baseColor;' +\n  '   gl_FragColor = vec4(color.rgb, color.a);' +\n  '}';\n\n// Normal （クリッピングされたものの描画用、PremultipliedAlpha兼用）\nexport const fragmentShaderSrcMaskPremultipliedAlpha =\n  'precision mediump float;' +\n  'varying vec2       v_texCoord;' +\n  'varying vec4       v_clipPos;' +\n  'uniform vec4       u_baseColor;' +\n  'uniform vec4       u_channelFlag;' +\n  'uniform sampler2D  s_texture0;' +\n  'uniform sampler2D  s_texture1;' +\n  'uniform vec4       u_multiplyColor;' +\n  'uniform vec4       u_screenColor;' +\n  'void main()' +\n  '{' +\n  '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +\n  '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +\n  '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +\n  '   vec4 col_formask = texColor * u_baseColor;' +\n  '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\n  '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\n  '   col_formask = col_formask * maskVal;' +\n  '   gl_FragColor = col_formask;' +\n  '}';\n\n// Normal & Add & Mult 共通（クリッピングされて反転使用の描画用、PremultipliedAlphaの場合）\nexport const fragmentShaderSrcMaskInvertedPremultipliedAlpha =\n  'precision mediump float;' +\n  'varying vec2      v_texCoord;' +\n  'varying vec4      v_clipPos;' +\n  'uniform sampler2D s_texture0;' +\n  'uniform sampler2D s_texture1;' +\n  'uniform vec4      u_channelFlag;' +\n  'uniform vec4      u_baseColor;' +\n  'uniform vec4      u_multiplyColor;' +\n  'uniform vec4      u_screenColor;' +\n  'void main()' +\n  '{' +\n  '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +\n  '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +\n  '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +\n  '   vec4 col_formask = texColor * u_baseColor;' +\n  '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\n  '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\n  '   col_formask = col_formask * (1.0 - maskVal);' +\n  '   gl_FragColor = col_formask;' +\n  '}';\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismshader_webgl';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismShaderSet = $.CubismShaderSet;\n  export type CubismShaderSet = $.CubismShaderSet;\n  export const CubismShader_WebGL = $.CubismShader_WebGL;\n  export type CubismShader_WebGL = $.CubismShader_WebGL;\n  export const CubismShaderManager_WebGL = $.CubismShaderManager_WebGL;\n  export type CubismShaderManager_WebGL = $.CubismShaderManager_WebGL;\n  export const ShaderNames = $.ShaderNames;\n  export type ShaderNames = $.ShaderNames;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport {\n  CubismModel,\n  NoParentIndex,\n  NoOffscreenIndex\n} from '../model/cubismmodel';\nimport { csmMap } from '../type/csmmap';\nimport { csmRect } from '../type/csmrectf';\nimport { csmVector } from '../type/csmvector';\nimport { CubismLogError } from '../utils/cubismdebug';\nimport { CubismClippingManager } from './cubismclippingmanager';\nimport {\n  CubismClippingContext,\n  CubismRenderer,\n  DrawableObjectType,\n  DrawableSortItem\n} from './cubismrenderer';\nimport { CubismShaderManager_WebGL } from './cubismshader_webgl';\n\nconst s_invalidValue = -1; // 無効な値を表す定数\n/*\n * シェーダをコピーする際に衣装する頂点のインデックス\n */\nconst s_renderTargetIndexArray: Uint16Array = new Uint16Array([\n  0, 1, 2, 2, 1, 3\n]);\n\n/**\n * クリッピングマスクの処理を実行するクラス\n */\nexport class CubismClippingManager_WebGL extends CubismClippingManager<CubismClippingContext_WebGL> {\n  /**\n   * WebGLレンダリングコンテキストを設定する\n   *\n   * @param gl WebGLレンダリングコンテキスト\n   */\n  public setGL(gl: WebGLRenderingContext): void {\n    this.gl = gl;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super(CubismClippingContext_WebGL);\n  }\n\n  /**\n   * クリッピングコンテキストを作成する。モデル描画時に実行する。\n   *\n   * @param model モデルのインスタンス\n   * @param renderer レンダラのインスタンス\n   * @param lastFbo フレームバッファ\n   * @param lastViewport ビューポート\n   * @param drawObjectType 描画オブジェクトのタイプ\n   */\n  public setupClippingContext(\n    model: CubismModel,\n    renderer: CubismRenderer_WebGL,\n    lastFbo: WebGLFramebuffer,\n    lastViewport: number[],\n    drawObjectType: DrawableObjectType\n  ): void {\n    // 全てのクリッピングを用意する\n    // 同じクリップ（複数の場合はまとめて一つのクリップ）を使う場合は1度だけ設定する\n    let usingClipCount = 0;\n    for (\n      let clipIndex = 0;\n      clipIndex < this._clippingContextListForMask.getSize();\n      clipIndex++\n    ) {\n      // 1つのクリッピングマスクに関して\n      const cc: CubismClippingContext_WebGL =\n        this._clippingContextListForMask.at(clipIndex);\n\n      // このクリップを利用する描画オブジェクト群全体を囲む矩形を計算\n      switch (drawObjectType) {\n        case DrawableObjectType.DrawableObjectType_Drawable:\n        default:\n          this.calcClippedDrawableTotalBounds(model, cc);\n          break;\n        case DrawableObjectType.DrawableObjectType_Offscreen:\n          this.calcClippedOffscreenTotalBounds(model, cc);\n          break;\n      }\n\n      if (cc._isUsing) {\n        usingClipCount++; // 使用中としてカウント\n      }\n    }\n\n    if (usingClipCount <= 0) {\n      return;\n    }\n\n    // 生成したFrameBufferと同じサイズでビューポートを設定\n    this.gl.viewport(\n      0,\n      0,\n      this._clippingMaskBufferSize,\n      this._clippingMaskBufferSize\n    );\n\n    // 後の計算のためにインデックスの最初をセット\n    switch (drawObjectType) {\n      case DrawableObjectType.DrawableObjectType_Drawable:\n      default:\n        this._currentMaskBuffer = renderer.getDrawableMaskBuffer(0);\n        break;\n      case DrawableObjectType.DrawableObjectType_Offscreen:\n        this._currentMaskBuffer = renderer.getOffscreenMaskBuffer(0);\n        break;\n    }\n\n    // ---------- マスク描画処理 ----------\n    this._currentMaskBuffer.beginDraw(lastFbo);\n\n    renderer.preDraw(); // バッファをクリアする\n\n    this.setupLayoutBounds(usingClipCount);\n\n    // サイズがレンダーテクスチャの枚数と合わない場合は合わせる\n    if (this._clearedMaskBufferFlags.getSize() != this._renderTextureCount) {\n      this._clearedMaskBufferFlags.clear();\n      this._clearedMaskBufferFlags = new csmVector<boolean>(\n        this._renderTextureCount\n      );\n    }\n\n    // マスクのクリアフラグを毎フレーム開始時に初期化\n    for (\n      let index = 0;\n      index < this._clearedMaskBufferFlags.getSize();\n      index++\n    ) {\n      this._clearedMaskBufferFlags.set(index, false);\n    }\n\n    // 実際にマスクを生成する\n    // 全てのマスクをどのようにレイアウトして描くかを決定し、ClipContext, ClippedDrawContextに記憶する\n    for (\n      let clipIndex = 0;\n      clipIndex < this._clippingContextListForMask.getSize();\n      clipIndex++\n    ) {\n      // --- 実際に1つのマスクを描く ---\n      const clipContext: CubismClippingContext_WebGL =\n        this._clippingContextListForMask.at(clipIndex);\n      const allClipedDrawRect: csmRect = clipContext._allClippedDrawRect; // このマスクを使う、すべての描画オブジェクトの論理座標上の囲み矩形\n      const layoutBoundsOnTex01: csmRect = clipContext._layoutBounds; // この中にマスクを収める\n      const margin = 0.05; // モデル座標上の矩形を、適宜マージンを付けて使う\n      let scaleX = 0;\n      let scaleY = 0;\n\n      // clipContextに設定したレンダーテクスチャをインデックスで取得\n      let maskBuffer: CubismRenderTarget_WebGL;\n      switch (drawObjectType) {\n        case DrawableObjectType.DrawableObjectType_Drawable:\n        default:\n          maskBuffer = renderer.getDrawableMaskBuffer(clipContext._bufferIndex);\n          break;\n        case DrawableObjectType.DrawableObjectType_Offscreen:\n          maskBuffer = renderer.getOffscreenMaskBuffer(\n            clipContext._bufferIndex\n          );\n          break;\n      }\n\n      // 現在のレンダーテクスチャがclipContextのものと異なる場合\n      if (this._currentMaskBuffer != maskBuffer) {\n        this._currentMaskBuffer.endDraw(); // 前のレンダーテクスチャの描画を終了\n        this._currentMaskBuffer = maskBuffer;\n        this._currentMaskBuffer.beginDraw(lastFbo); // 新しいレンダーテクスチャの描画を開始\n\n        renderer.preDraw(); // バッファをクリアする\n      }\n\n      this._tmpBoundsOnModel.setRect(allClipedDrawRect);\n      this._tmpBoundsOnModel.expand(\n        allClipedDrawRect.width * margin,\n        allClipedDrawRect.height * margin\n      );\n      //########## 本来は割り当てられた領域の全体を使わず必要最低限のサイズがよい\n\n      // シェーダ用の計算式を求める。回転を考慮しない場合は以下のとおり\n      // movePeriod' = movePeriod * scaleX + offX\t\t  [[ movePeriod' = (movePeriod - tmpBoundsOnModel.movePeriod)*scale + layoutBoundsOnTex01.movePeriod ]]\n      scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\n      scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\n\n      //--------- draw時の mask 参照用行列を計算---------\n      this.createMatrixForMask(false, layoutBoundsOnTex01, scaleX, scaleY);\n\n      clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\n      clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\n\n      if (drawObjectType == DrawableObjectType.DrawableObjectType_Offscreen) {\n        // clipContext * mvp^-1\n        const invertMvp = renderer.getMvpMatrix().getInvert();\n        clipContext._matrixForDraw.multiplyByMatrix(invertMvp);\n      }\n\n      const clipDrawCount: number = clipContext._clippingIdCount;\n      for (let i = 0; i < clipDrawCount; i++) {\n        const clipDrawIndex: number = clipContext._clippingIdList[i];\n\n        // 頂点情報が更新されておらず、信頼性がない場合は描画をパスする\n        if (\n          !model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)\n        ) {\n          continue;\n        }\n\n        renderer.setIsCulling(model.getDrawableCulling(clipDrawIndex) != false);\n\n        // マスクがクリアされていないなら処理する\n        if (!this._clearedMaskBufferFlags.at(clipContext._bufferIndex)) {\n          // マスクをクリアする\n          // (仮仕様) 1が無効（描かれない）領域、0が有効（描かれる）領域。（シェーダーCd*Csで0に近い値をかけてマスクを作る。1をかけると何も起こらない）\n          this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n          this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n          this._clearedMaskBufferFlags.set(clipContext._bufferIndex, true);\n        }\n\n        // 今回専用の変換を適用して描く\n        // チャンネルも切り替える必要がある(A,R,G,B)\n        renderer.setClippingContextBufferForMask(clipContext);\n\n        renderer.drawMeshWebGL(model, clipDrawIndex);\n      }\n    }\n\n    // --- 後処理 ---\n    this._currentMaskBuffer.endDraw(); // マスクの描画を終了\n    renderer.setClippingContextBufferForMask(null);\n\n    this.gl.viewport(\n      lastViewport[0],\n      lastViewport[1],\n      lastViewport[2],\n      lastViewport[3]\n    );\n  }\n\n  /**\n   * マスクの合計数をカウント\n   *\n   * @return マスクの合計数を返す\n   */\n  public getClippingMaskCount(): number {\n    return this._clippingContextListForMask.getSize();\n  }\n\n  _currentMaskBuffer: CubismRenderTarget_WebGL; // マスク用オフスクリーンサーフェス\n\n  gl: WebGLRenderingContext; // WebGLレンダリングコンテキスト\n}\n\n/**\n * クリッピングマスクのコンテキスト\n */\nexport class CubismClippingContext_WebGL extends CubismClippingContext {\n  /**\n   * 引数付きコンストラクタ\n   *\n   * @param manager マスクを管理しているマネージャのインスタンス\n   * @param clippingDrawableIndices クリップしているDrawableのインデックスリスト\n   * @param clipCount クリップしているDrawableの個数\n   */\n  public constructor(\n    manager: CubismClippingManager_WebGL,\n    clippingDrawableIndices: Int32Array,\n    clipCount: number\n  ) {\n    super(clippingDrawableIndices, clipCount);\n    this._owner = manager;\n  }\n\n  /**\n   * このマスクを管理するマネージャのインスタンスを取得する\n   *\n   * @return クリッピングマネージャのインスタンス\n   */\n  public getClippingManager(): CubismClippingManager_WebGL {\n    return this._owner;\n  }\n\n  /**\n   * WebGLレンダリングコンテキストを設定する\n   *\n   * @param gl WebGLレンダリングコンテキスト\n   */\n  public setGl(gl: WebGLRenderingContext): void {\n    this._owner.setGL(gl);\n  }\n\n  private _owner: CubismClippingManager_WebGL; // このマスクを管理しているマネージャのインスタンス\n}\n\n/**\n * Cubismモデルを描画する直前のWebGLのステートを保持・復帰させるクラス\n */\nexport class CubismRendererProfile_WebGL {\n  /**\n   * WebGLの有効・無効をセットする\n   *\n   * @param index 有効・無効にする機能\n   * @param enabled trueなら有効にする\n   */\n  private setGlEnable(index: GLenum, enabled: GLboolean): void {\n    if (enabled) this.gl.enable(index);\n    else this.gl.disable(index);\n  }\n\n  /**\n   * WebGLのVertex Attribute Array機能の有効・無効をセットする\n   *\n   * @param   index   有効・無効にする機能\n   * @param   enabled trueなら有効にする\n   */\n  private setGlEnableVertexAttribArray(\n    index: GLuint,\n    enabled: GLboolean\n  ): void {\n    if (enabled) this.gl.enableVertexAttribArray(index);\n    else this.gl.disableVertexAttribArray(index);\n  }\n\n  /**\n   * WebGLのステートを保持する\n   */\n  public save(): void {\n    if (this.gl == null) {\n      CubismLogError(\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\n      );\n      return;\n    }\n    //-- push state --\n    this._lastArrayBufferBinding = this.gl.getParameter(\n      this.gl.ARRAY_BUFFER_BINDING\n    );\n    this._lastElementArrayBufferBinding = this.gl.getParameter(\n      this.gl.ELEMENT_ARRAY_BUFFER_BINDING\n    );\n    this._lastProgram = this.gl.getParameter(this.gl.CURRENT_PROGRAM);\n\n    this._lastActiveTexture = this.gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    this.gl.activeTexture(this.gl.TEXTURE1); //テクスチャユニット1をアクティブに（以後の設定対象とする）\n    this._lastTexture1Binding2D = this.gl.getParameter(\n      this.gl.TEXTURE_BINDING_2D\n    );\n\n    this.gl.activeTexture(this.gl.TEXTURE0); //テクスチャユニット0をアクティブに（以後の設定対象とする）\n    this._lastTexture0Binding2D = this.gl.getParameter(\n      this.gl.TEXTURE_BINDING_2D\n    );\n\n    this._lastVertexAttribArrayEnabled[0] = this.gl.getVertexAttrib(\n      0,\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\n    );\n    this._lastVertexAttribArrayEnabled[1] = this.gl.getVertexAttrib(\n      1,\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\n    );\n    this._lastVertexAttribArrayEnabled[2] = this.gl.getVertexAttrib(\n      2,\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\n    );\n    this._lastVertexAttribArrayEnabled[3] = this.gl.getVertexAttrib(\n      3,\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\n    );\n\n    this._lastScissorTest = this.gl.isEnabled(this.gl.SCISSOR_TEST);\n    this._lastStencilTest = this.gl.isEnabled(this.gl.STENCIL_TEST);\n    this._lastDepthTest = this.gl.isEnabled(this.gl.DEPTH_TEST);\n    this._lastCullFace = this.gl.isEnabled(this.gl.CULL_FACE);\n    this._lastBlend = this.gl.isEnabled(this.gl.BLEND);\n\n    this._lastFrontFace = this.gl.getParameter(this.gl.FRONT_FACE);\n\n    this._lastColorMask = this.gl.getParameter(this.gl.COLOR_WRITEMASK);\n\n    // backup blending\n    this._lastBlending[0] = this.gl.getParameter(this.gl.BLEND_SRC_RGB);\n    this._lastBlending[1] = this.gl.getParameter(this.gl.BLEND_DST_RGB);\n    this._lastBlending[2] = this.gl.getParameter(this.gl.BLEND_SRC_ALPHA);\n    this._lastBlending[3] = this.gl.getParameter(this.gl.BLEND_DST_ALPHA);\n  }\n\n  /**\n   * 保持したWebGLのステートを復帰させる\n   */\n  public restore(): void {\n    if (this.gl == null) {\n      CubismLogError(\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\n      );\n      return;\n    }\n    this.gl.useProgram(this._lastProgram);\n\n    this.setGlEnableVertexAttribArray(0, this._lastVertexAttribArrayEnabled[0]);\n    this.setGlEnableVertexAttribArray(1, this._lastVertexAttribArrayEnabled[1]);\n    this.setGlEnableVertexAttribArray(2, this._lastVertexAttribArrayEnabled[2]);\n    this.setGlEnableVertexAttribArray(3, this._lastVertexAttribArrayEnabled[3]);\n\n    this.setGlEnable(this.gl.SCISSOR_TEST, this._lastScissorTest);\n    this.setGlEnable(this.gl.STENCIL_TEST, this._lastStencilTest);\n    this.setGlEnable(this.gl.DEPTH_TEST, this._lastDepthTest);\n    this.setGlEnable(this.gl.CULL_FACE, this._lastCullFace);\n    this.setGlEnable(this.gl.BLEND, this._lastBlend);\n\n    this.gl.frontFace(this._lastFrontFace);\n\n    this.gl.colorMask(\n      this._lastColorMask[0],\n      this._lastColorMask[1],\n      this._lastColorMask[2],\n      this._lastColorMask[3]\n    );\n\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this._lastArrayBufferBinding); //前にバッファがバインドされていたら破棄する必要がある\n    this.gl.bindBuffer(\n      this.gl.ELEMENT_ARRAY_BUFFER,\n      this._lastElementArrayBufferBinding\n    );\n\n    this.gl.activeTexture(this.gl.TEXTURE1); //テクスチャユニット1を復元\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this._lastTexture1Binding2D);\n\n    this.gl.activeTexture(this.gl.TEXTURE0); //テクスチャユニット0を復元\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this._lastTexture0Binding2D);\n\n    this.gl.activeTexture(this._lastActiveTexture);\n\n    this.gl.blendFuncSeparate(\n      this._lastBlending[0],\n      this._lastBlending[1],\n      this._lastBlending[2],\n      this._lastBlending[3]\n    );\n  }\n\n  /**\n   * WebGLレンダリングコンテキストを設定する\n   *\n   * @param gl WebGLレンダリングコンテキスト\n   */\n  public setGl(gl: WebGLRenderingContext): void {\n    this.gl = gl;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._lastVertexAttribArrayEnabled = new Array<GLboolean>(4);\n    this._lastColorMask = new Array<GLboolean>(4);\n    this._lastBlending = new Array<GLint>(4);\n  }\n\n  private _lastArrayBufferBinding: GLint; ///< モデル描画直前の頂点バッファ\n  private _lastElementArrayBufferBinding: GLint; ///< モデル描画直前のElementバッファ\n  private _lastProgram: GLint; ///< モデル描画直前のシェーダプログラムバッファ\n  private _lastActiveTexture: GLint; ///< モデル描画直前のアクティブなテクスチャ\n  private _lastTexture0Binding2D: GLint; ///< モデル描画直前のテクスチャユニット0\n  private _lastTexture1Binding2D: GLint; ///< モデル描画直前のテクスチャユニット1\n  private _lastVertexAttribArrayEnabled: GLboolean[]; ///< モデル描画直前のテクスチャユニット1\n  private _lastScissorTest: GLboolean; ///< モデル描画直前のGL_VERTEX_ATTRIB_ARRAY_ENABLEDパラメータ\n  private _lastBlend: GLboolean; ///< モデル描画直前のGL_SCISSOR_TESTパラメータ\n  private _lastStencilTest: GLboolean; ///< モデル描画直前のGL_STENCIL_TESTパラメータ\n  private _lastDepthTest: GLboolean; ///< モデル描画直前のGL_DEPTH_TESTパラメータ\n  private _lastCullFace: GLboolean; ///< モデル描画直前のGL_CULL_FACEパラメータ\n  private _lastFrontFace: GLint; ///< モデル描画直前のGL_CULL_FACEパラメータ\n  private _lastColorMask: GLboolean[]; ///< モデル描画直前のGL_COLOR_WRITEMASKパラメータ\n  private _lastBlending: GLint[]; ///< モデル描画直前のカラーブレンディングパラメータ\n\n  gl: WebGLRenderingContext;\n}\n\n/**\n * WebGL用の描画命令を実装したクラス\n */\nexport class CubismRenderer_WebGL extends CubismRenderer {\n  /**\n   * レンダラの初期化処理を実行する\n   * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\n   * NOTE: WebGLコンテキストが初期化されていない可能性があるため、ここではWebGLコンテキストを使う初期化は行わない。\n   *\n   * @param model モデルのインスタンス\n   * @param maskBufferCount バッファの生成数\n   */\n  public initialize(model: CubismModel, maskBufferCount = 1): void {\n    if (model.isUsingMasking()) {\n      this._drawableClippingManager = new CubismClippingManager_WebGL(); // クリッピングマスク・バッファ前処理方式を初期化\n      this._drawableClippingManager.initializeForDrawable(\n        model,\n        maskBufferCount\n      );\n    }\n\n    if (model.isUsingMaskingForOffscreen()) {\n      this._offscreenClippingManager = new CubismClippingManager_WebGL(); //クリッピングマスク・バッファ前処理方式を初期化\n      this._offscreenClippingManager.initializeForOffscreen(\n        model,\n        maskBufferCount\n      );\n    }\n\n    // IndexList と TypeListのサイズをモデルの描画オブジェクト数に合わせる\n    this._sortedObjectsIndexList.resize(\n      model.getDrawableCount() +\n        (model.getOffscreenCount ? model.getOffscreenCount() : 0),\n      0\n    );\n    this._sortedObjectsTypeList.resize(\n      model.getDrawableCount() +\n        (model.getOffscreenCount ? model.getOffscreenCount() : 0),\n      0\n    );\n\n    super.initialize(model); // 親クラスの処理を呼ぶ\n  }\n\n  /**\n   * オフスクリーンの親を探して設定する\n   *\n   * @param model モデルのインスタンス\n   * @param offscreenCount オフスクリーンの数\n   */\n  private setupParentOffscreens(\n    model: CubismModel,\n    offscreenCount: number\n  ): void {\n    let parentOffscreen: CubismRenderTarget_WebGL | null;\n    for (\n      let offscreenIndex = 0;\n      offscreenIndex < offscreenCount;\n      ++offscreenIndex\n    ) {\n      parentOffscreen = null;\n      const ownerIndex = model.getOffscreenOwnerIndices()[offscreenIndex];\n      let parentIndex = model.getPartParentPartIndices()[ownerIndex];\n\n      // 親のオフスクリーンを探す\n      while (parentIndex != NoParentIndex) {\n        for (let i = 0; i < offscreenCount; ++i) {\n          const ownerIndex =\n            model.getOffscreenOwnerIndices()[\n              this._offscreenList.at(i).getOffscreenIndex()\n            ];\n          if (ownerIndex != parentIndex) {\n            continue; //オフスクリーンの所有者がパーツではない場合はスキップ\n          }\n\n          parentOffscreen = this._offscreenList.at(i);\n          break;\n        }\n\n        if (parentOffscreen != null) {\n          break; // 親のオフスクリーンが見つかった場合はループを抜ける\n        }\n\n        parentIndex = model.getPartParentPartIndices()[parentIndex];\n      }\n\n      // 親のオフスクリーンを設定\n      this._offscreenList\n        .at(offscreenIndex)\n        .setParentPartOffscreen(parentOffscreen);\n    }\n  }\n\n  /**\n   * WebGLテクスチャのバインド処理\n   * CubismRendererにテクスチャを設定し、CubismRenderer内でその画像を参照するためのIndex値を戻り値とする\n   *\n   * @param modelTextureNo セットするモデルテクスチャの番号\n   * @param glTextureNo WebGLテクスチャの番号\n   */\n  public bindTexture(modelTextureNo: number, glTexture: WebGLTexture): void {\n    this._textures.setValue(modelTextureNo, glTexture);\n  }\n\n  /**\n   * WebGLにバインドされたテクスチャのリストを取得する\n   *\n   * @return テクスチャのリスト\n   */\n  public getBindedTextures(): csmMap<number, WebGLTexture> {\n    return this._textures;\n  }\n\n  /**\n   * クリッピングマスクバッファのサイズを設定する\n   * マスク用のFrameBufferを破棄、再作成する為処理コストは高い\n   *\n   * @param size クリッピングマスクバッファのサイズ\n   */\n  public setClippingMaskBufferSize(size: number) {\n    // クリッピングマスクを利用しない場合は早期リターン\n    if (!this._model.isUsingMasking()) {\n      return;\n    }\n\n    // インスタンス破棄前にレンダーテクスチャの数を保存\n    const renderTextureCount: number =\n      this._drawableClippingManager.getRenderTextureCount();\n\n    // FrameBufferのサイズを変更するためにインスタンスを破棄・再作成する\n    this._drawableClippingManager.release();\n    this._drawableClippingManager = void 0;\n    this._drawableClippingManager = null;\n\n    this._drawableClippingManager = new CubismClippingManager_WebGL();\n\n    this._drawableClippingManager.setClippingMaskBufferSize(size);\n\n    this._drawableClippingManager.initializeForDrawable(\n      this.getModel(),\n      renderTextureCount // インスタンス破棄前に保存したレンダーテクスチャの数\n    );\n  }\n\n  /**\n   * クリッピングマスクバッファのサイズを取得する\n   *\n   * @return クリッピングマスクバッファのサイズ\n   */\n  public getClippingMaskBufferSize(): number {\n    return this._model.isUsingMasking()\n      ? this._drawableClippingManager.getClippingMaskBufferSize()\n      : s_invalidValue;\n  }\n\n  /**\n   * ブレンドモード用のフレームバッファを取得する\n   *\n   * @return ブレンドモード用のフレームバッファ\n   */\n  public getModelRenderTarget(index: number): CubismRenderTarget_WebGL {\n    return this._modelRenderTargets.at(index);\n  }\n\n  /**\n   * レンダーテクスチャの枚数を取得する\n   * @return レンダーテクスチャの枚数\n   */\n  public getRenderTextureCount(): number {\n    return this._model.isUsingMasking()\n      ? this._drawableClippingManager.getRenderTextureCount()\n      : s_invalidValue;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor(width: number, height: number) {\n    super(width, height);\n    this._clippingContextBufferForMask = null;\n    this._clippingContextBufferForDraw = null;\n    this._rendererProfile = new CubismRendererProfile_WebGL();\n    this._firstDraw = true;\n    this._textures = new csmMap<number, number>();\n    this._sortedObjectsIndexList = new csmVector<number>();\n    this._sortedObjectsTypeList = new csmVector<number>();\n    this._bufferData = {\n      vertex: (WebGLBuffer = null),\n      uv: (WebGLBuffer = null),\n      index: (WebGLBuffer = null)\n    };\n    this._modelRenderTargets = new csmVector<CubismRenderTarget_WebGL>();\n    this._drawableMasks = new csmVector<CubismRenderTarget_WebGL>();\n    this._currentFbo = null;\n    this._drawableClippingManager = null;\n    this._offscreenClippingManager = null;\n    this._offscreenMasks = new csmVector<CubismRenderTarget_WebGL>();\n    this._offscreenList = new csmVector<CubismRenderTarget_WebGL>();\n\n    // テクスチャ対応マップの容量を確保しておく\n    this._textures.prepareCapacity(32, true);\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    if (this._drawableClippingManager) {\n      this._drawableClippingManager.release();\n      this._drawableClippingManager = void 0;\n      this._drawableClippingManager = null;\n    }\n\n    if (this.gl == null) {\n      return;\n    }\n    this.gl.deleteBuffer(this._bufferData.vertex);\n    this._bufferData.vertex = null;\n    this.gl.deleteBuffer(this._bufferData.uv);\n    this._bufferData.uv = null;\n    this.gl.deleteBuffer(this._bufferData.index);\n    this._bufferData.index = null;\n    this._bufferData = null;\n\n    this._textures = null;\n\n    for (let i = 0; i < this._modelRenderTargets.getSize(); i++) {\n      if (\n        this._modelRenderTargets.at(i) != null &&\n        this._modelRenderTargets.at(i).isValid()\n      ) {\n        this._modelRenderTargets.at(i).destroyRenderTarget();\n      }\n    }\n    this._modelRenderTargets.clear();\n    this._modelRenderTargets = null;\n\n    for (let i = 0; i < this._drawableMasks.getSize(); i++) {\n      if (\n        this._drawableMasks.at(i) != null &&\n        this._drawableMasks.at(i).isValid()\n      ) {\n        this._drawableMasks.at(i).destroyRenderTarget();\n      }\n    }\n    this._drawableMasks.clear();\n    this._drawableMasks = null;\n\n    for (let i = 0; i < this._offscreenMasks.getSize(); i++) {\n      if (\n        this._offscreenMasks.at(i) != null &&\n        this._offscreenMasks.at(i).isValid()\n      ) {\n        this._offscreenMasks.at(i).destroyRenderTarget();\n      }\n    }\n    this._offscreenMasks.clear();\n    this._offscreenMasks = null;\n\n    for (let i = 0; i < this._offscreenList.getSize(); i++) {\n      if (\n        this._offscreenList.at(i) != null &&\n        this._offscreenList.at(i).isValid()\n      ) {\n        this._offscreenList.at(i).destroyRenderTarget();\n      }\n    }\n    this._offscreenList.clear();\n    this._offscreenList = null;\n\n    this._offscreenClippingManager = null;\n    this._drawableClippingManager = null;\n    this._clippingContextBufferForMask = null;\n    this._clippingContextBufferForDraw = null;\n\n    this._rendererProfile = null;\n    this._sortedObjectsIndexList = null;\n    this._sortedObjectsTypeList = null;\n    this._currentFbo = null;\n    this._model = null;\n    this.gl = null;\n    this._firstDraw = true;\n  }\n\n  /**\n   * モデルを描画する実際の処理\n   */\n  public doDrawModel(): void {\n    if (this.gl == null) {\n      CubismLogError(\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\n      );\n      return;\n    }\n\n    if (\n      CubismShaderManager_WebGL.getInstance()\n        .getShader(this.gl)\n        ._shaderSets.getSize() == 0 ||\n      (this._model.isBlendModeEnabled() &&\n        !CubismShaderManager_WebGL.getInstance().getShader(this.gl)\n          ._isShaderLoaded)\n    ) {\n      CubismShaderManager_WebGL.getInstance()\n        .getShader(this.gl)\n        .generateShaders();\n      return; // シェーダがロードされていない場合は描画しない\n    }\n\n    const lastFbo = this.gl.getParameter(\n      this.gl.FRAMEBUFFER_BINDING\n    ) as WebGLFramebuffer;\n    const lastViewport = this.gl.getParameter(this.gl.VIEWPORT) as number[];\n\n    this.beforeDrawModelRenderTarget();\n\n    // //------------ クリッピングマスク・バッファ前処理方式の場合 ------------\n    if (this._drawableClippingManager != null) {\n      this.preDraw();\n      for (\n        let i = 0;\n        i < this._drawableClippingManager.getRenderTextureCount();\n        ++i\n      ) {\n        if (\n          this._drawableMasks.at(i).getBufferWidth() !=\n            this._drawableClippingManager.getClippingMaskBufferSize() ||\n          this._drawableMasks.at(i).getBufferHeight() !=\n            this._drawableClippingManager.getClippingMaskBufferSize()\n        ) {\n          // クリッピングマスクのサイズが変更された場合は、オフスクリーンサーフェスを再作成する\n          this._drawableMasks\n            .at(i)\n            .createOffscreenRenderTarget(\n              this.gl,\n              this._drawableClippingManager.getClippingMaskBufferSize(),\n              this._drawableClippingManager.getClippingMaskBufferSize(),\n              lastFbo\n            );\n        }\n      }\n\n      if (this.isUsingHighPrecisionMask()) {\n        this._drawableClippingManager.setupMatrixForHighPrecision(\n          this.getModel(),\n          false\n        );\n      } else {\n        this._drawableClippingManager.setupClippingContext(\n          this.getModel(),\n          this,\n          lastFbo,\n          lastViewport,\n          DrawableObjectType.DrawableObjectType_Drawable\n        );\n      }\n    }\n\n    if (this._offscreenClippingManager != null) {\n      this.preDraw();\n\n      // サイズが違う場合はここで作成しなおし\n      for (\n        let i = 0;\n        i < this._offscreenClippingManager.getRenderTextureCount();\n        ++i\n      ) {\n        if (\n          this._offscreenMasks.at(i).getBufferWidth() !=\n            this._offscreenClippingManager.getClippingMaskBufferSize() ||\n          this._offscreenMasks.at(i).getBufferHeight() !=\n            this._offscreenClippingManager.getClippingMaskBufferSize()\n        ) {\n          this._offscreenMasks\n            .at(i)\n            .createOffscreenRenderTarget(\n              this.gl,\n              this._offscreenClippingManager.getClippingMaskBufferSize(),\n              this._offscreenClippingManager.getClippingMaskBufferSize(),\n              lastFbo\n            );\n        }\n      }\n\n      if (this.isUsingHighPrecisionMask()) {\n        this._offscreenClippingManager.setupMatrixForOffscreenHighPrecision(\n          this.getModel(),\n          false,\n          this.getMvpMatrix()\n        );\n      } else {\n        this._offscreenClippingManager.setupClippingContext(\n          this.getModel(),\n          this,\n          lastFbo,\n          lastViewport,\n          DrawableObjectType.DrawableObjectType_Offscreen\n        );\n      }\n    }\n\n    // 上記クリッピング処理内でも一度PreDrawを呼ぶので注意!!\n    this.preDraw();\n\n    this.drawObjectLoop(lastFbo);\n\n    this.afterDrawModelRenderTarget();\n  }\n\n  /**\n   * 描画オブジェクトのループ処理を行う。\n   *\n   * @param lastFbo 前回のフレームバッファ\n   */\n  public drawObjectLoop(lastFbo: WebGLFramebuffer): void {\n    const model = this.getModel();\n    const drawableCount = model.getDrawableCount();\n    const offscreenCount = model.getOffscreenCount();\n    const totalCount = drawableCount + offscreenCount;\n    const renderOrder = model.getRenderOrders();\n\n    this._currentOffscreen = null; // 現在のオフスクリーンを初期化\n    this._currentFbo = lastFbo;\n    this._modelRootFbo = lastFbo;\n\n    // インデックスを描画順でソート\n    for (let i = 0; i < totalCount; ++i) {\n      const order = renderOrder[i];\n\n      if (i < drawableCount) {\n        this._sortedObjectsIndexList.set(order, i);\n        this._sortedObjectsTypeList.set(\n          order,\n          DrawableObjectType.DrawableObjectType_Drawable\n        );\n      } else if (i < totalCount) {\n        this._sortedObjectsIndexList.set(order, i - drawableCount);\n        this._sortedObjectsTypeList.set(\n          order,\n          DrawableObjectType.DrawableObjectType_Offscreen\n        );\n      }\n    }\n\n    // 描画\n    for (let i = 0; i < totalCount; ++i) {\n      const objectIndex = this._sortedObjectsIndexList.at(i);\n      const objectType = this._sortedObjectsTypeList.at(i);\n\n      this.renderObject(objectIndex, objectType);\n    }\n\n    while (this._currentOffscreen != null) {\n      // オフスクリーンが残っている場合は親オフスクリーンへの伝搬を行う\n      this.submitDrawToParentOffscreen(\n        this._currentOffscreen.getOffscreenIndex(),\n        DrawableObjectType.DrawableObjectType_Offscreen\n      );\n    }\n  }\n\n  /**\n   * 描画オブジェクトを描画する。\n   *\n   * @param objectIndex 描画対象のオブジェクトのインデックス\n   * @param objectType 描画対象のオブジェクトのタイプ\n   * @param lastFbo 前回のフレームバッファ\n   * @param lastViewport 前回のビューポート\n   */\n  protected renderObject(\n    objectIndex: number,\n    objectType: DrawableObjectType\n  ): void {\n    switch (objectType) {\n      case DrawableObjectType.DrawableObjectType_Drawable:\n        this.drawDrawable(objectIndex, this._modelRootFbo);\n        break;\n      case DrawableObjectType.DrawableObjectType_Offscreen:\n        this.addOffscreen(objectIndex);\n        break;\n      default:\n        CubismLogError('Unknown object type: ' + objectType);\n        break;\n    }\n  }\n\n  /**\n   * 描画オブジェクト（アートメッシュ）を描画する。\n   *\n   * @param model 描画対象のモデル\n   * @param index 描画対象のメッシュのインデックス\n   */\n  public drawDrawable(drawableIndex: number, rootFbo: WebGLFramebuffer): void {\n    // Drawableが表示状態でなければ処理をパスする\n    if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {\n      return;\n    }\n\n    this.submitDrawToParentOffscreen(\n      drawableIndex,\n      DrawableObjectType.DrawableObjectType_Drawable\n    );\n\n    const clipContext =\n      this._drawableClippingManager != null\n        ? this._drawableClippingManager\n            .getClippingContextListForDraw()\n            .at(drawableIndex)\n        : null;\n\n    if (clipContext != null && this.isUsingHighPrecisionMask()) {\n      // 描くことになっていた\n      if (clipContext._isUsing) {\n        // 生成したFrameBufferと同じサイズでビューポートを設定\n        this.gl.viewport(\n          0,\n          0,\n          this._drawableClippingManager.getClippingMaskBufferSize(),\n          this._drawableClippingManager.getClippingMaskBufferSize()\n        );\n\n        this.preDraw(); // バッファをクリアする\n\n        // ---------- マスク描画処理 ----------\n        // マスク用RenderTextureをactiveにセット\n        this.getDrawableMaskBuffer(clipContext._bufferIndex).beginDraw(\n          this._currentFbo\n        );\n\n        // マスクをクリアする\n        // (仮仕様) 1が無効（描かれない）領域、0が有効（描かれる）領域。（シェーダーCd*Csで0に近い値をかけてマスクを作る。1をかけると何も起こらない）\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n      }\n\n      {\n        const clipDrawCount: number = clipContext._clippingIdCount;\n\n        for (let index = 0; index < clipDrawCount; index++) {\n          const clipDrawIndex: number = clipContext._clippingIdList[index];\n\n          // 頂点情報が更新されておらず、信頼性がない場合は描画をパスする\n          if (\n            !this._model.getDrawableDynamicFlagVertexPositionsDidChange(\n              clipDrawIndex\n            )\n          ) {\n            continue;\n          }\n\n          this.setIsCulling(\n            this._model.getDrawableCulling(clipDrawIndex) != false\n          );\n\n          // 今回専用の変換を適用して描く\n          // チャンネルも切り替える必要がある(A,R,G,B)\n          this.setClippingContextBufferForMask(clipContext);\n\n          this.drawMeshWebGL(this._model, clipDrawIndex);\n        }\n\n        // --- 後処理 ---\n        this.getDrawableMaskBuffer(clipContext._bufferIndex).endDraw();\n        this.setClippingContextBufferForMask(null);\n\n        this.gl.viewport(\n          0,\n          0,\n          this._modelRenderTargetWidth,\n          this._modelRenderTargetHeight\n        );\n\n        this.preDraw(); // バッファをクリアする\n      }\n    }\n\n    // クリッピングマスクをセットする\n    this.setClippingContextBufferForDrawable(clipContext);\n\n    this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));\n\n    this.drawMeshWebGL(this._model, drawableIndex);\n  }\n\n  /**\n   * 描画オブジェクト（アートメッシュ）を描画する。\n   *\n   * @param model 描画対象のモデル\n   * @param index 描画対象のメッシュのインデックス\n   */\n  public drawMeshWebGL(model: Readonly<CubismModel>, index: number): void {\n    // 裏面描画の有効・無効\n    if (this.isCulling()) {\n      this.gl.enable(this.gl.CULL_FACE);\n    } else {\n      this.gl.disable(this.gl.CULL_FACE);\n    }\n\n    this.gl.frontFace(this.gl.CCW); // Cubism SDK OpenGLはマスク・アートメッシュ共にCCWが表面\n\n    if (this.isGeneratingMask()) {\n      CubismShaderManager_WebGL.getInstance()\n        .getShader(this.gl)\n        .setupShaderProgramForMask(this, model, index);\n    } else {\n      CubismShaderManager_WebGL.getInstance()\n        .getShader(this.gl)\n        .setupShaderProgramForDrawable(this, model, index);\n    }\n\n    if (\n      !this._model.isBlendModeEnabled() &&\n      !CubismShaderManager_WebGL.getInstance().getShader(this.gl)\n        ._isShaderLoaded\n    ) {\n      // シェーダーがロードされていない場合は描画を行わない\n      // NOTE: Cubism 5.2 以前のモデル描画時にのみ、マスク無しのモデルが描画されてしまうためここで早期リターン\n      return;\n    }\n\n    {\n      const indexCount: number = model.getDrawableVertexIndexCount(index);\n      this.gl.drawElements(\n        this.gl.TRIANGLES,\n        indexCount,\n        this.gl.UNSIGNED_SHORT,\n        0\n      );\n    }\n\n    // 後処理\n    this.gl.useProgram(null);\n    this.setClippingContextBufferForDrawable(null);\n    this.setClippingContextBufferForMask(null);\n  }\n\n  /**\n   * オフスクリーンを親のオフスクリーンにコピーする。\n   *\n   * @param objectIndex オブジェクトのインデックス\n   * @param objectType  オブジェクトの種類\n   */\n  submitDrawToParentOffscreen(\n    objectIndex: number,\n    objectType: DrawableObjectType\n  ): void {\n    if (this._currentOffscreen == null || objectIndex == s_invalidValue) {\n      return;\n    }\n\n    const currentOwnerIndex =\n      this.getModel().getOffscreenOwnerIndices()[\n        this._currentOffscreen.getOffscreenIndex()\n      ];\n\n    // オーナーが不明な場合は処理を終了\n    if (currentOwnerIndex == s_invalidValue) {\n      return;\n    }\n\n    let targetParentIndex = NoParentIndex;\n\n    switch (objectType) {\n      case DrawableObjectType.DrawableObjectType_Drawable:\n        targetParentIndex =\n          this.getModel().getDrawableParentPartIndex(objectIndex);\n        break;\n      case DrawableObjectType.DrawableObjectType_Offscreen:\n        targetParentIndex =\n          this.getModel().getPartParentPartIndices()[\n            this.getModel().getOffscreenOwnerIndices()[objectIndex]\n          ];\n        break;\n      default:\n        // 不明なタイプだった場合は処理を終了\n        return;\n    }\n    while (targetParentIndex != NoParentIndex) {\n      // オブジェクトの親が現在のオーナーと同じ場合は処理を終了\n      if (targetParentIndex == currentOwnerIndex) {\n        return;\n      }\n\n      targetParentIndex =\n        this.getModel().getPartParentPartIndices()[targetParentIndex];\n    }\n\n    // 描画\n    this.drawOffscreen(this._currentOffscreen);\n\n    // さらに親のオフスクリーンに伝搬可能なら伝搬する\n    this.submitDrawToParentOffscreen(objectIndex, objectType);\n  }\n\n  /**\n   * 描画オブジェクト（オフスクリーン）を追加する。\n   *\n   * @param offscreenIndex オフスクリーンのインデックス\n   */\n  public addOffscreen(offscreenIndex: number): void {\n    // 以前のオフスクリーンレンダリングターゲットを親に伝搬する処理を追加する\n    if (\n      this._currentOffscreen != null &&\n      this._currentOffscreen.getOffscreenIndex() != offscreenIndex\n    ) {\n      let isParent = false;\n      const ownerIndex =\n        this.getModel().getOffscreenOwnerIndices()[offscreenIndex];\n      let parentIndex = this.getModel().getPartParentPartIndices()[ownerIndex];\n\n      const currentOffscreenIndex = this._currentOffscreen.getOffscreenIndex();\n      const currentOffscreenOwnerIndex =\n        this.getModel().getOffscreenOwnerIndices()[currentOffscreenIndex];\n      while (parentIndex != NoParentIndex) {\n        if (parentIndex == currentOffscreenOwnerIndex) {\n          isParent = true;\n          break;\n        }\n        parentIndex = this.getModel().getPartParentPartIndices()[parentIndex];\n      }\n\n      if (!isParent) {\n        // 現在のオフスクリーンレンダリングターゲットがあるなら、親に伝搬する\n        this.submitDrawToParentOffscreen(\n          offscreenIndex,\n          DrawableObjectType.DrawableObjectType_Offscreen\n        );\n      }\n    }\n\n    const offscreen = this._offscreenList.at(offscreenIndex);\n\n    // サイズが異なるなら新しいオフスクリーンレンダリングターゲットを作成\n    if (\n      offscreen.getBufferWidth() != this._modelRenderTargetWidth ||\n      offscreen.getBufferHeight() != this._modelRenderTargetHeight\n    ) {\n      offscreen.createOffscreenRenderTarget(\n        this.gl,\n        this._modelRenderTargetWidth,\n        this._modelRenderTargetHeight,\n        this._currentFbo\n      );\n    }\n\n    // 以前のオフスクリーンレンダリングターゲットを取得\n    const oldOffscreen = offscreen.getParentPartOffscreen();\n    offscreen.setOldOffscreen(oldOffscreen);\n\n    let oldFBO: WebGLFramebuffer = null;\n    if (oldOffscreen != null) {\n      oldFBO = oldOffscreen.getRenderTexture();\n    }\n\n    if (oldFBO == null) {\n      oldFBO = this._modelRootFbo; // ルートのFBOを使用\n    }\n\n    // 別バッファに描画を開始\n    offscreen.beginDraw(oldFBO);\n    this.gl.viewport(\n      0,\n      0,\n      this._modelRenderTargetWidth,\n      this._modelRenderTargetHeight\n    );\n    offscreen.clear(0.0, 0.0, 0.0, 0.0);\n\n    // 現在のオフスクリーンレンダリングターゲットを設定\n    this._currentOffscreen = offscreen;\n    this._currentFbo = offscreen.getRenderTexture();\n  }\n\n  /**\n   * オフスクリーン描画を行う。\n   *\n   * @param offscreen オフスクリーンレンダリングターゲット\n   */\n  public drawOffscreen(offscreen: CubismRenderTarget_WebGL): void {\n    const offscreenIndex = offscreen.getOffscreenIndex();\n\n    // クリッピングマスク\n    const clipContext =\n      this._offscreenClippingManager != null\n        ? this._offscreenClippingManager\n            .getClippingContextListForOffscreen()\n            .at(offscreenIndex)\n        : null;\n\n    if (clipContext != null && this.isUsingHighPrecisionMask()) {\n      // マスクを書く必要がある\n      if (clipContext._isUsing) {\n        // 書くことになっていた\n        // 生成したRenderTargetと同じサイズでビューポートを設定\n        this.gl.viewport(\n          0,\n          0,\n          this._offscreenClippingManager.getClippingMaskBufferSize(),\n          this._offscreenClippingManager.getClippingMaskBufferSize()\n        );\n\n        this.preDraw(); // バッファをクリアする\n\n        // ---------- マスク描画処理 ----------\n        // マスク用RenderTextureをactiveにセット\n        this.getOffscreenMaskBuffer(clipContext._bufferIndex).beginDraw(\n          this._currentFbo\n        );\n\n        // マスクをクリアする\n        // 1が無効（描かれない）領域、0が有効（描かれる）領域。（シェーダで Cd*Csで0に近い値をかけてマスクを作る。1をかけると何も起こらない）\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n      }\n\n      {\n        const clipDrawCount = clipContext._clippingIdCount;\n        for (let index = 0; index < clipDrawCount; index++) {\n          const clipDrawIndex = clipContext._clippingIdList[index];\n\n          // 頂点情報が更新されておらず、信頼性がない場合は描画をパスする\n          if (\n            !this.getModel().getDrawableDynamicFlagVertexPositionsDidChange(\n              clipDrawIndex\n            )\n          ) {\n            continue;\n          }\n\n          this.setIsCulling(\n            this.getModel().getDrawableCulling(clipDrawIndex) != false\n          );\n\n          // 今回専用の変換を適用して描く\n          // チャンネルも切り替える必要がある(A,R,G,B)\n          this.setClippingContextBufferForMask(clipContext);\n\n          this.drawMeshWebGL(this.getModel(), clipDrawIndex);\n        }\n      }\n\n      {\n        // --- 後処理 ---\n        this.getOffscreenMaskBuffer(clipContext._bufferIndex).endDraw();\n        this.setClippingContextBufferForMask(null);\n        this.gl.viewport(\n          0,\n          0,\n          this._modelRenderTargetWidth,\n          this._modelRenderTargetHeight\n        );\n\n        this.preDraw(); // バッファをクリアする\n      }\n    }\n\n    // クリッピングマスクをセットする\n    this.setClippingContextBufferForOffscreen(clipContext);\n\n    this.setIsCulling(this._model.getOffscreenCulling(offscreenIndex) != false);\n\n    this.drawOffscreenWebGL(this.getModel(), offscreen);\n  }\n\n  /**\n   * オフスクリーン描画のWebGL実装\n   *\n   * @param model モデル\n   * @param index オフスクリーンインデックス\n   */\n  public drawOffscreenWebGL(\n    model: Readonly<CubismModel>,\n    offscreen: CubismRenderTarget_WebGL\n  ): void {\n    // 裏面描画の有効・無効\n    if (this.isCulling()) {\n      this.gl.enable(this.gl.CULL_FACE);\n    } else {\n      this.gl.disable(this.gl.CULL_FACE);\n    }\n\n    this.gl.frontFace(this.gl.CCW); // Cubism SDK OpenGLはマスク・アートメッシュ共にCCWが表面\n\n    CubismShaderManager_WebGL.getInstance()\n      .getShader(this.gl)\n      .setupShaderProgramForOffscreen(this, model, offscreen);\n\n    offscreen.endDraw();\n    this._currentOffscreen = this._currentOffscreen.getOldOffscreen();\n    this._currentFbo = offscreen.getOldFBO();\n    if (this._currentFbo == null) {\n      this._currentOffscreen = this._modelRenderTargets.at(0);\n      this._currentFbo = this._modelRenderTargets.at(0).getRenderTexture();\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._currentFbo);\n    }\n\n    // ポリゴンメッシュを描画する\n    {\n      // インデックスバッファの作成とバインド\n      const indexBuffer = this.gl.createBuffer();\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n      this.gl.bufferData(\n        this.gl.ELEMENT_ARRAY_BUFFER,\n        s_renderTargetIndexArray,\n        this.gl.STATIC_DRAW\n      );\n\n      // 描画\n      this.gl.drawElements(\n        this.gl.TRIANGLES,\n        s_renderTargetIndexArray.length,\n        this.gl.UNSIGNED_SHORT,\n        0\n      );\n      this.gl.deleteBuffer(indexBuffer);\n    }\n\n    // 後処理\n    this.gl.useProgram(null);\n    this.setClippingContextBufferForMask(null);\n    this.setClippingContextBufferForOffscreen(null);\n  }\n\n  /**\n   * モデル描画直前のレンダラのステートを保持する\n   */\n  protected saveProfile(): void {\n    this._rendererProfile.save();\n  }\n\n  /**\n   * モデル描画直前のレンダラのステートを復帰させる\n   */\n  protected restoreProfile(): void {\n    this._rendererProfile.restore();\n  }\n\n  /**\n   * モデル描画直前のオフスクリーン設定を行う\n   */\n  public beforeDrawModelRenderTarget(): void {\n    if (this._modelRenderTargets.getSize() == 0) {\n      return;\n    }\n\n    // オフスクリーンのバッファのサイズが違う場合は作り直し\n    for (let i = 0; i < this._modelRenderTargets.getSize(); ++i) {\n      if (\n        this._modelRenderTargets.at(i).getBufferWidth() !=\n          this._modelRenderTargetWidth ||\n        this._modelRenderTargets.at(i).getBufferHeight() !=\n          this._modelRenderTargetHeight\n      ) {\n        this._modelRenderTargets\n          .at(i)\n          .createOffscreenRenderTarget(\n            this.gl,\n            this._modelRenderTargetWidth,\n            this._modelRenderTargetHeight,\n            this._currentFbo\n          );\n      }\n    }\n\n    // 別バッファに描画を開始\n    this._modelRenderTargets.at(0).beginDraw();\n    this._modelRenderTargets.at(0).clear(0.0, 0.0, 0.0, 0.0);\n  }\n\n  /**\n   * モデル描画後のオフスクリーン設定を行う\n   */\n  public afterDrawModelRenderTarget(): void {\n    if (this._modelRenderTargets.getSize() == 0) {\n      return;\n    }\n\n    // 元のバッファに描画する\n    this._modelRenderTargets.at(0).endDraw();\n\n    CubismShaderManager_WebGL.getInstance()\n      .getShader(this.gl)\n      .setupShaderProgramForOffscreenRenderTarget(this);\n\n    if (\n      CubismShaderManager_WebGL.getInstance().getShader(this.gl)._isShaderLoaded\n    ) {\n      // インデックスバッファの作成とバインド\n      const indexBuffer = this.gl.createBuffer();\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n      this.gl.bufferData(\n        this.gl.ELEMENT_ARRAY_BUFFER,\n        s_renderTargetIndexArray,\n        this.gl.STATIC_DRAW\n      );\n\n      // 描画\n      this.gl.drawElements(\n        this.gl.TRIANGLES,\n        s_renderTargetIndexArray.length,\n        this.gl.UNSIGNED_SHORT,\n        0\n      );\n      this.gl.deleteBuffer(indexBuffer);\n    }\n\n    this.gl.useProgram(null);\n  }\n\n  /**\n   * オフスクリーンのクリッピングマスクのバッファを取得する\n   *\n   * @param index オフスクリーンのクリッピングマスクのバッファのインデックス\n   *\n   * @return オフスクリーンのクリッピングマスクのバッファへのポインタ\n   */\n  getOffscreenMaskBuffer(index: number): CubismRenderTarget_WebGL {\n    return this._offscreenMasks.at(index);\n  }\n\n  /**\n   * レンダラが保持する静的なリソースを解放する\n   * WebGLの静的なシェーダープログラムを解放する\n   */\n  public static doStaticRelease(): void {\n    CubismShaderManager_WebGL.deleteInstance();\n  }\n\n  /**\n   * レンダーステートを設定する\n   *\n   * @param fbo アプリケーション側で指定しているフレームバッファ\n   * @param viewport ビューポート\n   */\n  public setRenderState(fbo: WebGLFramebuffer, viewport: number[]): void {\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, fbo);\n    this.gl.viewport(viewport[0], viewport[1], viewport[2], viewport[3]);\n\n    if (\n      this._modelRenderTargetWidth != viewport[2] ||\n      this._modelRenderTargetHeight != viewport[3]\n    ) {\n      this._modelRenderTargetWidth = viewport[2];\n      this._modelRenderTargetHeight = viewport[3];\n    }\n  }\n\n  /**\n   * 描画開始時の追加処理\n   * モデルを描画する前にクリッピングマスクに必要な処理を実装している\n   */\n  public preDraw(): void {\n    if (this._firstDraw) {\n      this._firstDraw = false;\n    }\n\n    this.gl.disable(this.gl.SCISSOR_TEST);\n    this.gl.disable(this.gl.STENCIL_TEST);\n    this.gl.disable(this.gl.DEPTH_TEST);\n\n    // カリング（1.0beta3）\n    this.gl.frontFace(this.gl.CW);\n\n    this.gl.enable(this.gl.BLEND);\n    this.gl.colorMask(true, true, true, true);\n\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null); // 前にバッファがバインドされていたら破棄する必要がある\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\n\n    // 異方性フィルタリングを適用する\n    if (this.getAnisotropy() > 0.0 && this._extension) {\n      for (let i = 0; i < this._textures.getSize(); ++i) {\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this._textures.getValue(i));\n        this.gl.texParameterf(\n          this.gl.TEXTURE_2D,\n          this._extension.TEXTURE_MAX_ANISOTROPY_EXT,\n          this.getAnisotropy()\n        );\n      }\n    }\n  }\n\n  /**\n   * Drawableのマスク用のオフスクリーンサーフェースを取得する\n   *\n   * @param index オフスクリーンサーフェースのインデックス\n   *\n   * @return マスク用のオフスクリーンサーフェース\n   */\n  public getDrawableMaskBuffer(index: number): CubismRenderTarget_WebGL {\n    return this._drawableMasks.at(index);\n  }\n\n  /**\n   * マスクテクスチャに描画するクリッピングコンテキストをセットする\n   */\n  public setClippingContextBufferForMask(clip: CubismClippingContext_WebGL) {\n    this._clippingContextBufferForMask = clip;\n  }\n\n  /**\n   * マスクテクスチャに描画するクリッピングコンテキストを取得する\n   *\n   * @return マスクテクスチャに描画するクリッピングコンテキスト\n   */\n  public getClippingContextBufferForMask(): CubismClippingContext_WebGL {\n    return this._clippingContextBufferForMask;\n  }\n\n  /**\n   * Drawableの画面上に描画するクリッピングコンテキストをセットする\n   *\n   * @param clip drawableで画面上に描画するクリッピングコンテキスト\n   */\n  public setClippingContextBufferForDrawable(\n    clip: CubismClippingContext_WebGL\n  ): void {\n    this._clippingContextBufferForDraw = clip;\n  }\n\n  /**\n   * Drawableの画面上に描画するクリッピングコンテキストを取得する\n   *\n   * @return Drawableの画面上に描画するクリッピングコンテキスト\n   */\n  public getClippingContextBufferForDrawable(): CubismClippingContext_WebGL {\n    return this._clippingContextBufferForDraw;\n  }\n\n  /**\n   * offscreenで画面上に描画するクリッピングコンテキストをセットする。\n   *\n   * @param clip offscreenで画面上に描画するクリッピングコンテキスト\n   */\n  public setClippingContextBufferForOffscreen(\n    clip: CubismClippingContext_WebGL\n  ): void {\n    this._clippingContextBufferForOffscreen = clip;\n  }\n\n  /**\n   * offscreenで画面上に描画するクリッピングコンテキストを取得する。\n   *\n   * @return offscreenで画面上に描画するクリッピングコンテキスト\n   */\n  public getClippingContextBufferForOffscreen(): CubismClippingContext_WebGL {\n    return this._clippingContextBufferForOffscreen;\n  }\n\n  /**\n   * マスク生成時かを判定する\n   *\n   * @return 判定値\n   */\n  public isGeneratingMask() {\n    return this.getClippingContextBufferForMask() != null;\n  }\n\n  /**\n   * glの設定\n   */\n  public startUp(gl: WebGLRenderingContext | WebGL2RenderingContext): void {\n    this.gl = gl;\n\n    if (this._drawableClippingManager) {\n      this._drawableClippingManager.setGL(gl);\n    }\n\n    if (this._offscreenClippingManager) {\n      this._offscreenClippingManager.setGL(gl);\n    }\n\n    CubismShaderManager_WebGL.getInstance().setGlContext(gl);\n    this._rendererProfile.setGl(gl);\n\n    // 異方性フィルタリングが使用できるかチェック\n    this._extension =\n      this.gl.getExtension('EXT_texture_filter_anisotropic') ||\n      this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic') ||\n      this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic');\n\n    if (this._model.isUsingMasking()) {\n      this._drawableMasks.clear();\n      for (\n        let i = 0;\n        i < this._drawableClippingManager.getRenderTextureCount();\n        ++i\n      ) {\n        const renderTarget = new CubismRenderTarget_WebGL();\n        renderTarget.createOffscreenRenderTarget(\n          this.gl,\n          this._drawableClippingManager.getClippingMaskBufferSize(),\n          this._drawableClippingManager.getClippingMaskBufferSize(),\n          this._currentFbo\n        );\n        this._drawableMasks.pushBack(renderTarget);\n      }\n    }\n\n    if (this._model.isBlendModeEnabled()) {\n      // オフスクリーンの作成\n      this._modelRenderTargets.clear();\n\n      // TextureBarrierの代替用にオフスクリーンを2つ作成する\n      const createSize = 3;\n      for (let i = 0; i < createSize; ++i) {\n        const offscreenRenderTarget: CubismRenderTarget_WebGL =\n          new CubismRenderTarget_WebGL();\n        offscreenRenderTarget.createOffscreenRenderTarget(\n          this.gl,\n          this._modelRenderTargetWidth,\n          this._modelRenderTargetHeight,\n          this._currentFbo\n        );\n        this._modelRenderTargets.pushBack(offscreenRenderTarget);\n      }\n\n      if (this._model.isUsingMaskingForOffscreen()) {\n        this._offscreenMasks.clear();\n        for (\n          let i = 0;\n          i < this._offscreenClippingManager.getRenderTextureCount();\n          ++i\n        ) {\n          const offscreenMask = new CubismRenderTarget_WebGL();\n          offscreenMask.createOffscreenRenderTarget(\n            this.gl,\n            this._offscreenClippingManager.getClippingMaskBufferSize(),\n            this._offscreenClippingManager.getClippingMaskBufferSize(),\n            this._currentFbo\n          );\n          this._offscreenMasks.pushBack(offscreenMask);\n        }\n      }\n\n      const offscreenCount = this._model.getOffscreenCount();\n      // オフスクリーンの数が0の場合は何もしない\n      if (offscreenCount > 0) {\n        this._offscreenList = new csmVector<CubismRenderTarget_WebGL>(\n          offscreenCount\n        );\n        for (\n          let offscreenIndex = 0;\n          offscreenIndex < offscreenCount;\n          ++offscreenIndex\n        ) {\n          const offscreenRenderTarget = new CubismRenderTarget_WebGL();\n          offscreenRenderTarget.createOffscreenRenderTarget(\n            this.gl,\n            this._modelRenderTargetWidth,\n            this._modelRenderTargetHeight,\n            this._currentFbo\n          );\n          offscreenRenderTarget.setOffscreenIndex(offscreenIndex);\n          this._offscreenList.pushBack(offscreenRenderTarget);\n        }\n\n        // 全てのオフスクリーンを登録し終わってから行う\n        this.setupParentOffscreens(this._model, offscreenCount);\n      }\n    }\n\n    // 描画対象を初期状態に戻す\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._currentFbo);\n  }\n\n  _textures: csmMap<number, WebGLTexture>; // モデルが参照するテクスチャとレンダラでバインドしているテクスチャとのマップ\n  _sortedObjectsIndexList: csmVector<number>; // 描画オブジェクトのインデックスを描画順に並べたリスト\n  _sortedObjectsTypeList: csmVector<number>; // 描画オブジェクトのオブジェクトタイプを描画順に並べたリスト\n  _rendererProfile: CubismRendererProfile_WebGL;\n  _drawableClippingManager: CubismClippingManager_WebGL; // クリッピングマスク管理オブジェクト\n  _clippingContextBufferForMask: CubismClippingContext_WebGL; // マスクテクスチャに描画するためのクリッピングコンテキスト\n  _clippingContextBufferForDraw: CubismClippingContext_WebGL; // 画面上描画するためのクリッピングコンテキスト\n  _clippingContextBufferForOffscreen: CubismClippingContext_WebGL; // オフスクリーン描画用のクリッピングコンテキスト\n  _offscreenClippingManager: CubismClippingManager_WebGL; // オフスクリーン描画用のクリッピングマスク管理オブジェクト\n\n  _modelRenderTargets: csmVector<CubismRenderTarget_WebGL>; ///< モデル全体を描画する先のフレームバッファ\n\n  _drawableMasks: csmVector<CubismRenderTarget_WebGL>; // マスク用のオフスクリーンサーフェースのリスト\n  _offscreenMasks: csmVector<CubismRenderTarget_WebGL>; ///< オフスクリーン機能マスク描画用のフレームバッファ\n\n  _offscreenList: csmVector<CubismRenderTarget_WebGL>; ///< モデルのオフスクリーン\n  _currentFbo: WebGLFramebuffer; ///< 現在のフレームバッファオブジェクト\n  _currentOffscreen: CubismRenderTarget_WebGL | null; // 現在のオフスクリーン\n\n  _modelRootFbo: WebGLFramebuffer; // モデルのルートフレームバッファ\n  _firstDraw: boolean; // エイリアス内で最初のオフスクリーン描画かどうか\n\n  _bufferData: {\n    vertex: WebGLBuffer;\n    uv: WebGLBuffer;\n    index: WebGLBuffer;\n  }; // 頂点バッファデータ\n  _extension: any; // 拡張機能\n  gl: WebGLRenderingContext | WebGL2RenderingContext; // webglコンテキスト\n}\n\n/**\n * レンダラが保持する静的なリソースを開放する\n */\nCubismRenderer.staticRelease = (): void => {\n  CubismRenderer_WebGL.doStaticRelease();\n};\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismrenderer_webgl';\nimport { CubismRenderTarget_WebGL as CubismRenderTarget_WebGL } from './cubismrendertarget_webgl';\nimport { mergeSortByIterator } from '../type/cubismvectorsort';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismClippingContext = $.CubismClippingContext_WebGL;\n  export type CubismClippingContext = $.CubismClippingContext_WebGL;\n  export const CubismClippingManager_WebGL = $.CubismClippingManager_WebGL;\n  export type CubismClippingManager_WebGL = $.CubismClippingManager_WebGL;\n  export const CubismRenderer_WebGL = $.CubismRenderer_WebGL;\n  export type CubismRenderer_WebGL = $.CubismRenderer_WebGL;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CSM_ASSERT, CubismLogError } from '../utils/cubismdebug';\nimport { CubismModel } from './cubismmodel';\n\n/**\n * Mocデータの管理\n *\n * Mocデータの管理を行うクラス。\n */\nexport class CubismMoc {\n  /**\n   * Mocデータの作成\n   */\n  public static create(\n    mocBytes: ArrayBuffer,\n    shouldCheckMocConsistency: boolean\n  ): CubismMoc {\n    let cubismMoc: CubismMoc = null;\n\n    if (shouldCheckMocConsistency) {\n      // .moc3の整合性を確認\n      const consistency = this.hasMocConsistency(mocBytes);\n\n      if (!consistency) {\n        // 整合性が確認できなければ処理しない\n        CubismLogError(`Inconsistent MOC3.`);\n        return cubismMoc;\n      }\n    }\n\n    const moc: Live2DCubismCore.Moc =\n      Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);\n\n    if (moc) {\n      cubismMoc = new CubismMoc(moc);\n      cubismMoc._mocVersion = Live2DCubismCore.Version.csmGetMocVersion(\n        moc,\n        mocBytes\n      );\n    }\n\n    return cubismMoc;\n  }\n\n  /**\n   * Mocデータを削除\n   *\n   * Mocデータを削除する\n   */\n  public static delete(moc: CubismMoc): void {\n    moc._moc._release();\n    moc._moc = null;\n    moc = null;\n  }\n\n  /**\n   * モデルを作成する\n   *\n   * @return Mocデータから作成されたモデル\n   */\n  createModel(): CubismModel {\n    let cubismModel: CubismModel = null;\n\n    const model: Live2DCubismCore.Model = Live2DCubismCore.Model.fromMoc(\n      this._moc\n    );\n\n    if (model) {\n      cubismModel = new CubismModel(model);\n      cubismModel.initialize();\n\n      ++this._modelCount;\n    }\n\n    return cubismModel;\n  }\n\n  /**\n   * モデルを削除する\n   */\n  deleteModel(model: CubismModel): void {\n    if (model != null) {\n      model.release();\n      model = null;\n      --this._modelCount;\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  private constructor(moc: Live2DCubismCore.Moc) {\n    this._moc = moc;\n    this._modelCount = 0;\n    this._mocVersion = 0;\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    CSM_ASSERT(this._modelCount == 0);\n\n    this._moc._release();\n    this._moc = null;\n  }\n\n  /**\n   * 最新の.moc3 Versionを取得\n   */\n  public getLatestMocVersion(): number {\n    return Live2DCubismCore.Version.csmGetLatestMocVersion();\n  }\n\n  /**\n   * 読み込んだモデルの.moc3 Versionを取得\n   */\n  public getMocVersion(): number {\n    return this._mocVersion;\n  }\n\n  /**\n   * .moc3 の整合性を検証する\n   */\n  public static hasMocConsistency(mocBytes: ArrayBuffer): boolean {\n    const isConsistent =\n      Live2DCubismCore.Moc.prototype.hasMocConsistency(mocBytes);\n    return isConsistent === 1 ? true : false;\n  }\n\n  _moc: Live2DCubismCore.Moc; // Mocデータ\n  _modelCount: number; // Mocデータから作られたモデルの個数\n  _mocVersion: number; // 読み込んだモデルの.moc3 Version\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmoc';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMoc = $.CubismMoc;\n  export type CubismMoc = $.CubismMoc;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismJson } from '../utils/cubismjson';\n\nconst Meta = 'Meta';\nconst UserDataCount = 'UserDataCount';\nconst TotalUserDataSize = 'TotalUserDataSize';\nconst UserData = 'UserData';\nconst Target = 'Target';\nconst Id = 'Id';\nconst Value = 'Value';\n\nexport class CubismModelUserDataJson {\n  /**\n   * コンストラクタ\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\n   * @param size      バッファのサイズ\n   */\n  public constructor(buffer: ArrayBuffer, size: number) {\n    this._json = CubismJson.create(buffer, size);\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    CubismJson.delete(this._json);\n  }\n\n  /**\n   * ユーザーデータ個数の取得\n   * @return ユーザーデータの個数\n   */\n  public getUserDataCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(UserDataCount)\n      .toInt();\n  }\n\n  /**\n   * ユーザーデータ総文字列数の取得\n   *\n   * @return ユーザーデータ総文字列数\n   */\n  public getTotalUserDataSize(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(TotalUserDataSize)\n      .toInt();\n  }\n\n  /**\n   * ユーザーデータのタイプの取得\n   *\n   * @return ユーザーデータのタイプ\n   */\n  public getUserDataTargetType(i: number): string {\n    return this._json\n      .getRoot()\n      .getValueByString(UserData)\n      .getValueByIndex(i)\n      .getValueByString(Target)\n      .getRawString();\n  }\n\n  /**\n   * ユーザーデータのターゲットIDの取得\n   *\n   * @param i インデックス\n   * @return ユーザーデータターゲットID\n   */\n  public getUserDataId(i: number): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._json\n        .getRoot()\n        .getValueByString(UserData)\n        .getValueByIndex(i)\n        .getValueByString(Id)\n        .getRawString()\n    );\n  }\n\n  /**\n   * ユーザーデータの文字列の取得\n   *\n   * @param i インデックス\n   * @return ユーザーデータ\n   */\n  public getUserDataValue(i: number): string {\n    return this._json\n      .getRoot()\n      .getValueByString(UserData)\n      .getValueByIndex(i)\n      .getValueByString(Value)\n      .getRawString();\n  }\n\n  private _json: CubismJson;\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodeluserdatajson';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismModelUserDataJson = $.CubismModelUserDataJson;\n  export type CubismModelUserDataJson = $.CubismModelUserDataJson;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { csmString } from '../type/csmstring';\nimport { csmVector } from '../type/csmvector';\nimport { CubismModelUserDataJson } from './cubismmodeluserdatajson';\n\nconst ArtMesh = 'ArtMesh';\n\n/**\n * ユーザーデータインターフェース\n *\n * Jsonから読み込んだユーザーデータを記録しておくための構造体\n */\nexport class CubismModelUserDataNode {\n  targetType: CubismIdHandle; // ユーザーデータターゲットタイプ\n  targetId: CubismIdHandle; // ユーザーデータターゲットのID\n  value: csmString; // ユーザーデータ\n}\n\n/**\n * ユーザデータの管理クラス\n *\n * ユーザデータをロード、管理、検索インターフェイス、解放までを行う。\n */\nexport class CubismModelUserData {\n  /**\n   * インスタンスの作成\n   *\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\n   * @param size      バッファのサイズ\n   * @return 作成されたインスタンス\n   */\n  public static create(buffer: ArrayBuffer, size: number): CubismModelUserData {\n    const ret: CubismModelUserData = new CubismModelUserData();\n\n    ret.parseUserData(buffer, size);\n\n    return ret;\n  }\n\n  /**\n   * インスタンスを破棄する\n   *\n   * @param modelUserData 破棄するインスタンス\n   */\n  public static delete(modelUserData: CubismModelUserData): void {\n    if (modelUserData != null) {\n      modelUserData.release();\n      modelUserData = null;\n    }\n  }\n\n  /**\n   * ArtMeshのユーザーデータのリストの取得\n   *\n   * @return ユーザーデータリスト\n   */\n  public getArtMeshUserDatas(): csmVector<CubismModelUserDataNode> {\n    return this._artMeshUserDataNode;\n  }\n\n  /**\n   * userdata3.jsonのパース\n   *\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\n   * @param size      バッファのサイズ\n   */\n  public parseUserData(buffer: ArrayBuffer, size: number): void {\n    let json: CubismModelUserDataJson = new CubismModelUserDataJson(\n      buffer,\n      size\n    );\n    if (!json) {\n      json.release();\n      json = void 0;\n      return;\n    }\n\n    const typeOfArtMesh = CubismFramework.getIdManager().getId(ArtMesh);\n    const nodeCount: number = json.getUserDataCount();\n\n    for (let i = 0; i < nodeCount; i++) {\n      const addNode: CubismModelUserDataNode = new CubismModelUserDataNode();\n\n      addNode.targetId = json.getUserDataId(i);\n      addNode.targetType = CubismFramework.getIdManager().getId(\n        json.getUserDataTargetType(i)\n      );\n      addNode.value = new csmString(json.getUserDataValue(i));\n      this._userDataNodes.pushBack(addNode);\n\n      if (addNode.targetType == typeOfArtMesh) {\n        this._artMeshUserDataNode.pushBack(addNode);\n      }\n    }\n\n    json.release();\n    json = void 0;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._userDataNodes = new csmVector<CubismModelUserDataNode>();\n    this._artMeshUserDataNode = new csmVector<CubismModelUserDataNode>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   *\n   * ユーザーデータ構造体配列を解放する\n   */\n  public release(): void {\n    for (let i = 0; i < this._userDataNodes.getSize(); ++i) {\n      this._userDataNodes.set(i, null);\n    }\n\n    this._userDataNodes = null;\n  }\n\n  private _userDataNodes: csmVector<CubismModelUserDataNode>; // ユーザーデータ構造体配列\n  private _artMeshUserDataNode: csmVector<CubismModelUserDataNode>; // 閲覧リストの保持\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodeluserdata';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismModelUserData = $.CubismModelUserData;\n  export type CubismModelUserData = $.CubismModelUserData;\n  export const CubismModelUserDataNode = $.CubismModelUserDataNode;\n  export type CubismModelUserDataNode = $.CubismModelUserDataNode;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismBreath } from '../effect/cubismbreath';\nimport { CubismEyeBlink } from '../effect/cubismeyeblink';\nimport { CubismPose } from '../effect/cubismpose';\nimport { ICubismModelSetting } from '../icubismmodelsetting';\nimport { CubismIdHandle } from '../id/cubismid';\nimport { Constant } from '../live2dcubismframework';\nimport { CubismModelMatrix } from '../math/cubismmodelmatrix';\nimport { CubismTargetPoint } from '../math/cubismtargetpoint';\nimport {\n  ACubismMotion,\n  BeganMotionCallback,\n  FinishedMotionCallback\n} from '../motion/acubismmotion';\nimport { CubismExpressionMotion } from '../motion/cubismexpressionmotion';\nimport { CubismExpressionMotionManager } from '../motion/cubismexpressionmotionmanager';\nimport { CubismMotion } from '../motion/cubismmotion';\nimport { CubismMotionManager } from '../motion/cubismmotionmanager';\nimport { CubismMotionQueueManager } from '../motion/cubismmotionqueuemanager';\nimport { CubismPhysics } from '../physics/cubismphysics';\nimport { CubismRenderer_WebGL } from '../rendering/cubismrenderer_webgl';\nimport { csmString } from '../type/csmstring';\nimport { CubismLogError, CubismLogInfo } from '../utils/cubismdebug';\nimport { CubismMoc } from './cubismmoc';\nimport { CubismModel } from './cubismmodel';\nimport { CubismModelUserData } from './cubismmodeluserdata';\n\n/**\n * ユーザーが実際に使用するモデル\n *\n * ユーザーが実際に使用するモデルの基底クラス。これを継承してユーザーが実装する。\n */\nexport class CubismUserModel {\n  /**\n   * 初期化状態の取得\n   *\n   * 初期化されている状態か？\n   *\n   * @return true     初期化されている\n   * @return false    初期化されていない\n   */\n  public isInitialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * 初期化状態の設定\n   *\n   * 初期化状態を設定する。\n   *\n   * @param v 初期化状態\n   */\n  public setInitialized(v: boolean): void {\n    this._initialized = v;\n  }\n\n  /**\n   * 更新状態の取得\n   *\n   * 更新されている状態か？\n   *\n   * @return true     更新されている\n   * @return false    更新されていない\n   */\n  public isUpdating(): boolean {\n    return this._updating;\n  }\n\n  /**\n   * 更新状態の設定\n   *\n   * 更新状態を設定する\n   *\n   * @param v 更新状態\n   */\n  public setUpdating(v: boolean): void {\n    this._updating = v;\n  }\n\n  /**\n   * マウスドラッグ情報の設定\n   *\n   * @param ドラッグしているカーソルのX位置\n   * @param ドラッグしているカーソルのY位置\n   */\n  public setDragging(x: number, y: number): void {\n    this._dragManager.set(x, y);\n  }\n\n  /**\n   * 加速度の情報を設定する\n   *\n   * @param x X軸方向の加速度\n   * @param y Y軸方向の加速度\n   * @param z Z軸方向の加速度\n   */\n  public setAcceleration(x: number, y: number, z: number): void {\n    this._accelerationX = x;\n    this._accelerationY = y;\n    this._accelerationZ = z;\n  }\n\n  /**\n   * モデル行列を取得する\n   * @return モデル行列\n   */\n  public getModelMatrix(): CubismModelMatrix {\n    return this._modelMatrix;\n  }\n\n  /**\n   * モデルを描画したバッファを設定する\n   *\n   * @param width モデルを描画したバッファの幅\n   * @param height モデルを描画したバッファの高さ\n   */\n  public setRenderTargetSize(width: number, height: number): void {\n    if (this._renderer) {\n      this._renderer.setRenderTargetSize(width, height);\n    }\n  }\n\n  /**\n   * 不透明度の設定\n   *\n   * @param a 不透明度\n   */\n  public setOpacity(a: number): void {\n    this._opacity = a;\n  }\n\n  /**\n   * 不透明度の取得\n   *\n   * @return 不透明度\n   */\n  public getOpacity(): number {\n    return this._opacity;\n  }\n\n  /**\n   * モデルデータを読み込む\n   *\n   * @param buffer    moc3ファイルが読み込まれているバッファ\n   */\n  public loadModel(buffer: ArrayBuffer, shouldCheckMocConsistency = false) {\n    this._moc = CubismMoc.create(buffer, shouldCheckMocConsistency);\n\n    if (this._moc == null) {\n      CubismLogError('Failed to CubismMoc.create().');\n      return;\n    }\n\n    this._model = this._moc.createModel();\n\n    if (this._model == null) {\n      CubismLogError('Failed to CreateModel().');\n      return;\n    }\n\n    this._model.saveParameters();\n    this._modelMatrix = new CubismModelMatrix(\n      this._model.getCanvasWidth(),\n      this._model.getCanvasHeight()\n    );\n  }\n\n  /**\n   * モーションデータを読み込む\n   * @param buffer motion3.jsonファイルが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @param name モーションの名前\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @param onBeganMotionHandler モーション再生開始時に呼び出されるコールバック関数\n   * @param modelSetting モデル設定\n   * @param group モーショングループ名\n   * @param index モーションインデックス\n   * @param shouldCheckMotionConsistency motion3.json整合性チェックするかどうか\n   * @return モーションクラス\n   */\n  public loadMotion(\n    buffer: ArrayBuffer,\n    size: number,\n    name: string,\n    onFinishedMotionHandler?: FinishedMotionCallback,\n    onBeganMotionHandler?: BeganMotionCallback,\n    modelSetting?: ICubismModelSetting,\n    group?: string,\n    index?: number,\n    shouldCheckMotionConsistency: boolean = false\n  ): CubismMotion {\n    if (buffer == null || size == 0) {\n      CubismLogError('Failed to loadMotion().');\n      return null;\n    }\n\n    const motion: CubismMotion = CubismMotion.create(\n      buffer,\n      size,\n      onFinishedMotionHandler,\n      onBeganMotionHandler,\n      shouldCheckMotionConsistency\n    );\n\n    if (motion == null) {\n      CubismLogError(`Failed to create motion from buffer in LoadMotion()`);\n      return null;\n    }\n\n    // 必要であればモーションフェード値を上書き\n    if (modelSetting) {\n      const fadeInTime: number = modelSetting.getMotionFadeInTimeValue(\n        group,\n        index\n      );\n      if (fadeInTime >= 0.0) {\n        motion.setFadeInTime(fadeInTime);\n      }\n\n      const fadeOutTime = modelSetting.getMotionFadeOutTimeValue(group, index);\n      if (fadeOutTime >= 0.0) {\n        motion.setFadeOutTime(fadeOutTime);\n      }\n    }\n\n    return motion;\n  }\n\n  /**\n   * 表情データの読み込み\n   * @param buffer expファイルが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @param name 表情の名前\n   */\n  public loadExpression(\n    buffer: ArrayBuffer,\n    size: number,\n    name: string\n  ): ACubismMotion {\n    if (buffer == null || size == 0) {\n      CubismLogError('Failed to loadExpression().');\n      return null;\n    }\n    return CubismExpressionMotion.create(buffer, size);\n  }\n\n  /**\n   * ポーズデータの読み込み\n   * @param buffer pose3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  public loadPose(buffer: ArrayBuffer, size: number): void {\n    if (buffer == null || size == 0) {\n      CubismLogError('Failed to loadPose().');\n      return;\n    }\n    this._pose = CubismPose.create(buffer, size);\n  }\n\n  /**\n   * モデルに付属するユーザーデータを読み込む\n   * @param buffer userdata3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  public loadUserData(buffer: ArrayBuffer, size: number): void {\n    if (buffer == null || size == 0) {\n      CubismLogError('Failed to loadUserData().');\n      return;\n    }\n    this._modelUserData = CubismModelUserData.create(buffer, size);\n  }\n\n  /**\n   * 物理演算データの読み込み\n   * @param buffer  physics3.jsonが読み込まれているバッファ\n   * @param size    バッファのサイズ\n   */\n  public loadPhysics(buffer: ArrayBuffer, size: number): void {\n    if (buffer == null || size == 0) {\n      CubismLogError('Failed to loadPhysics().');\n      return;\n    }\n    this._physics = CubismPhysics.create(buffer, size);\n  }\n\n  /**\n   * 当たり判定の取得\n   * @param drawableId 検証したいDrawableのID\n   * @param pointX X位置\n   * @param pointY Y位置\n   * @return true ヒットしている\n   * @return false ヒットしていない\n   */\n  public isHit(\n    drawableId: CubismIdHandle,\n    pointX: number,\n    pointY: number\n  ): boolean {\n    const drawIndex: number = this._model.getDrawableIndex(drawableId);\n\n    if (drawIndex < 0) {\n      return false; // 存在しない場合はfalse\n    }\n\n    const count: number = this._model.getDrawableVertexCount(drawIndex);\n    const vertices: Float32Array = this._model.getDrawableVertices(drawIndex);\n\n    let left: number = vertices[0];\n    let right: number = vertices[0];\n    let top: number = vertices[1];\n    let bottom: number = vertices[1];\n\n    for (let j = 1; j < count; ++j) {\n      const x = vertices[Constant.vertexOffset + j * Constant.vertexStep];\n      const y = vertices[Constant.vertexOffset + j * Constant.vertexStep + 1];\n\n      if (x < left) {\n        left = x; // Min x\n      }\n\n      if (x > right) {\n        right = x; // Max x\n      }\n\n      if (y < top) {\n        top = y; // Min y\n      }\n\n      if (y > bottom) {\n        bottom = y; // Max y\n      }\n    }\n\n    const tx: number = this._modelMatrix.invertTransformX(pointX);\n    const ty: number = this._modelMatrix.invertTransformY(pointY);\n\n    return left <= tx && tx <= right && top <= ty && ty <= bottom;\n  }\n\n  /**\n   * モデルの取得\n   * @return モデル\n   */\n  public getModel(): CubismModel {\n    return this._model;\n  }\n\n  /**\n   * レンダラの取得\n   * @return レンダラ\n   */\n  public getRenderer(): CubismRenderer_WebGL {\n    return this._renderer;\n  }\n\n  /**\n   * レンダラを作成して初期化を実行する\n   * @param width レンダリングする幅\n   * @param height レンダリングする高さ\n   * @param maskBufferCount バッファの生成数\n   */\n  public createRenderer(\n    width: number,\n    height: number,\n    maskBufferCount = 1\n  ): void {\n    if (this._renderer) {\n      this.deleteRenderer();\n    }\n\n    this._renderer = new CubismRenderer_WebGL(width, height);\n    this._renderer.initialize(this._model, maskBufferCount);\n  }\n\n  /**\n   * レンダラの解放\n   */\n  public deleteRenderer(): void {\n    if (this._renderer != null) {\n      this._renderer.release();\n      this._renderer = null;\n    }\n  }\n\n  /**\n   * イベント発火時の標準処理\n   *\n   * Eventが再生処理時にあった場合の処理をする。\n   * 継承で上書きすることを想定している。\n   * 上書きしない場合はログ出力をする。\n   *\n   * @param eventValue 発火したイベントの文字列データ\n   */\n  public motionEventFired(eventValue: csmString): void {\n    CubismLogInfo('{0}', eventValue.s);\n  }\n\n  /**\n   * イベント用のコールバック\n   *\n   * CubismMotionQueueManagerにイベント用に登録するためのCallback。\n   * CubismUserModelの継承先のEventFiredを呼ぶ。\n   *\n   * @param caller 発火したイベントを管理していたモーションマネージャー、比較用\n   * @param eventValue 発火したイベントの文字列データ\n   * @param customData CubismUserModelを継承したインスタンスを想定\n   */\n  public static cubismDefaultMotionEventCallback(\n    caller: CubismMotionQueueManager,\n    eventValue: csmString,\n    customData: CubismUserModel\n  ): void {\n    const model: CubismUserModel = customData;\n\n    if (model != null) {\n      model.motionEventFired(eventValue);\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    // 各変数初期化\n    this._moc = null;\n    this._model = null;\n    this._motionManager = null;\n    this._expressionManager = null;\n    this._eyeBlink = null;\n    this._breath = null;\n    this._modelMatrix = null;\n    this._pose = null;\n    this._dragManager = null;\n    this._physics = null;\n    this._modelUserData = null;\n    this._initialized = false;\n    this._updating = false;\n    this._opacity = 1.0;\n    this._lipsync = true;\n    this._lastLipSyncValue = 0.0;\n    this._dragX = 0.0;\n    this._dragY = 0.0;\n    this._accelerationX = 0.0;\n    this._accelerationY = 0.0;\n    this._accelerationZ = 0.0;\n    this._mocConsistency = false;\n    this._debugMode = false;\n    this._renderer = null;\n\n    // モーションマネージャーを作成\n    this._motionManager = new CubismMotionManager();\n    this._motionManager.setEventCallback(\n      CubismUserModel.cubismDefaultMotionEventCallback,\n      this\n    );\n\n    // 表情マネージャーを作成\n    this._expressionManager = new CubismExpressionMotionManager();\n\n    // ドラッグによるアニメーション\n    this._dragManager = new CubismTargetPoint();\n  }\n\n  /**\n   * デストラクタに相当する処理\n   */\n  public release() {\n    if (this._motionManager != null) {\n      this._motionManager.release();\n      this._motionManager = null;\n    }\n\n    if (this._expressionManager != null) {\n      this._expressionManager.release();\n      this._expressionManager = null;\n    }\n\n    if (this._moc != null) {\n      this._moc.deleteModel(this._model);\n      this._moc.release();\n      this._moc = null;\n    }\n\n    this._modelMatrix = null;\n\n    CubismPose.delete(this._pose);\n    CubismEyeBlink.delete(this._eyeBlink);\n    CubismBreath.delete(this._breath);\n\n    this._dragManager = null;\n\n    CubismPhysics.delete(this._physics);\n    CubismModelUserData.delete(this._modelUserData);\n\n    this.deleteRenderer();\n  }\n\n  protected _moc: CubismMoc; // Mocデータ\n  protected _model: CubismModel; // Modelインスタンス\n\n  protected _motionManager: CubismMotionManager; // モーション管理\n  protected _expressionManager: CubismExpressionMotionManager; // 表情管理\n  protected _eyeBlink: CubismEyeBlink; // 自動まばたき\n  protected _breath: CubismBreath; // 呼吸\n  protected _modelMatrix: CubismModelMatrix; // モデル行列\n  protected _pose: CubismPose; // ポーズ管理\n  protected _dragManager: CubismTargetPoint; // マウスドラッグ\n  protected _physics: CubismPhysics; // 物理演算\n  protected _modelUserData: CubismModelUserData; // ユーザーデータ\n\n  protected _initialized: boolean; // 初期化されたかどうか\n  protected _updating: boolean; // 更新されたかどうか\n  protected _opacity: number; // 不透明度\n  protected _lipsync: boolean; // リップシンクするかどうか\n  protected _lastLipSyncValue: number; // 最後のリップシンクの制御地\n  protected _dragX: number; // マウスドラッグのX位置\n  protected _dragY: number; // マウスドラッグのY位置\n  protected _accelerationX: number; // X軸方向の加速度\n  protected _accelerationY: number; // Y軸方向の加速度\n  protected _accelerationZ: number; // Z軸方向の加速度\n  protected _mocConsistency: boolean; // MOC3整合性検証するかどうか\n  protected _motionConsistency: boolean; // motion3.json整合性検証するかどうか\n  protected _debugMode: boolean; // デバッグモードかどうか\n\n  private _renderer: CubismRenderer_WebGL; // レンダラ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismusermodel';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismUserModel = $.CubismUserModel;\n  export type CubismUserModel = $.CubismUserModel;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/** @deprecated この変数は getInstance() が非推奨になったことに伴い、非推奨となりました。 */\nexport let s_instance: LAppWavFileHandler = null;\n\nexport class LAppWavFileHandler {\n  /**\n   * クラスのインスタンス（シングルトン）を返す。\n   * インスタンスが生成されていない場合は内部でインスタンスを生成する。\n   *\n   * @return クラスのインスタンス\n   * @deprecated このクラスでのシングルトンパターンの使用は非推奨となりました。代わりに new LAppWavFileHandler() を使用してください。\n   */\n  public static getInstance(): LAppWavFileHandler {\n    if (s_instance == null) {\n      s_instance = new LAppWavFileHandler();\n    }\n\n    return s_instance;\n  }\n\n  /**\n   * クラスのインスタンス（シングルトン）を解放する。\n   *\n   * @deprecated この関数は getInstance() が非推奨になったことに伴い、非推奨となりました。\n   */\n  public static releaseInstance(): void {\n    if (s_instance != null) {\n      s_instance = void 0;\n    }\n\n    s_instance = null;\n  }\n\n  public update(deltaTimeSeconds: number) {\n    let goalOffset: number;\n    let rms: number;\n\n    // データロード前/ファイル末尾に達した場合は更新しない\n    if (\n      this._pcmData == null ||\n      this._sampleOffset >= this._wavFileInfo._samplesPerChannel\n    ) {\n      this._lastRms = 0.0;\n      return false;\n    }\n\n    // 経過時間後の状態を保持\n    this._userTimeSeconds += deltaTimeSeconds;\n    goalOffset = Math.floor(\n      this._userTimeSeconds * this._wavFileInfo._samplingRate\n    );\n    if (goalOffset > this._wavFileInfo._samplesPerChannel) {\n      goalOffset = this._wavFileInfo._samplesPerChannel;\n    }\n\n    // RMS計測\n    rms = 0.0;\n    for (\n      let channelCount = 0;\n      channelCount < this._wavFileInfo._numberOfChannels;\n      channelCount++\n    ) {\n      for (\n        let sampleCount = this._sampleOffset;\n        sampleCount < goalOffset;\n        sampleCount++\n      ) {\n        const pcm = this._pcmData[channelCount][sampleCount];\n        rms += pcm * pcm;\n      }\n    }\n    rms = Math.sqrt(\n      rms /\n        (this._wavFileInfo._numberOfChannels *\n          (goalOffset - this._sampleOffset))\n    );\n\n    this._lastRms = rms;\n    this._sampleOffset = goalOffset;\n    return true;\n  }\n\n  public start(filePath: string): void {\n    // サンプル位参照位置を初期化\n    this._sampleOffset = 0;\n    this._userTimeSeconds = 0.0;\n\n    // RMS値をリセット\n    this._lastRms = 0.0;\n\n    this.loadWavFile(filePath);\n  }\n\n  public getRms(): number {\n    return this._lastRms;\n  }\n\n  public loadWavFile(filePath: string): Promise<boolean> {\n    return new Promise(resolveValue => {\n      let ret = false;\n\n      if (this._pcmData != null) {\n        this.releasePcmData();\n      }\n\n      // ファイルロード\n      const asyncFileLoad = async () => {\n        return fetch(filePath).then(responce => {\n          return responce.arrayBuffer();\n        });\n      };\n\n      const asyncWavFileManager = (async () => {\n        this._byteReader._fileByte = await asyncFileLoad();\n        this._byteReader._fileDataView = new DataView(\n          this._byteReader._fileByte\n        );\n        this._byteReader._fileSize = this._byteReader._fileByte.byteLength;\n        this._byteReader._readOffset = 0;\n\n        // ファイルロードに失敗しているか、先頭のシグネチャ\"RIFF\"を入れるサイズもない場合は失敗\n        if (\n          this._byteReader._fileByte == null ||\n          this._byteReader._fileSize < 4\n        ) {\n          resolveValue(false);\n          return;\n        }\n\n        // ファイル名\n        this._wavFileInfo._fileName = filePath;\n\n        try {\n          // シグネチャ \"RIFF\"\n          if (!this._byteReader.getCheckSignature('RIFF')) {\n            ret = false;\n            throw new Error('Cannot find Signeture \"RIFF\".');\n          }\n          // ファイルサイズ-8（読み飛ばし）\n          this._byteReader.get32LittleEndian();\n          // シグネチャ \"WAVE\"\n          if (!this._byteReader.getCheckSignature('WAVE')) {\n            ret = false;\n            throw new Error('Cannot find Signeture \"WAVE\".');\n          }\n          // シグネチャ \"fmt \"\n          if (!this._byteReader.getCheckSignature('fmt ')) {\n            ret = false;\n            throw new Error('Cannot find Signeture \"fmt\".');\n          }\n          // fmtチャンクサイズ\n          const fmtChunkSize = this._byteReader.get32LittleEndian();\n          // フォーマットIDは1（リニアPCM）以外受け付けない\n          if (this._byteReader.get16LittleEndian() != 1) {\n            ret = false;\n            throw new Error('File is not linear PCM.');\n          }\n          // チャンネル数\n          this._wavFileInfo._numberOfChannels =\n            this._byteReader.get16LittleEndian();\n          // サンプリングレート\n          this._wavFileInfo._samplingRate =\n            this._byteReader.get32LittleEndian();\n          // データ速度[byte/sec]（読み飛ばし）\n          this._byteReader.get32LittleEndian();\n          // ブロックサイズ（読み飛ばし）\n          this._byteReader.get16LittleEndian();\n          // 量子化ビット数\n          this._wavFileInfo._bitsPerSample =\n            this._byteReader.get16LittleEndian();\n          // fmtチャンクの拡張部分の読み飛ばし\n          if (fmtChunkSize > 16) {\n            this._byteReader._readOffset += fmtChunkSize - 16;\n          }\n          // \"data\"チャンクが出現するまで読み飛ばし\n          while (\n            !this._byteReader.getCheckSignature('data') &&\n            this._byteReader._readOffset < this._byteReader._fileSize\n          ) {\n            this._byteReader._readOffset +=\n              this._byteReader.get32LittleEndian() + 4;\n          }\n          // ファイル内に\"data\"チャンクが出現しなかった\n          if (this._byteReader._readOffset >= this._byteReader._fileSize) {\n            ret = false;\n            throw new Error('Cannot find \"data\" Chunk.');\n          }\n          // サンプル数\n          {\n            const dataChunkSize = this._byteReader.get32LittleEndian();\n            this._wavFileInfo._samplesPerChannel =\n              (dataChunkSize * 8) /\n              (this._wavFileInfo._bitsPerSample *\n                this._wavFileInfo._numberOfChannels);\n          }\n          // 領域確保\n          this._pcmData = new Array(this._wavFileInfo._numberOfChannels);\n          for (\n            let channelCount = 0;\n            channelCount < this._wavFileInfo._numberOfChannels;\n            channelCount++\n          ) {\n            this._pcmData[channelCount] = new Float32Array(\n              this._wavFileInfo._samplesPerChannel\n            );\n          }\n          // 波形データ取得\n          for (\n            let sampleCount = 0;\n            sampleCount < this._wavFileInfo._samplesPerChannel;\n            sampleCount++\n          ) {\n            for (\n              let channelCount = 0;\n              channelCount < this._wavFileInfo._numberOfChannels;\n              channelCount++\n            ) {\n              this._pcmData[channelCount][sampleCount] = this.getPcmSample();\n            }\n          }\n\n          ret = true;\n\n          resolveValue(ret);\n        } catch (e) {\n          console.log(e);\n        }\n      })().then(() => {\n        resolveValue(ret);\n      });\n    });\n  }\n\n  public getPcmSample(): number {\n    let pcm32;\n\n    // 32ビット幅に拡張してから-1～1の範囲に丸める\n    switch (this._wavFileInfo._bitsPerSample) {\n      case 8:\n        pcm32 = this._byteReader.get8() - 128;\n        pcm32 <<= 24;\n        break;\n      case 16:\n        pcm32 = this._byteReader.get16LittleEndian() << 16;\n        break;\n      case 24:\n        pcm32 = this._byteReader.get24LittleEndian() << 8;\n        break;\n      default:\n        // 対応していないビット幅\n        pcm32 = 0;\n        break;\n    }\n\n    return pcm32 / 2147483647; //Number.MAX_VALUE;\n  }\n\n  /**\n   * 指定したチャンネルから音声サンプルの配列を取得する\n   *\n   * @param usechannel 利用するチャンネル\n   * @return 指定したチャンネルの音声サンプルの配列\n   */\n  public getPcmDataChannel(usechannel: number): Float32Array {\n    // 指定したチャンネル数がデータ用配列の長さより多いならnullを返す。\n    if (!this._pcmData || !(usechannel < this._pcmData.length)) {\n      return null;\n    }\n\n    // _pcmDataから新規に指定したチャンネルのFloat32Arrayを作成する。\n    return Float32Array.from(this._pcmData[usechannel]);\n  }\n\n  /**\n   * 音声のサンプリング周波数を取得する。\n   *\n   * @return 音声のサンプリング周波数\n   */\n  public getWavSamplingRate(): number {\n    if (!this._wavFileInfo || this._wavFileInfo._samplingRate < 1) {\n      return null;\n    }\n\n    return this._wavFileInfo._samplingRate;\n  }\n\n  public releasePcmData(): void {\n    for (\n      let channelCount = 0;\n      channelCount < this._wavFileInfo._numberOfChannels;\n      channelCount++\n    ) {\n      this._pcmData[channelCount] = null;\n    }\n    delete this._pcmData;\n    this._pcmData = null;\n  }\n\n  constructor() {\n    this._pcmData = null;\n    this._userTimeSeconds = 0.0;\n    this._lastRms = 0.0;\n    this._sampleOffset = 0.0;\n    this._wavFileInfo = new WavFileInfo();\n    this._byteReader = new ByteReader();\n  }\n\n  _pcmData: Array<Float32Array>;\n  _userTimeSeconds: number;\n  _lastRms: number;\n  _sampleOffset: number;\n  _wavFileInfo: WavFileInfo;\n  _byteReader: ByteReader;\n  loadFiletoBytes = (arrayBuffer: ArrayBuffer, length: number): void => {\n    this._byteReader._fileByte = arrayBuffer;\n    this._byteReader._fileDataView = new DataView(this._byteReader._fileByte);\n    this._byteReader._fileSize = length;\n  };\n}\n\nexport class WavFileInfo {\n  constructor() {\n    this._fileName = '';\n    this._numberOfChannels = 0;\n    this._bitsPerSample = 0;\n    this._samplingRate = 0;\n    this._samplesPerChannel = 0;\n  }\n\n  _fileName: string; ///< ファイル名\n  _numberOfChannels: number; ///< チャンネル数\n  _bitsPerSample: number; ///< サンプルあたりビット数\n  _samplingRate: number; ///< サンプリングレート\n  _samplesPerChannel: number; ///< 1チャンネルあたり総サンプル数\n}\n\nexport class ByteReader {\n  constructor() {\n    this._fileByte = null;\n    this._fileDataView = null;\n    this._fileSize = 0;\n    this._readOffset = 0;\n  }\n\n  /**\n   * @brief 8ビット読み込み\n   * @return Csm::csmUint8 読み取った8ビット値\n   */\n  public get8(): number {\n    const ret = this._fileDataView.getUint8(this._readOffset);\n    this._readOffset++;\n    return ret;\n  }\n\n  /**\n   * @brief 16ビット読み込み（リトルエンディアン）\n   * @return Csm::csmUint16 読み取った16ビット値\n   */\n  public get16LittleEndian(): number {\n    const ret =\n      (this._fileDataView.getUint8(this._readOffset + 1) << 8) |\n      this._fileDataView.getUint8(this._readOffset);\n    this._readOffset += 2;\n    return ret;\n  }\n\n  /**\n   * @brief 24ビット読み込み（リトルエンディアン）\n   * @return Csm::csmUint32 読み取った24ビット値（下位24ビットに設定）\n   */\n  public get24LittleEndian(): number {\n    const ret =\n      (this._fileDataView.getUint8(this._readOffset + 2) << 16) |\n      (this._fileDataView.getUint8(this._readOffset + 1) << 8) |\n      this._fileDataView.getUint8(this._readOffset);\n    this._readOffset += 3;\n    return ret;\n  }\n\n  /**\n   * @brief 32ビット読み込み（リトルエンディアン）\n   * @return Csm::csmUint32 読み取った32ビット値\n   */\n  public get32LittleEndian(): number {\n    const ret =\n      (this._fileDataView.getUint8(this._readOffset + 3) << 24) |\n      (this._fileDataView.getUint8(this._readOffset + 2) << 16) |\n      (this._fileDataView.getUint8(this._readOffset + 1) << 8) |\n      this._fileDataView.getUint8(this._readOffset);\n    this._readOffset += 4;\n    return ret;\n  }\n\n  /**\n   * @brief シグネチャの取得と参照文字列との一致チェック\n   * @param[in] reference 検査対象のシグネチャ文字列\n   * @return  true    一致している\n   *          false   一致していない\n   */\n  public getCheckSignature(reference: string): boolean {\n    const getSignature: Uint8Array = new Uint8Array(4);\n    const referenceString: Uint8Array = new TextEncoder().encode(reference);\n    if (reference.length != 4) {\n      return false;\n    }\n    for (let signatureOffset = 0; signatureOffset < 4; signatureOffset++) {\n      getSignature[signatureOffset] = this.get8();\n    }\n    return (\n      getSignature[0] == referenceString[0] &&\n      getSignature[1] == referenceString[1] &&\n      getSignature[2] == referenceString[2] &&\n      getSignature[3] == referenceString[3]\n    );\n  }\n\n  _fileByte: ArrayBuffer; ///< ロードしたファイルのバイト列\n  _fileDataView: DataView;\n  _fileSize: number; ///< ファイルサイズ\n  _readOffset: number; ///< ファイル参照位置\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismDefaultParameterId } from '@framework/cubismdefaultparameterid';\nimport { CubismModelSettingJson } from '@framework/cubismmodelsettingjson';\nimport {\n  BreathParameterData,\n  CubismBreath\n} from '@framework/effect/cubismbreath';\nimport { CubismEyeBlink } from '@framework/effect/cubismeyeblink';\nimport { ICubismModelSetting } from '@framework/icubismmodelsetting';\nimport { CubismIdHandle } from '@framework/id/cubismid';\nimport { CubismFramework } from '@framework/live2dcubismframework';\nimport { CubismMatrix44 } from '@framework/math/cubismmatrix44';\nimport { CubismUserModel } from '@framework/model/cubismusermodel';\nimport {\n  ACubismMotion,\n  BeganMotionCallback,\n  FinishedMotionCallback\n} from '@framework/motion/acubismmotion';\nimport { CubismMotion } from '@framework/motion/cubismmotion';\nimport {\n  CubismMotionQueueEntryHandle,\n  InvalidMotionQueueEntryHandleValue\n} from '@framework/motion/cubismmotionqueuemanager';\nimport { csmMap } from '@framework/type/csmmap';\nimport { csmRect } from '@framework/type/csmrectf';\nimport { csmString } from '@framework/type/csmstring';\nimport { csmVector } from '@framework/type/csmvector';\nimport {\n  CSM_ASSERT,\n  CubismLogError,\n  CubismLogInfo\n} from '@framework/utils/cubismdebug';\n\nimport * as LAppDefine from './lappdefine';\nimport { LAppPal } from './lapppal';\nimport { TextureInfo } from './lapptexturemanager';\nimport { LAppWavFileHandler } from './lappwavfilehandler';\nimport { CubismMoc } from '@framework/model/cubismmoc';\nimport { LAppDelegate } from './lappdelegate';\nimport { LAppSubdelegate } from './lappsubdelegate';\n\nenum LoadStep {\n  LoadAssets,\n  LoadModel,\n  WaitLoadModel,\n  LoadExpression,\n  WaitLoadExpression,\n  LoadPhysics,\n  WaitLoadPhysics,\n  LoadPose,\n  WaitLoadPose,\n  SetupEyeBlink,\n  SetupBreath,\n  LoadUserData,\n  WaitLoadUserData,\n  SetupEyeBlinkIds,\n  SetupLipSyncIds,\n  SetupLayout,\n  LoadMotion,\n  WaitLoadMotion,\n  CompleteInitialize,\n  CompleteSetupModel,\n  LoadTexture,\n  WaitLoadTexture,\n  CompleteSetup\n}\n\n/**\n * ユーザーが実際に使用するモデルの実装クラス<br>\n * モデル生成、機能コンポーネント生成、更新処理とレンダリングの呼び出しを行う。\n */\nexport class LAppModel extends CubismUserModel {\n  /**\n   * model3.jsonが置かれたディレクトリとファイルパスからモデルを生成する\n   * @param dir\n   * @param fileName\n   */\n  public loadAssets(dir: string, fileName: string): void {\n    this._modelHomeDir = dir;\n\n    fetch(`${this._modelHomeDir}${fileName}`)\n      .then(response => response.arrayBuffer())\n      .then(arrayBuffer => {\n        const setting: ICubismModelSetting = new CubismModelSettingJson(\n          arrayBuffer,\n          arrayBuffer.byteLength\n        );\n\n        // ステートを更新\n        this._state = LoadStep.LoadModel;\n\n        // 結果を保存\n        this.setupModel(setting);\n      })\n      .catch(error => {\n        // model3.json読み込みでエラーが発生した時点で描画は不可能なので、setupせずエラーをcatchして何もしない\n        CubismLogError(`Failed to load file ${this._modelHomeDir}${fileName}`);\n      });\n  }\n\n  /**\n   * model3.jsonからモデルを生成する。\n   * model3.jsonの記述に従ってモデル生成、モーション、物理演算などのコンポーネント生成を行う。\n   *\n   * @param setting ICubismModelSettingのインスタンス\n   */\n  private setupModel(setting: ICubismModelSetting): void {\n    this._updating = true;\n    this._initialized = false;\n\n    this._modelSetting = setting;\n\n    // CubismModel\n    if (this._modelSetting.getModelFileName() != '') {\n      const modelFileName = this._modelSetting.getModelFileName();\n\n      fetch(`${this._modelHomeDir}${modelFileName}`)\n        .then(response => {\n          if (response.ok) {\n            return response.arrayBuffer();\n          } else if (response.status >= 400) {\n            CubismLogError(\n              `Failed to load file ${this._modelHomeDir}${modelFileName}`\n            );\n            return new ArrayBuffer(0);\n          }\n        })\n        .then(arrayBuffer => {\n          this.loadModel(arrayBuffer, this._mocConsistency);\n          this._state = LoadStep.LoadExpression;\n\n          // callback\n          loadCubismExpression();\n        });\n\n      this._state = LoadStep.WaitLoadModel;\n    } else {\n      LAppPal.printMessage('Model data does not exist.');\n    }\n\n    // Expression\n    const loadCubismExpression = (): void => {\n      if (this._modelSetting.getExpressionCount() > 0) {\n        const count: number = this._modelSetting.getExpressionCount();\n\n        for (let i = 0; i < count; i++) {\n          const expressionName = this._modelSetting.getExpressionName(i);\n          const expressionFileName =\n            this._modelSetting.getExpressionFileName(i);\n\n          fetch(`${this._modelHomeDir}${expressionFileName}`)\n            .then(response => {\n              if (response.ok) {\n                return response.arrayBuffer();\n              } else if (response.status >= 400) {\n                CubismLogError(\n                  `Failed to load file ${this._modelHomeDir}${expressionFileName}`\n                );\n                // ファイルが存在しなくてもresponseはnullを返却しないため、空のArrayBufferで対応する\n                return new ArrayBuffer(0);\n              }\n            })\n            .then(arrayBuffer => {\n              const motion: ACubismMotion = this.loadExpression(\n                arrayBuffer,\n                arrayBuffer.byteLength,\n                expressionName\n              );\n\n              if (this._expressions.getValue(expressionName) != null) {\n                ACubismMotion.delete(\n                  this._expressions.getValue(expressionName)\n                );\n                this._expressions.setValue(expressionName, null);\n              }\n\n              this._expressions.setValue(expressionName, motion);\n\n              this._expressionCount++;\n\n              if (this._expressionCount >= count) {\n                this._state = LoadStep.LoadPhysics;\n\n                // callback\n                loadCubismPhysics();\n              }\n            });\n        }\n        this._state = LoadStep.WaitLoadExpression;\n      } else {\n        this._state = LoadStep.LoadPhysics;\n\n        // callback\n        loadCubismPhysics();\n      }\n    };\n\n    // Physics\n    const loadCubismPhysics = (): void => {\n      if (this._modelSetting.getPhysicsFileName() != '') {\n        const physicsFileName = this._modelSetting.getPhysicsFileName();\n\n        fetch(`${this._modelHomeDir}${physicsFileName}`)\n          .then(response => {\n            if (response.ok) {\n              return response.arrayBuffer();\n            } else if (response.status >= 400) {\n              CubismLogError(\n                `Failed to load file ${this._modelHomeDir}${physicsFileName}`\n              );\n              return new ArrayBuffer(0);\n            }\n          })\n          .then(arrayBuffer => {\n            this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);\n\n            this._state = LoadStep.LoadPose;\n\n            // callback\n            loadCubismPose();\n          });\n        this._state = LoadStep.WaitLoadPhysics;\n      } else {\n        this._state = LoadStep.LoadPose;\n\n        // callback\n        loadCubismPose();\n      }\n    };\n\n    // Pose\n    const loadCubismPose = (): void => {\n      if (this._modelSetting.getPoseFileName() != '') {\n        const poseFileName = this._modelSetting.getPoseFileName();\n\n        fetch(`${this._modelHomeDir}${poseFileName}`)\n          .then(response => {\n            if (response.ok) {\n              return response.arrayBuffer();\n            } else if (response.status >= 400) {\n              CubismLogError(\n                `Failed to load file ${this._modelHomeDir}${poseFileName}`\n              );\n              return new ArrayBuffer(0);\n            }\n          })\n          .then(arrayBuffer => {\n            this.loadPose(arrayBuffer, arrayBuffer.byteLength);\n\n            this._state = LoadStep.SetupEyeBlink;\n\n            // callback\n            setupEyeBlink();\n          });\n        this._state = LoadStep.WaitLoadPose;\n      } else {\n        this._state = LoadStep.SetupEyeBlink;\n\n        // callback\n        setupEyeBlink();\n      }\n    };\n\n    // EyeBlink\n    const setupEyeBlink = (): void => {\n      if (this._modelSetting.getEyeBlinkParameterCount() > 0) {\n        this._eyeBlink = CubismEyeBlink.create(this._modelSetting);\n        this._state = LoadStep.SetupBreath;\n      }\n\n      // callback\n      setupBreath();\n    };\n\n    // Breath\n    const setupBreath = (): void => {\n      this._breath = CubismBreath.create();\n\n      const breathParameters: csmVector<BreathParameterData> = new csmVector();\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(\n          CubismFramework.getIdManager().getId(\n            CubismDefaultParameterId.ParamBreath\n          ),\n          0.5,\n          0.5,\n          3.2345,\n          1\n        )\n      );\n\n      this._breath.setParameters(breathParameters);\n      this._state = LoadStep.LoadUserData;\n\n      // callback\n      loadUserData();\n    };\n\n    // UserData\n    const loadUserData = (): void => {\n      if (this._modelSetting.getUserDataFile() != '') {\n        const userDataFile = this._modelSetting.getUserDataFile();\n\n        fetch(`${this._modelHomeDir}${userDataFile}`)\n          .then(response => {\n            if (response.ok) {\n              return response.arrayBuffer();\n            } else if (response.status >= 400) {\n              CubismLogError(\n                `Failed to load file ${this._modelHomeDir}${userDataFile}`\n              );\n              return new ArrayBuffer(0);\n            }\n          })\n          .then(arrayBuffer => {\n            this.loadUserData(arrayBuffer, arrayBuffer.byteLength);\n\n            this._state = LoadStep.SetupEyeBlinkIds;\n\n            // callback\n            setupEyeBlinkIds();\n          });\n\n        this._state = LoadStep.WaitLoadUserData;\n      } else {\n        this._state = LoadStep.SetupEyeBlinkIds;\n\n        // callback\n        setupEyeBlinkIds();\n      }\n    };\n\n    // EyeBlinkIds\n    const setupEyeBlinkIds = (): void => {\n      const eyeBlinkIdCount: number =\n        this._modelSetting.getEyeBlinkParameterCount();\n\n      for (let i = 0; i < eyeBlinkIdCount; ++i) {\n        this._eyeBlinkIds.pushBack(\n          this._modelSetting.getEyeBlinkParameterId(i)\n        );\n      }\n\n      this._state = LoadStep.SetupLipSyncIds;\n\n      // callback\n      setupLipSyncIds();\n    };\n\n    // LipSyncIds\n    const setupLipSyncIds = (): void => {\n      const lipSyncIdCount = this._modelSetting.getLipSyncParameterCount();\n\n      for (let i = 0; i < lipSyncIdCount; ++i) {\n        this._lipSyncIds.pushBack(this._modelSetting.getLipSyncParameterId(i));\n      }\n      this._state = LoadStep.SetupLayout;\n\n      // callback\n      setupLayout();\n    };\n\n    // Layout\n    const setupLayout = (): void => {\n      const layout: csmMap<string, number> = new csmMap<string, number>();\n\n      if (this._modelSetting == null || this._modelMatrix == null) {\n        CubismLogError('Failed to setupLayout().');\n        return;\n      }\n\n      this._modelSetting.getLayoutMap(layout);\n      this._modelMatrix.setupFromLayout(layout);\n      this._state = LoadStep.LoadMotion;\n\n      // callback\n      loadCubismMotion();\n    };\n\n    // Motion\n    const loadCubismMotion = (): void => {\n      this._state = LoadStep.WaitLoadMotion;\n      this._model.saveParameters();\n      this._allMotionCount = 0;\n      this._motionCount = 0;\n      const group: string[] = [];\n\n      const motionGroupCount: number = this._modelSetting.getMotionGroupCount();\n\n      // モーションの総数を求める\n      for (let i = 0; i < motionGroupCount; i++) {\n        group[i] = this._modelSetting.getMotionGroupName(i);\n        this._allMotionCount += this._modelSetting.getMotionCount(group[i]);\n      }\n\n      // モーションの読み込み\n      for (let i = 0; i < motionGroupCount; i++) {\n        this.preLoadMotionGroup(group[i]);\n      }\n\n      // モーションがない場合\n      if (motionGroupCount == 0) {\n        this._state = LoadStep.LoadTexture;\n\n        // 全てのモーションを停止する\n        this._motionManager.stopAllMotions();\n\n        this._updating = false;\n        this._initialized = true;\n\n        this.createRenderer(\n          this._subdelegate.getCanvas().width,\n          this._subdelegate.getCanvas().height\n        );\n        this.setupTextures();\n        this.getRenderer().startUp(this._subdelegate.getGlManager().getGl());\n      }\n    };\n  }\n\n  /**\n   * テクスチャユニットにテクスチャをロードする\n   */\n  private setupTextures(): void {\n    // iPhoneでのアルファ品質向上のためTypescriptではpremultipliedAlphaを採用\n    const usePremultiply = true;\n\n    if (this._state == LoadStep.LoadTexture) {\n      // テクスチャ読み込み用\n      const textureCount: number = this._modelSetting.getTextureCount();\n\n      for (\n        let modelTextureNumber = 0;\n        modelTextureNumber < textureCount;\n        modelTextureNumber++\n      ) {\n        // テクスチャ名が空文字だった場合はロード・バインド処理をスキップ\n        if (this._modelSetting.getTextureFileName(modelTextureNumber) == '') {\n          console.log('getTextureFileName null');\n          continue;\n        }\n\n        // WebGLのテクスチャユニットにテクスチャをロードする\n        let texturePath =\n          this._modelSetting.getTextureFileName(modelTextureNumber);\n        texturePath = this._modelHomeDir + texturePath;\n\n        // ロード完了時に呼び出すコールバック関数\n        const onLoad = (textureInfo: TextureInfo): void => {\n          this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);\n\n          this._textureCount++;\n\n          if (this._textureCount >= textureCount) {\n            // ロード完了\n            this._state = LoadStep.CompleteSetup;\n          }\n        };\n\n        // 読み込み\n        this._subdelegate\n          .getTextureManager()\n          .createTextureFromPngFile(texturePath, usePremultiply, onLoad);\n        this.getRenderer().setIsPremultipliedAlpha(usePremultiply);\n      }\n\n      this._state = LoadStep.WaitLoadTexture;\n    }\n  }\n\n  /**\n   * レンダラを再構築する\n   */\n  public reloadRenderer(): void {\n    this.deleteRenderer();\n    this.createRenderer(\n      this._subdelegate.getCanvas().width,\n      this._subdelegate.getCanvas().height\n    );\n    this.setupTextures();\n  }\n\n  /**\n   * 更新\n   */\n  public update(): void {\n    if (this._state != LoadStep.CompleteSetup) return;\n\n    const deltaTimeSeconds: number = LAppPal.getDeltaTime();\n    this._userTimeSeconds += deltaTimeSeconds;\n\n    this._dragManager.update(deltaTimeSeconds);\n    this._dragX = this._dragManager.getX();\n    this._dragY = this._dragManager.getY();\n\n    // モーションによるパラメータ更新の有無\n    let motionUpdated = false;\n\n    //--------------------------------------------------------------------------\n    this._model.loadParameters(); // 前回セーブされた状態をロード\n    if (this._motionManager.isFinished()) {\n      // モーションの再生がない場合、待機モーションの中からランダムで再生する\n      this.startRandomMotion(\n        LAppDefine.MotionGroupIdle,\n        LAppDefine.PriorityIdle\n      );\n    } else {\n      motionUpdated = this._motionManager.updateMotion(\n        this._model,\n        deltaTimeSeconds\n      ); // モーションを更新\n    }\n    this._model.saveParameters(); // 状態を保存\n    //--------------------------------------------------------------------------\n\n    // まばたき\n    if (!motionUpdated) {\n      if (this._eyeBlink != null) {\n        // メインモーションの更新がないとき\n        this._eyeBlink.updateParameters(this._model, deltaTimeSeconds); // 目パチ\n      }\n    }\n\n    if (this._expressionManager != null) {\n      this._expressionManager.updateMotion(this._model, deltaTimeSeconds); // 表情でパラメータ更新（相対変化）\n    }\n\n    // ドラッグによる変化\n    // ドラッグによる顔の向きの調整\n    this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30); // -30から30の値を加える\n    this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);\n    this._model.addParameterValueById(\n      this._idParamAngleZ,\n      this._dragX * this._dragY * -30\n    );\n\n    // ドラッグによる体の向きの調整\n    this._model.addParameterValueById(\n      this._idParamBodyAngleX,\n      this._dragX * 10\n    ); // -10から10の値を加える\n\n    // ドラッグによる目の向きの調整\n    this._model.addParameterValueById(this._idParamEyeBallX, this._dragX); // -1から1の値を加える\n    this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);\n\n    // 呼吸など\n    if (this._breath != null) {\n      this._breath.updateParameters(this._model, deltaTimeSeconds);\n    }\n\n    // 物理演算の設定\n    if (this._physics != null) {\n      this._physics.evaluate(this._model, deltaTimeSeconds);\n    }\n\n    // リップシンクの設定\n    if (this._lipsync) {\n      let value = 0.0; // リアルタイムでリップシンクを行う場合、システムから音量を取得して、0~1の範囲で値を入力します。\n\n      this._wavFileHandler.update(deltaTimeSeconds);\n      value = this._wavFileHandler.getRms();\n\n      for (let i = 0; i < this._lipSyncIds.getSize(); ++i) {\n        this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);\n      }\n    }\n\n    // ポーズの設定\n    if (this._pose != null) {\n      this._pose.updateParameters(this._model, deltaTimeSeconds);\n    }\n\n    this._model.update();\n  }\n\n  /**\n   * 引数で指定したモーションの再生を開始する\n   * @param group モーショングループ名\n   * @param no グループ内の番号\n   * @param priority 優先度\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\n   */\n  public startMotion(\n    group: string,\n    no: number,\n    priority: number,\n    onFinishedMotionHandler?: FinishedMotionCallback,\n    onBeganMotionHandler?: BeganMotionCallback\n  ): CubismMotionQueueEntryHandle {\n    if (priority == LAppDefine.PriorityForce) {\n      this._motionManager.setReservePriority(priority);\n    } else if (!this._motionManager.reserveMotion(priority)) {\n      if (this._debugMode) {\n        LAppPal.printMessage(\"[APP]can't start motion.\");\n      }\n      return InvalidMotionQueueEntryHandleValue;\n    }\n\n    const motionFileName = this._modelSetting.getMotionFileName(group, no);\n\n    // ex) idle_0\n    const name = `${group}_${no}`;\n    let motion: CubismMotion = this._motions.getValue(name) as CubismMotion;\n    let autoDelete = false;\n\n    if (motion == null) {\n      fetch(`${this._modelHomeDir}${motionFileName}`)\n        .then(response => {\n          if (response.ok) {\n            return response.arrayBuffer();\n          } else if (response.status >= 400) {\n            CubismLogError(\n              `Failed to load file ${this._modelHomeDir}${motionFileName}`\n            );\n            return new ArrayBuffer(0);\n          }\n        })\n        .then(arrayBuffer => {\n          motion = this.loadMotion(\n            arrayBuffer,\n            arrayBuffer.byteLength,\n            null,\n            onFinishedMotionHandler,\n            onBeganMotionHandler,\n            this._modelSetting,\n            group,\n            no,\n            this._motionConsistency\n          );\n        });\n\n      if (motion) {\n        motion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\n        autoDelete = true; // 終了時にメモリから削除\n      } else {\n        CubismLogError(\"Can't start motion {0} .\", motionFileName);\n        // ロードできなかったモーションのReservePriorityをリセットする\n        this._motionManager.setReservePriority(LAppDefine.PriorityNone);\n        return InvalidMotionQueueEntryHandleValue;\n      }\n    } else {\n      motion.setBeganMotionHandler(onBeganMotionHandler);\n      motion.setFinishedMotionHandler(onFinishedMotionHandler);\n    }\n\n    //voice\n    const voice = this._modelSetting.getMotionSoundFileName(group, no);\n    if (voice.localeCompare('') != 0) {\n      let path = voice;\n      path = this._modelHomeDir + path;\n      this._wavFileHandler.start(path);\n    }\n\n    if (this._debugMode) {\n      LAppPal.printMessage(`[APP]start motion: [${group}_${no}]`);\n    }\n    return this._motionManager.startMotionPriority(\n      motion,\n      autoDelete,\n      priority\n    );\n  }\n\n  /**\n   * ランダムに選ばれたモーションの再生を開始する。\n   * @param group モーショングループ名\n   * @param priority 優先度\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\n   */\n  public startRandomMotion(\n    group: string,\n    priority: number,\n    onFinishedMotionHandler?: FinishedMotionCallback,\n    onBeganMotionHandler?: BeganMotionCallback\n  ): CubismMotionQueueEntryHandle {\n    if (this._modelSetting.getMotionCount(group) == 0) {\n      return InvalidMotionQueueEntryHandleValue;\n    }\n\n    const no: number = Math.floor(\n      Math.random() * this._modelSetting.getMotionCount(group)\n    );\n\n    return this.startMotion(\n      group,\n      no,\n      priority,\n      onFinishedMotionHandler,\n      onBeganMotionHandler\n    );\n  }\n\n  /**\n   * 引数で指定した表情モーションをセットする\n   *\n   * @param expressionId 表情モーションのID\n   */\n  public setExpression(expressionId: string): void {\n    const motion: ACubismMotion = this._expressions.getValue(expressionId);\n\n    if (this._debugMode) {\n      LAppPal.printMessage(`[APP]expression: [${expressionId}]`);\n    }\n\n    if (motion != null) {\n      this._expressionManager.startMotion(motion, false);\n    } else {\n      if (this._debugMode) {\n        LAppPal.printMessage(`[APP]expression[${expressionId}] is null`);\n      }\n    }\n  }\n\n  /**\n   * ランダムに選ばれた表情モーションをセットする\n   */\n  public setRandomExpression(): void {\n    if (this._expressions.getSize() == 0) {\n      return;\n    }\n\n    const no: number = Math.floor(Math.random() * this._expressions.getSize());\n\n    for (let i = 0; i < this._expressions.getSize(); i++) {\n      if (i == no) {\n        const name: string = this._expressions._keyValues[i].first;\n        this.setExpression(name);\n        return;\n      }\n    }\n  }\n\n  /**\n   * イベントの発火を受け取る\n   */\n  public motionEventFired(eventValue: csmString): void {\n    CubismLogInfo('{0} is fired on LAppModel!!', eventValue.s);\n  }\n\n  /**\n   * 当たり判定テスト\n   * 指定ＩＤの頂点リストから矩形を計算し、座標をが矩形範囲内か判定する。\n   *\n   * @param hitArenaName  当たり判定をテストする対象のID\n   * @param x             判定を行うX座標\n   * @param y             判定を行うY座標\n   */\n  public hitTest(hitArenaName: string, x: number, y: number): boolean {\n    // 透明時は当たり判定無し。\n    if (this._opacity < 1) {\n      return false;\n    }\n\n    const count: number = this._modelSetting.getHitAreasCount();\n\n    for (let i = 0; i < count; i++) {\n      if (this._modelSetting.getHitAreaName(i) == hitArenaName) {\n        const drawId: CubismIdHandle = this._modelSetting.getHitAreaId(i);\n        return this.isHit(drawId, x, y);\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * モーションデータをグループ名から一括でロードする。\n   * モーションデータの名前は内部でModelSettingから取得する。\n   *\n   * @param group モーションデータのグループ名\n   */\n  public preLoadMotionGroup(group: string): void {\n    for (let i = 0; i < this._modelSetting.getMotionCount(group); i++) {\n      const motionFileName = this._modelSetting.getMotionFileName(group, i);\n\n      // ex) idle_0\n      const name = `${group}_${i}`;\n      if (this._debugMode) {\n        LAppPal.printMessage(\n          `[APP]load motion: ${motionFileName} => [${name}]`\n        );\n      }\n\n      fetch(`${this._modelHomeDir}${motionFileName}`)\n        .then(response => {\n          if (response.ok) {\n            return response.arrayBuffer();\n          } else if (response.status >= 400) {\n            CubismLogError(\n              `Failed to load file ${this._modelHomeDir}${motionFileName}`\n            );\n            return new ArrayBuffer(0);\n          }\n        })\n        .then(arrayBuffer => {\n          const tmpMotion: CubismMotion = this.loadMotion(\n            arrayBuffer,\n            arrayBuffer.byteLength,\n            name,\n            null,\n            null,\n            this._modelSetting,\n            group,\n            i,\n            this._motionConsistency\n          );\n\n          if (tmpMotion != null) {\n            tmpMotion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\n\n            if (this._motions.getValue(name) != null) {\n              ACubismMotion.delete(this._motions.getValue(name));\n            }\n\n            this._motions.setValue(name, tmpMotion);\n\n            this._motionCount++;\n          } else {\n            // loadMotionできなかった場合はモーションの総数がずれるので1つ減らす\n            this._allMotionCount--;\n          }\n\n          if (this._motionCount >= this._allMotionCount) {\n            this._state = LoadStep.LoadTexture;\n\n            // 全てのモーションを停止する\n            this._motionManager.stopAllMotions();\n\n            this._updating = false;\n            this._initialized = true;\n\n            this.createRenderer(\n              this._subdelegate.getCanvas().width,\n              this._subdelegate.getCanvas().height\n            );\n            this.setupTextures();\n            this.getRenderer().startUp(\n              this._subdelegate.getGlManager().getGl()\n            );\n          }\n        });\n    }\n  }\n\n  /**\n   * すべてのモーションデータを解放する。\n   */\n  public releaseMotions(): void {\n    this._motions.clear();\n  }\n\n  /**\n   * 全ての表情データを解放する。\n   */\n  public releaseExpressions(): void {\n    this._expressions.clear();\n  }\n\n  /**\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\n   */\n  public doDraw(): void {\n    if (this._model == null) return;\n\n    // キャンバスサイズを渡す\n    const canvas = this._subdelegate.getCanvas();\n    const viewport: number[] = [0, 0, canvas.width, canvas.height];\n\n    this.getRenderer().setRenderState(\n      this._subdelegate.getFrameBuffer(),\n      viewport\n    );\n    this.getRenderer().drawModel();\n  }\n\n  /**\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\n   */\n  public draw(matrix: CubismMatrix44): void {\n    if (this._model == null) {\n      return;\n    }\n\n    // 各読み込み終了後\n    if (this._state == LoadStep.CompleteSetup) {\n      matrix.multiplyByMatrix(this._modelMatrix);\n\n      this.getRenderer().setMvpMatrix(matrix);\n\n      this.doDraw();\n    }\n  }\n\n  public async hasMocConsistencyFromFile() {\n    CSM_ASSERT(this._modelSetting.getModelFileName().localeCompare(``));\n\n    // CubismModel\n    if (this._modelSetting.getModelFileName() != '') {\n      const modelFileName = this._modelSetting.getModelFileName();\n\n      const response = await fetch(`${this._modelHomeDir}${modelFileName}`);\n      const arrayBuffer = await response.arrayBuffer();\n\n      this._consistency = CubismMoc.hasMocConsistency(arrayBuffer);\n\n      if (!this._consistency) {\n        CubismLogInfo('Inconsistent MOC3.');\n      } else {\n        CubismLogInfo('Consistent MOC3.');\n      }\n\n      return this._consistency;\n    } else {\n      LAppPal.printMessage('Model data does not exist.');\n    }\n  }\n\n  public setSubdelegate(subdelegate: LAppSubdelegate): void {\n    this._subdelegate = subdelegate;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n\n    this._modelSetting = null;\n    this._modelHomeDir = null;\n    this._userTimeSeconds = 0.0;\n\n    this._eyeBlinkIds = new csmVector<CubismIdHandle>();\n    this._lipSyncIds = new csmVector<CubismIdHandle>();\n\n    this._motions = new csmMap<string, ACubismMotion>();\n    this._expressions = new csmMap<string, ACubismMotion>();\n\n    this._hitArea = new csmVector<csmRect>();\n    this._userArea = new csmVector<csmRect>();\n\n    this._idParamAngleX = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamAngleX\n    );\n    this._idParamAngleY = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamAngleY\n    );\n    this._idParamAngleZ = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamAngleZ\n    );\n    this._idParamEyeBallX = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamEyeBallX\n    );\n    this._idParamEyeBallY = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamEyeBallY\n    );\n    this._idParamBodyAngleX = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamBodyAngleX\n    );\n\n    if (LAppDefine.MOCConsistencyValidationEnable) {\n      this._mocConsistency = true;\n    }\n\n    if (LAppDefine.MotionConsistencyValidationEnable) {\n      this._motionConsistency = true;\n    }\n\n    this._state = LoadStep.LoadAssets;\n    this._expressionCount = 0;\n    this._textureCount = 0;\n    this._motionCount = 0;\n    this._allMotionCount = 0;\n    this._wavFileHandler = new LAppWavFileHandler();\n    this._consistency = false;\n  }\n\n  private _subdelegate: LAppSubdelegate;\n\n  _modelSetting: ICubismModelSetting; // モデルセッティング情報\n  _modelHomeDir: string; // モデルセッティングが置かれたディレクトリ\n  _userTimeSeconds: number; // デルタ時間の積算値[秒]\n\n  _eyeBlinkIds: csmVector<CubismIdHandle>; // モデルに設定された瞬き機能用パラメータID\n  _lipSyncIds: csmVector<CubismIdHandle>; // モデルに設定されたリップシンク機能用パラメータID\n\n  _motions: csmMap<string, ACubismMotion>; // 読み込まれているモーションのリスト\n  _expressions: csmMap<string, ACubismMotion>; // 読み込まれている表情のリスト\n\n  _hitArea: csmVector<csmRect>;\n  _userArea: csmVector<csmRect>;\n\n  _idParamAngleX: CubismIdHandle; // パラメータID: ParamAngleX\n  _idParamAngleY: CubismIdHandle; // パラメータID: ParamAngleY\n  _idParamAngleZ: CubismIdHandle; // パラメータID: ParamAngleZ\n  _idParamEyeBallX: CubismIdHandle; // パラメータID: ParamEyeBallX\n  _idParamEyeBallY: CubismIdHandle; // パラメータID: ParamEyeBAllY\n  _idParamBodyAngleX: CubismIdHandle; // パラメータID: ParamBodyAngleX\n\n  _state: LoadStep; // 現在のステータス管理用\n  _expressionCount: number; // 表情データカウント\n  _textureCount: number; // テクスチャカウント\n  _motionCount: number; // モーションデータカウント\n  _allMotionCount: number; // モーション総数\n  _wavFileHandler: LAppWavFileHandler; //wavファイルハンドラ\n  _consistency: boolean; // MOC3整合性チェック管理用\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMatrix44 } from '@framework/math/cubismmatrix44';\nimport { ACubismMotion } from '@framework/motion/acubismmotion';\nimport { csmVector } from '@framework/type/csmvector';\n\nimport * as LAppDefine from './lappdefine';\nimport { LAppModel } from './lappmodel';\nimport { LAppPal } from './lapppal';\nimport { LAppSubdelegate } from './lappsubdelegate';\n\n/**\n * サンプルアプリケーションにおいてCubismModelを管理するクラス\n * モデル生成と破棄、タップイベントの処理、モデル切り替えを行う。\n */\nexport class LAppLive2DManager {\n  /**\n   * 現在のシーンで保持しているすべてのモデルを解放する\n   */\n  private releaseAllModel(): void {\n    this._models.clear();\n  }\n\n  public setOffscreenSize(width: number, height: number): void {\n    for (let i = 0; i < this._models.getSize(); i++) {\n      const model: LAppModel = this._models.at(i);\n      model?.setRenderTargetSize(width, height);\n    }\n  }\n\n  /**\n   * 画面をドラッグした時の処理\n   *\n   * @param x 画面のX座標\n   * @param y 画面のY座標\n   */\n  public onDrag(x: number, y: number): void {\n    const model: LAppModel = this._models.at(0);\n    if (model) {\n      model.setDragging(x, y);\n    }\n  }\n\n  /**\n   * 画面をタップした時の処理\n   *\n   * @param x 画面のX座標\n   * @param y 画面のY座標\n   */\n  public onTap(x: number, y: number): void {\n    if (LAppDefine.DebugLogEnable) {\n      LAppPal.printMessage(\n        `[APP]tap point: {x: ${x.toFixed(2)} y: ${y.toFixed(2)}}`\n      );\n    }\n\n    const model: LAppModel = this._models.at(0);\n\n    if (model.hitTest(LAppDefine.HitAreaNameHead, x, y)) {\n      if (LAppDefine.DebugLogEnable) {\n        LAppPal.printMessage(`[APP]hit area: [${LAppDefine.HitAreaNameHead}]`);\n      }\n      model.setRandomExpression();\n    } else if (model.hitTest(LAppDefine.HitAreaNameBody, x, y)) {\n      if (LAppDefine.DebugLogEnable) {\n        LAppPal.printMessage(`[APP]hit area: [${LAppDefine.HitAreaNameBody}]`);\n      }\n      model.startRandomMotion(\n        LAppDefine.MotionGroupTapBody,\n        LAppDefine.PriorityNormal,\n        this.finishedMotion,\n        this.beganMotion\n      );\n    }\n  }\n\n  /**\n   * 画面を更新するときの処理\n   * モデルの更新処理及び描画処理を行う\n   */\n  public onUpdate(): void {\n    const { width, height } = this._subdelegate.getCanvas();\n\n    const projection: CubismMatrix44 = new CubismMatrix44();\n    const model: LAppModel = this._models.at(0);\n\n    if (model.getModel()) {\n      if (model.getModel().getCanvasWidth() > 1.0 && width < height) {\n        // 横に長いモデルを縦長ウィンドウに表示する際モデルの横サイズでscaleを算出する\n        model.getModelMatrix().setWidth(2.0);\n        projection.scale(1.0, width / height);\n      } else {\n        projection.scale(height / width, 1.0);\n      }\n\n      // 必要があればここで乗算\n      if (this._viewMatrix != null) {\n        projection.multiplyByMatrix(this._viewMatrix);\n      }\n    }\n\n    model.update();\n    model.draw(projection); // 参照渡しなのでprojectionは変質する。\n  }\n\n  /**\n   * 次のシーンに切りかえる\n   * サンプルアプリケーションではモデルセットの切り替えを行う。\n   */\n  public nextScene(): void {\n    const no: number = (this._sceneIndex + 1) % LAppDefine.ModelDirSize;\n    this.changeScene(no);\n  }\n\n  /**\n   * シーンを切り替える\n   * サンプルアプリケーションではモデルセットの切り替えを行う。\n   * @param index\n   */\n  private changeScene(index: number): void {\n    this._sceneIndex = index;\n\n    if (LAppDefine.DebugLogEnable) {\n      LAppPal.printMessage(`[APP]model index: ${this._sceneIndex}`);\n    }\n\n    // ModelDir[]に保持したディレクトリ名から\n    // model3.jsonのパスを決定する。\n    // ディレクトリ名とmodel3.jsonの名前を一致させておくこと。\n    const model: string = LAppDefine.ModelDir[index];\n    const modelPath: string = LAppDefine.ResourcesPath + model + '/';\n    let modelJsonName: string = LAppDefine.ModelDir[index];\n    modelJsonName += '.model3.json';\n\n    this.releaseAllModel();\n    const instance = new LAppModel();\n    instance.setSubdelegate(this._subdelegate);\n    instance.loadAssets(modelPath, modelJsonName);\n    this._models.pushBack(instance);\n  }\n\n  public setViewMatrix(m: CubismMatrix44) {\n    for (let i = 0; i < 16; i++) {\n      this._viewMatrix.getArray()[i] = m.getArray()[i];\n    }\n  }\n\n  /**\n   * モデルの追加\n   */\n  public addModel(sceneIndex: number = 0): void {\n    this._sceneIndex = sceneIndex;\n    this.changeScene(this._sceneIndex);\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._subdelegate = null;\n    this._viewMatrix = new CubismMatrix44();\n    this._models = new csmVector<LAppModel>();\n    this._sceneIndex = 0;\n  }\n\n  /**\n   * 解放する。\n   */\n  public release(): void {}\n\n  /**\n   * 初期化する。\n   * @param subdelegate\n   */\n  public initialize(subdelegate: LAppSubdelegate): void {\n    this._subdelegate = subdelegate;\n    this.changeScene(this._sceneIndex);\n  }\n\n  /**\n   * 自身が所属するSubdelegate\n   */\n  private _subdelegate: LAppSubdelegate;\n\n  _viewMatrix: CubismMatrix44; // モデル描画に用いるview行列\n  _models: csmVector<LAppModel>; // モデルインスタンスのコンテナ\n  private _sceneIndex: number; // 表示するシーンのインデックス値\n\n  // モーション再生開始のコールバック関数\n  beganMotion = (self: ACubismMotion): void => {\n    LAppPal.printMessage('Motion Began:');\n    console.log(self);\n  };\n  // モーション再生終了のコールバック関数\n  finishedMotion = (self: ACubismMotion): void => {\n    LAppPal.printMessage('Motion Finished:');\n    console.log(self);\n  };\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { csmVector, iterator } from '@framework/type/csmvector';\nimport { LAppGlManager } from './lappglmanager';\n\n/**\n * テクスチャ管理クラス\n * 画像読み込み、管理を行うクラス。\n */\nexport class LAppTextureManager {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._textures = new csmVector<TextureInfo>();\n  }\n\n  /**\n   * 解放する。\n   */\n  public release(): void {\n    for (\n      let ite: iterator<TextureInfo> = this._textures.begin();\n      ite.notEqual(this._textures.end());\n      ite.preIncrement()\n    ) {\n      this._glManager.getGl().deleteTexture(ite.ptr().id);\n    }\n    this._textures = null;\n  }\n\n  /**\n   * 画像読み込み\n   *\n   * @param fileName 読み込む画像ファイルパス名\n   * @param usePremultiply Premult処理を有効にするか\n   * @return 画像情報、読み込み失敗時はnullを返す\n   */\n  public createTextureFromPngFile(\n    fileName: string,\n    usePremultiply: boolean,\n    callback: (textureInfo: TextureInfo) => void\n  ): void {\n    // search loaded texture already\n    for (\n      let ite: iterator<TextureInfo> = this._textures.begin();\n      ite.notEqual(this._textures.end());\n      ite.preIncrement()\n    ) {\n      if (\n        ite.ptr().fileName == fileName &&\n        ite.ptr().usePremultply == usePremultiply\n      ) {\n        // 2回目以降はキャッシュが使用される(待ち時間なし)\n        // WebKitでは同じImageのonloadを再度呼ぶには再インスタンスが必要\n        // 詳細：https://stackoverflow.com/a/5024181\n        ite.ptr().img = new Image();\n        ite\n          .ptr()\n          .img.addEventListener('load', (): void => callback(ite.ptr()), {\n            passive: true\n          });\n        ite.ptr().img.src = fileName;\n        return;\n      }\n    }\n\n    // データのオンロードをトリガーにする\n    const img = new Image();\n    img.addEventListener(\n      'load',\n      (): void => {\n        // テクスチャオブジェクトの作成\n        const tex: WebGLTexture = this._glManager.getGl().createTexture();\n\n        // テクスチャを選択\n        this._glManager\n          .getGl()\n          .bindTexture(this._glManager.getGl().TEXTURE_2D, tex);\n\n        // テクスチャにピクセルを書き込む\n        this._glManager\n          .getGl()\n          .texParameteri(\n            this._glManager.getGl().TEXTURE_2D,\n            this._glManager.getGl().TEXTURE_MIN_FILTER,\n            this._glManager.getGl().LINEAR_MIPMAP_LINEAR\n          );\n        this._glManager\n          .getGl()\n          .texParameteri(\n            this._glManager.getGl().TEXTURE_2D,\n            this._glManager.getGl().TEXTURE_MAG_FILTER,\n            this._glManager.getGl().LINEAR\n          );\n\n        // Premult処理を行わせる\n        if (usePremultiply) {\n          this._glManager\n            .getGl()\n            .pixelStorei(\n              this._glManager.getGl().UNPACK_PREMULTIPLY_ALPHA_WEBGL,\n              1\n            );\n        }\n\n        // テクスチャにピクセルを書き込む\n        this._glManager\n          .getGl()\n          .texImage2D(\n            this._glManager.getGl().TEXTURE_2D,\n            0,\n            this._glManager.getGl().RGBA,\n            this._glManager.getGl().RGBA,\n            this._glManager.getGl().UNSIGNED_BYTE,\n            img\n          );\n\n        // ミップマップを生成\n        this._glManager\n          .getGl()\n          .generateMipmap(this._glManager.getGl().TEXTURE_2D);\n\n        // テクスチャをバインド\n        this._glManager\n          .getGl()\n          .bindTexture(this._glManager.getGl().TEXTURE_2D, null);\n\n        const textureInfo: TextureInfo = new TextureInfo();\n        if (textureInfo != null) {\n          textureInfo.fileName = fileName;\n          textureInfo.width = img.width;\n          textureInfo.height = img.height;\n          textureInfo.id = tex;\n          textureInfo.img = img;\n          textureInfo.usePremultply = usePremultiply;\n          if (this._textures != null) {\n            this._textures.pushBack(textureInfo);\n          }\n        }\n\n        callback(textureInfo);\n      },\n      { passive: true }\n    );\n    img.src = fileName;\n  }\n\n  /**\n   * 画像の解放\n   *\n   * 配列に存在する画像全てを解放する。\n   */\n  public releaseTextures(): void {\n    for (let i = 0; i < this._textures.getSize(); i++) {\n      this._glManager.getGl().deleteTexture(this._textures.at(i).id);\n      this._textures.set(i, null);\n    }\n\n    this._textures.clear();\n  }\n\n  /**\n   * 画像の解放\n   *\n   * 指定したテクスチャの画像を解放する。\n   * @param texture 解放するテクスチャ\n   */\n  public releaseTextureByTexture(texture: WebGLTexture): void {\n    for (let i = 0; i < this._textures.getSize(); i++) {\n      if (this._textures.at(i).id != texture) {\n        continue;\n      }\n\n      this._glManager.getGl().deleteTexture(this._textures.at(i).id);\n      this._textures.set(i, null);\n      this._textures.remove(i);\n      break;\n    }\n  }\n\n  /**\n   * 画像の解放\n   *\n   * 指定した名前の画像を解放する。\n   * @param fileName 解放する画像ファイルパス名\n   */\n  public releaseTextureByFilePath(fileName: string): void {\n    for (let i = 0; i < this._textures.getSize(); i++) {\n      if (this._textures.at(i).fileName == fileName) {\n        this._glManager.getGl().deleteTexture(this._textures.at(i).id);\n        this._textures.set(i, null);\n        this._textures.remove(i);\n        break;\n      }\n    }\n  }\n\n  /**\n   * setter\n   * @param glManager\n   */\n  public setGlManager(glManager: LAppGlManager): void {\n    this._glManager = glManager;\n  }\n\n  _textures: csmVector<TextureInfo>;\n  private _glManager: LAppGlManager;\n}\n\n/**\n * 画像情報構造体\n */\nexport class TextureInfo {\n  img: HTMLImageElement; // 画像\n  id: WebGLTexture = null; // テクスチャ\n  width = 0; // 横幅\n  height = 0; // 高さ\n  usePremultply: boolean; // Premult処理を有効にするか\n  fileName: string; // ファイル名\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMatrix44 } from './cubismmatrix44';\n\n/**\n * カメラの位置変更に使うと便利な4x4行列\n *\n * カメラの位置変更に使うと便利な4x4行列のクラス。\n */\nexport class CubismViewMatrix extends CubismMatrix44 {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n    this._screenLeft = 0.0;\n    this._screenRight = 0.0;\n    this._screenTop = 0.0;\n    this._screenBottom = 0.0;\n    this._maxLeft = 0.0;\n    this._maxRight = 0.0;\n    this._maxTop = 0.0;\n    this._maxBottom = 0.0;\n    this._maxScale = 0.0;\n    this._minScale = 0.0;\n  }\n\n  /**\n   * 移動を調整\n   *\n   * @param x X軸の移動量\n   * @param y Y軸の移動量\n   */\n  public adjustTranslate(x: number, y: number): void {\n    if (this._tr[0] * this._maxLeft + (this._tr[12] + x) > this._screenLeft) {\n      x = this._screenLeft - this._tr[0] * this._maxLeft - this._tr[12];\n    }\n\n    if (this._tr[0] * this._maxRight + (this._tr[12] + x) < this._screenRight) {\n      x = this._screenRight - this._tr[0] * this._maxRight - this._tr[12];\n    }\n\n    if (this._tr[5] * this._maxTop + (this._tr[13] + y) < this._screenTop) {\n      y = this._screenTop - this._tr[5] * this._maxTop - this._tr[13];\n    }\n\n    if (\n      this._tr[5] * this._maxBottom + (this._tr[13] + y) >\n      this._screenBottom\n    ) {\n      y = this._screenBottom - this._tr[5] * this._maxBottom - this._tr[13];\n    }\n\n    const tr1: Float32Array = new Float32Array([\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      x,\n      y,\n      0.0,\n      1.0\n    ]);\n\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\n  }\n\n  /**\n   * 拡大率を調整\n   *\n   * @param cx 拡大を行うX軸の中心位置\n   * @param cy 拡大を行うY軸の中心位置\n   * @param scale 拡大率\n   */\n  public adjustScale(cx: number, cy: number, scale: number): void {\n    const maxScale: number = this.getMaxScale();\n    const minScale: number = this.getMinScale();\n\n    const targetScale = scale * this._tr[0];\n\n    if (targetScale < minScale) {\n      if (this._tr[0] > 0.0) {\n        scale = minScale / this._tr[0];\n      }\n    } else if (targetScale > maxScale) {\n      if (this._tr[0] > 0.0) {\n        scale = maxScale / this._tr[0];\n      }\n    }\n\n    const tr1: Float32Array = new Float32Array([\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      cx,\n      cy,\n      0.0,\n      1.0\n    ]);\n\n    const tr2: Float32Array = new Float32Array([\n      scale,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      scale,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0\n    ]);\n\n    const tr3: Float32Array = new Float32Array([\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      -cx,\n      -cy,\n      0.0,\n      1.0\n    ]);\n\n    CubismMatrix44.multiply(tr3, this._tr, this._tr);\n    CubismMatrix44.multiply(tr2, this._tr, this._tr);\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\n  }\n\n  /**\n   * デバイスに対応する論理座養生の範囲の設定\n   *\n   * @param left      左辺のX軸の位置\n   * @param right     右辺のX軸の位置\n   * @param bottom    下辺のY軸の位置\n   * @param top       上辺のY軸の位置\n   */\n  public setScreenRect(\n    left: number,\n    right: number,\n    bottom: number,\n    top: number\n  ): void {\n    this._screenLeft = left;\n    this._screenRight = right;\n    this._screenBottom = bottom;\n    this._screenTop = top;\n  }\n\n  /**\n   * デバイスに対応する論理座標上の移動可能範囲の設定\n   * @param left      左辺のX軸の位置\n   * @param right     右辺のX軸の位置\n   * @param bottom    下辺のY軸の位置\n   * @param top       上辺のY軸の位置\n   */\n  public setMaxScreenRect(\n    left: number,\n    right: number,\n    bottom: number,\n    top: number\n  ): void {\n    this._maxLeft = left;\n    this._maxRight = right;\n    this._maxTop = top;\n    this._maxBottom = bottom;\n  }\n\n  /**\n   * 最大拡大率の設定\n   * @param maxScale 最大拡大率\n   */\n  public setMaxScale(maxScale: number): void {\n    this._maxScale = maxScale;\n  }\n\n  /**\n   * 最小拡大率の設定\n   * @param minScale 最小拡大率\n   */\n  public setMinScale(minScale: number): void {\n    this._minScale = minScale;\n  }\n\n  /**\n   * 最大拡大率の取得\n   * @return 最大拡大率\n   */\n  public getMaxScale(): number {\n    return this._maxScale;\n  }\n\n  /**\n   * 最小拡大率の取得\n   * @return 最小拡大率\n   */\n  public getMinScale(): number {\n    return this._minScale;\n  }\n\n  /**\n   * 拡大率が最大になっているかを確認する\n   *\n   * @return true 拡大率は最大\n   * @return false 拡大率は最大ではない\n   */\n  public isMaxScale(): boolean {\n    return this.getScaleX() >= this._maxScale;\n  }\n\n  /**\n   * 拡大率が最小になっているかを確認する\n   *\n   * @return true 拡大率は最小\n   * @return false 拡大率は最小ではない\n   */\n  public isMinScale(): boolean {\n    return this.getScaleX() <= this._minScale;\n  }\n\n  /**\n   * デバイスに対応する論理座標の左辺のＸ軸位置を取得する\n   * @return デバイスに対応する論理座標の左辺のX軸位置\n   */\n  public getScreenLeft(): number {\n    return this._screenLeft;\n  }\n\n  /**\n   * デバイスに対応する論理座標の右辺のＸ軸位置を取得する\n   * @return デバイスに対応する論理座標の右辺のX軸位置\n   */\n  public getScreenRight(): number {\n    return this._screenRight;\n  }\n\n  /**\n   * デバイスに対応する論理座標の下辺のY軸位置を取得する\n   * @return デバイスに対応する論理座標の下辺のY軸位置\n   */\n  public getScreenBottom(): number {\n    return this._screenBottom;\n  }\n\n  /**\n   * デバイスに対応する論理座標の上辺のY軸位置を取得する\n   * @return デバイスに対応する論理座標の上辺のY軸位置\n   */\n  public getScreenTop(): number {\n    return this._screenTop;\n  }\n\n  /**\n   * 左辺のX軸位置の最大値の取得\n   * @return 左辺のX軸位置の最大値\n   */\n  public getMaxLeft(): number {\n    return this._maxLeft;\n  }\n\n  /**\n   * 右辺のX軸位置の最大値の取得\n   * @return 右辺のX軸位置の最大値\n   */\n  public getMaxRight(): number {\n    return this._maxRight;\n  }\n\n  /**\n   * 下辺のY軸位置の最大値の取得\n   * @return 下辺のY軸位置の最大値\n   */\n  public getMaxBottom(): number {\n    return this._maxBottom;\n  }\n\n  /**\n   * 上辺のY軸位置の最大値の取得\n   * @return 上辺のY軸位置の最大値\n   */\n  public getMaxTop(): number {\n    return this._maxTop;\n  }\n\n  private _screenLeft: number; // デバイスに対応する論理座標上の範囲（左辺X軸位置）\n  private _screenRight: number; // デバイスに対応する論理座標上の範囲（右辺X軸位置）\n  private _screenTop: number; // デバイスに対応する論理座標上の範囲（上辺Y軸位置）\n  private _screenBottom: number; // デバイスに対応する論理座標上の範囲（下辺Y軸位置）\n  private _maxLeft: number; // 論理座標上の移動可能範囲（左辺X軸位置）\n  private _maxRight: number; // 論理座標上の移動可能範囲（右辺X軸位置）\n  private _maxTop: number; // 論理座標上の移動可能範囲（上辺Y軸位置）\n  private _maxBottom: number; // 論理座標上の移動可能範囲（下辺Y軸位置）\n  private _maxScale: number; // 拡大率の最大値\n  private _minScale: number; // 拡大率の最小値\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismviewmatrix';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismViewMatrix = $.CubismViewMatrix;\n  export type CubismViewMatrix = $.CubismViewMatrix;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { LAppSubdelegate } from './lappsubdelegate';\n\n/**\n * スプライトを実装するクラス\n *\n * テクスチャＩＤ、Rectの管理\n */\nexport class LAppSprite {\n  /**\n   * コンストラクタ\n   * @param x            x座標\n   * @param y            y座標\n   * @param width        横幅\n   * @param height       高さ\n   * @param textureId    テクスチャ\n   */\n  public constructor(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    textureId: WebGLTexture\n  ) {\n    this._rect = new Rect();\n    this._rect.left = x - width * 0.5;\n    this._rect.right = x + width * 0.5;\n    this._rect.up = y + height * 0.5;\n    this._rect.down = y - height * 0.5;\n    this._texture = textureId;\n    this._vertexBuffer = null;\n    this._uvBuffer = null;\n    this._indexBuffer = null;\n\n    this._positionLocation = null;\n    this._uvLocation = null;\n    this._textureLocation = null;\n\n    this._positionArray = null;\n    this._uvArray = null;\n    this._indexArray = null;\n\n    this._firstDraw = true;\n  }\n\n  /**\n   * 解放する。\n   */\n  public release(): void {\n    this._rect = null;\n\n    const gl = this._subdelegate.getGlManager().getGl();\n\n    gl.deleteTexture(this._texture);\n    this._texture = null;\n\n    gl.deleteBuffer(this._uvBuffer);\n    this._uvBuffer = null;\n\n    gl.deleteBuffer(this._vertexBuffer);\n    this._vertexBuffer = null;\n\n    gl.deleteBuffer(this._indexBuffer);\n    this._indexBuffer = null;\n  }\n\n  /**\n   * テクスチャを返す\n   */\n  public getTexture(): WebGLTexture {\n    return this._texture;\n  }\n\n  /**\n   * 描画する。\n   * @param programId シェーダープログラム\n   * @param canvas 描画するキャンパス情報\n   */\n  public render(programId: WebGLProgram): void {\n    if (this._texture == null) {\n      // ロードが完了していない\n      return;\n    }\n\n    const gl = this._subdelegate.getGlManager().getGl();\n\n    // 初回描画時\n    if (this._firstDraw) {\n      // 何番目のattribute変数か取得\n      this._positionLocation = gl.getAttribLocation(programId, 'position');\n      gl.enableVertexAttribArray(this._positionLocation);\n\n      this._uvLocation = gl.getAttribLocation(programId, 'uv');\n      gl.enableVertexAttribArray(this._uvLocation);\n\n      // 何番目のuniform変数か取得\n      this._textureLocation = gl.getUniformLocation(programId, 'texture');\n\n      // uniform属性の登録\n      gl.uniform1i(this._textureLocation, 0);\n\n      // uvバッファ、座標初期化\n      {\n        this._uvArray = new Float32Array([\n          1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0\n        ]);\n\n        // uvバッファを作成\n        this._uvBuffer = gl.createBuffer();\n      }\n\n      // 頂点バッファ、座標初期化\n      {\n        const maxWidth = this._subdelegate.getCanvas().width;\n        const maxHeight = this._subdelegate.getCanvas().height;\n\n        // 頂点データ\n        this._positionArray = new Float32Array([\n          (this._rect.right - maxWidth * 0.5) / (maxWidth * 0.5),\n          (this._rect.up - maxHeight * 0.5) / (maxHeight * 0.5),\n          (this._rect.left - maxWidth * 0.5) / (maxWidth * 0.5),\n          (this._rect.up - maxHeight * 0.5) / (maxHeight * 0.5),\n          (this._rect.left - maxWidth * 0.5) / (maxWidth * 0.5),\n          (this._rect.down - maxHeight * 0.5) / (maxHeight * 0.5),\n          (this._rect.right - maxWidth * 0.5) / (maxWidth * 0.5),\n          (this._rect.down - maxHeight * 0.5) / (maxHeight * 0.5)\n        ]);\n\n        // 頂点バッファを作成\n        this._vertexBuffer = gl.createBuffer();\n      }\n\n      // 頂点インデックスバッファ、初期化\n      {\n        // インデックスデータ\n        this._indexArray = new Uint16Array([0, 1, 2, 3, 2, 0]);\n\n        // インデックスバッファを作成\n        this._indexBuffer = gl.createBuffer();\n      }\n\n      this._firstDraw = false;\n    }\n\n    // UV座標登録\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._uvBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._uvArray, gl.STATIC_DRAW);\n\n    // attribute属性を登録\n    gl.vertexAttribPointer(this._uvLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // 頂点座標を登録\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._positionArray, gl.STATIC_DRAW);\n\n    // attribute属性を登録\n    gl.vertexAttribPointer(this._positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // 頂点インデックスを作成\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._indexArray, gl.DYNAMIC_DRAW);\n\n    // モデルの描画\n    gl.bindTexture(gl.TEXTURE_2D, this._texture);\n    gl.drawElements(\n      gl.TRIANGLES,\n      this._indexArray.length,\n      gl.UNSIGNED_SHORT,\n      0\n    );\n  }\n\n  /**\n   * 当たり判定\n   * @param pointX x座標\n   * @param pointY y座標\n   */\n  public isHit(pointX: number, pointY: number): boolean {\n    // 画面サイズを取得する。\n    const { height } = this._subdelegate.getCanvas();\n\n    // Y座標は変換する必要あり\n    const y = height - pointY;\n\n    return (\n      pointX >= this._rect.left &&\n      pointX <= this._rect.right &&\n      y <= this._rect.up &&\n      y >= this._rect.down\n    );\n  }\n\n  /**\n   * setter\n   * @param subdelegate\n   */\n  public setSubdelegate(subdelegate: LAppSubdelegate): void {\n    this._subdelegate = subdelegate;\n  }\n\n  _texture: WebGLTexture; // テクスチャ\n  _vertexBuffer: WebGLBuffer; // 頂点バッファ\n  _uvBuffer: WebGLBuffer; // uv頂点バッファ\n  _indexBuffer: WebGLBuffer; // 頂点インデックスバッファ\n  _rect: Rect; // 矩形\n\n  _positionLocation: number;\n  _uvLocation: number;\n  _textureLocation: WebGLUniformLocation;\n\n  _positionArray: Float32Array;\n  _uvArray: Float32Array;\n  _indexArray: Uint16Array;\n\n  _firstDraw: boolean;\n\n  private _subdelegate: LAppSubdelegate;\n}\n\nexport class Rect {\n  public left: number; // 左辺\n  public right: number; // 右辺\n  public up: number; // 上辺\n  public down: number; // 下辺\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nexport class TouchManager {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._startX = 0.0;\n    this._startY = 0.0;\n    this._lastX = 0.0;\n    this._lastY = 0.0;\n    this._lastX1 = 0.0;\n    this._lastY1 = 0.0;\n    this._lastX2 = 0.0;\n    this._lastY2 = 0.0;\n    this._lastTouchDistance = 0.0;\n    this._deltaX = 0.0;\n    this._deltaY = 0.0;\n    this._scale = 1.0;\n    this._touchSingle = false;\n    this._flipAvailable = false;\n  }\n\n  public getCenterX(): number {\n    return this._lastX;\n  }\n\n  public getCenterY(): number {\n    return this._lastY;\n  }\n\n  public getDeltaX(): number {\n    return this._deltaX;\n  }\n\n  public getDeltaY(): number {\n    return this._deltaY;\n  }\n\n  public getStartX(): number {\n    return this._startX;\n  }\n\n  public getStartY(): number {\n    return this._startY;\n  }\n\n  public getScale(): number {\n    return this._scale;\n  }\n\n  public getX(): number {\n    return this._lastX;\n  }\n\n  public getY(): number {\n    return this._lastY;\n  }\n\n  public getX1(): number {\n    return this._lastX1;\n  }\n\n  public getY1(): number {\n    return this._lastY1;\n  }\n\n  public getX2(): number {\n    return this._lastX2;\n  }\n\n  public getY2(): number {\n    return this._lastY2;\n  }\n\n  public isSingleTouch(): boolean {\n    return this._touchSingle;\n  }\n\n  public isFlickAvailable(): boolean {\n    return this._flipAvailable;\n  }\n\n  public disableFlick(): void {\n    this._flipAvailable = false;\n  }\n\n  /**\n   * タッチ開始時イベント\n   * @param deviceX タッチした画面のxの値\n   * @param deviceY タッチした画面のyの値\n   */\n  public touchesBegan(deviceX: number, deviceY: number): void {\n    this._lastX = deviceX;\n    this._lastY = deviceY;\n    this._startX = deviceX;\n    this._startY = deviceY;\n    this._lastTouchDistance = -1.0;\n    this._flipAvailable = true;\n    this._touchSingle = true;\n  }\n\n  /**\n   * ドラッグ時のイベント\n   * @param deviceX タッチした画面のxの値\n   * @param deviceY タッチした画面のyの値\n   */\n  public touchesMoved(deviceX: number, deviceY: number): void {\n    this._lastX = deviceX;\n    this._lastY = deviceY;\n    this._lastTouchDistance = -1.0;\n    this._touchSingle = true;\n  }\n\n  /**\n   * フリックの距離測定\n   * @return フリック距離\n   */\n  public getFlickDistance(): number {\n    return this.calculateDistance(\n      this._startX,\n      this._startY,\n      this._lastX,\n      this._lastY\n    );\n  }\n\n  /**\n   * 点１から点２への距離を求める\n   *\n   * @param x1 １つ目のタッチした画面のxの値\n   * @param y1 １つ目のタッチした画面のyの値\n   * @param x2 ２つ目のタッチした画面のxの値\n   * @param y2 ２つ目のタッチした画面のyの値\n   */\n  public calculateDistance(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number\n  ): number {\n    return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n  }\n\n  /**\n   * ２つ目の値から、移動量を求める。\n   * 違う方向の場合は移動量０。同じ方向の場合は、絶対値が小さい方の値を参照する。\n   *\n   * @param v1 １つ目の移動量\n   * @param v2 ２つ目の移動量\n   *\n   * @return 小さい方の移動量\n   */\n  public calculateMovingAmount(v1: number, v2: number): number {\n    if (v1 > 0.0 != v2 > 0.0) {\n      return 0.0;\n    }\n\n    const sign: number = v1 > 0.0 ? 1.0 : -1.0;\n    const absoluteValue1 = Math.abs(v1);\n    const absoluteValue2 = Math.abs(v2);\n    return (\n      sign * (absoluteValue1 < absoluteValue2 ? absoluteValue1 : absoluteValue2)\n    );\n  }\n\n  _startY: number; // タッチを開始した時のxの値\n  _startX: number; // タッチを開始した時のyの値\n  _lastX: number; // シングルタッチ時のxの値\n  _lastY: number; // シングルタッチ時のyの値\n  _lastX1: number; // ダブルタッチ時の一つ目のxの値\n  _lastY1: number; // ダブルタッチ時の一つ目のyの値\n  _lastX2: number; // ダブルタッチ時の二つ目のxの値\n  _lastY2: number; // ダブルタッチ時の二つ目のyの値\n  _lastTouchDistance: number; // 2本以上でタッチしたときの指の距離\n  _deltaX: number; // 前回の値から今回の値へのxの移動距離。\n  _deltaY: number; // 前回の値から今回の値へのyの移動距離。\n  _scale: number; // このフレームで掛け合わせる拡大率。拡大操作中以外は1。\n  _touchSingle: boolean; // シングルタッチ時はtrue\n  _flipAvailable: boolean; // フリップが有効かどうか\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMatrix44 } from '@framework/math/cubismmatrix44';\nimport { CubismViewMatrix } from '@framework/math/cubismviewmatrix';\n\nimport * as LAppDefine from './lappdefine';\nimport { LAppDelegate } from './lappdelegate';\nimport { LAppPal } from './lapppal';\nimport { LAppSprite } from './lappsprite';\nimport { TextureInfo } from './lapptexturemanager';\nimport { TouchManager } from './touchmanager';\nimport { LAppSubdelegate } from './lappsubdelegate';\n\n/**\n * 描画クラス。\n */\nexport class LAppView {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._programId = null;\n    this._back = null;\n    this._gear = null;\n\n    // タッチ関係のイベント管理\n    this._touchManager = new TouchManager();\n\n    // デバイス座標からスクリーン座標に変換するための\n    this._deviceToScreen = new CubismMatrix44();\n\n    // 画面の表示の拡大縮小や移動の変換を行う行列\n    this._viewMatrix = new CubismViewMatrix();\n  }\n\n  /**\n   * 初期化する。\n   */\n  public initialize(subdelegate: LAppSubdelegate): void {\n    this._subdelegate = subdelegate;\n    const { width, height } = subdelegate.getCanvas();\n\n    const ratio: number = width / height;\n    const left: number = -ratio;\n    const right: number = ratio;\n    const bottom: number = LAppDefine.ViewLogicalLeft;\n    const top: number = LAppDefine.ViewLogicalRight;\n\n    this._viewMatrix.setScreenRect(left, right, bottom, top); // デバイスに対応する画面の範囲。 Xの左端、Xの右端、Yの下端、Yの上端\n    this._viewMatrix.scale(LAppDefine.ViewScale, LAppDefine.ViewScale);\n\n    this._deviceToScreen.loadIdentity();\n    if (width > height) {\n      const screenW: number = Math.abs(right - left);\n      this._deviceToScreen.scaleRelative(screenW / width, -screenW / width);\n    } else {\n      const screenH: number = Math.abs(top - bottom);\n      this._deviceToScreen.scaleRelative(screenH / height, -screenH / height);\n    }\n    this._deviceToScreen.translateRelative(-width * 0.5, -height * 0.5);\n\n    // 表示範囲の設定\n    this._viewMatrix.setMaxScale(LAppDefine.ViewMaxScale); // 限界拡張率\n    this._viewMatrix.setMinScale(LAppDefine.ViewMinScale); // 限界縮小率\n\n    // 表示できる最大範囲\n    this._viewMatrix.setMaxScreenRect(\n      LAppDefine.ViewLogicalMaxLeft,\n      LAppDefine.ViewLogicalMaxRight,\n      LAppDefine.ViewLogicalMaxBottom,\n      LAppDefine.ViewLogicalMaxTop\n    );\n  }\n\n  /**\n   * 解放する\n   */\n  public release(): void {\n    this._viewMatrix = null;\n    this._touchManager = null;\n    this._deviceToScreen = null;\n\n    this._gear.release();\n    this._gear = null;\n\n    this._back.release();\n    this._back = null;\n\n    this._subdelegate.getGlManager().getGl().deleteProgram(this._programId);\n    this._programId = null;\n  }\n\n  /**\n   * 描画する。\n   */\n  public render(): void {\n    this._subdelegate.getGlManager().getGl().useProgram(this._programId);\n\n    if (this._back) {\n      this._back.render(this._programId);\n    }\n    if (this._gear) {\n      this._gear.render(this._programId);\n    }\n\n    this._subdelegate.getGlManager().getGl().flush();\n\n    const lapplive2dmanager = this._subdelegate.getLive2DManager();\n    if (lapplive2dmanager != null) {\n      lapplive2dmanager.setViewMatrix(this._viewMatrix);\n\n      lapplive2dmanager.onUpdate();\n    }\n  }\n\n  /**\n   * 画像の初期化を行う。\n   */\n  public initializeSprite(): void {\n    const width: number = this._subdelegate.getCanvas().width;\n    const height: number = this._subdelegate.getCanvas().height;\n    const textureManager = this._subdelegate.getTextureManager();\n    const resourcesPath = LAppDefine.ResourcesPath;\n\n    let imageName = '';\n\n    // 背景画像初期化\n    imageName = LAppDefine.BackImageName;\n\n    // 非同期なのでコールバック関数を作成\n    const initBackGroundTexture = (textureInfo: TextureInfo): void => {\n      const x: number = width * 0.5;\n      const y: number = height * 0.5;\n\n      const fwidth = textureInfo.width * 2.0;\n      const fheight = height * 0.95;\n      this._back = new LAppSprite(x, y, fwidth, fheight, textureInfo.id);\n      this._back.setSubdelegate(this._subdelegate);\n    };\n\n    textureManager.createTextureFromPngFile(\n      resourcesPath + imageName,\n      false,\n      initBackGroundTexture\n    );\n\n    // 歯車画像初期化\n    imageName = LAppDefine.GearImageName;\n    const initGearTexture = (textureInfo: TextureInfo): void => {\n      const x = width - textureInfo.width * 0.5;\n      const y = height - textureInfo.height * 0.5;\n      const fwidth = textureInfo.width;\n      const fheight = textureInfo.height;\n      this._gear = new LAppSprite(x, y, fwidth, fheight, textureInfo.id);\n      this._gear.setSubdelegate(this._subdelegate);\n    };\n\n    textureManager.createTextureFromPngFile(\n      resourcesPath + imageName,\n      false,\n      initGearTexture\n    );\n\n    // シェーダーを作成\n    if (this._programId == null) {\n      this._programId = this._subdelegate.createShader();\n    }\n  }\n\n  /**\n   * タッチされた時に呼ばれる。\n   *\n   * @param pointX スクリーンX座標\n   * @param pointY スクリーンY座標\n   */\n  public onTouchesBegan(pointX: number, pointY: number): void {\n    this._touchManager.touchesBegan(\n      pointX * window.devicePixelRatio,\n      pointY * window.devicePixelRatio\n    );\n  }\n\n  /**\n   * タッチしているときにポインタが動いたら呼ばれる。\n   *\n   * @param pointX スクリーンX座標\n   * @param pointY スクリーンY座標\n   */\n  public onTouchesMoved(pointX: number, pointY: number): void {\n    const posX = pointX * window.devicePixelRatio;\n    const posY = pointY * window.devicePixelRatio;\n\n    const lapplive2dmanager = this._subdelegate.getLive2DManager();\n\n    const viewX: number = this.transformViewX(this._touchManager.getX());\n    const viewY: number = this.transformViewY(this._touchManager.getY());\n\n    this._touchManager.touchesMoved(posX, posY);\n\n    lapplive2dmanager.onDrag(viewX, viewY);\n  }\n\n  /**\n   * タッチが終了したら呼ばれる。\n   *\n   * @param pointX スクリーンX座標\n   * @param pointY スクリーンY座標\n   */\n  public onTouchesEnded(pointX: number, pointY: number): void {\n    const posX = pointX * window.devicePixelRatio;\n    const posY = pointY * window.devicePixelRatio;\n\n    const lapplive2dmanager = this._subdelegate.getLive2DManager();\n\n    // タッチ終了\n    lapplive2dmanager.onDrag(0.0, 0.0);\n\n    // シングルタップ\n    const x: number = this.transformViewX(posX);\n    const y: number = this.transformViewY(posY);\n\n    if (LAppDefine.DebugTouchLogEnable) {\n      LAppPal.printMessage(`[APP]touchesEnded x: ${x} y: ${y}`);\n    }\n    lapplive2dmanager.onTap(x, y);\n\n    // 歯車にタップしたか\n    if (this._gear.isHit(posX, posY)) {\n      lapplive2dmanager.nextScene();\n    }\n  }\n\n  /**\n   * X座標をView座標に変換する。\n   *\n   * @param deviceX デバイスX座標\n   */\n  public transformViewX(deviceX: number): number {\n    const screenX: number = this._deviceToScreen.transformX(deviceX); // 論理座標変換した座標を取得。\n    return this._viewMatrix.invertTransformX(screenX); // 拡大、縮小、移動後の値。\n  }\n\n  /**\n   * Y座標をView座標に変換する。\n   *\n   * @param deviceY デバイスY座標\n   */\n  public transformViewY(deviceY: number): number {\n    const screenY: number = this._deviceToScreen.transformY(deviceY); // 論理座標変換した座標を取得。\n    return this._viewMatrix.invertTransformY(screenY);\n  }\n\n  /**\n   * X座標をScreen座標に変換する。\n   * @param deviceX デバイスX座標\n   */\n  public transformScreenX(deviceX: number): number {\n    return this._deviceToScreen.transformX(deviceX);\n  }\n\n  /**\n   * Y座標をScreen座標に変換する。\n   *\n   * @param deviceY デバイスY座標\n   */\n  public transformScreenY(deviceY: number): number {\n    return this._deviceToScreen.transformY(deviceY);\n  }\n\n  _touchManager: TouchManager; // タッチマネージャー\n  _deviceToScreen: CubismMatrix44; // デバイスからスクリーンへの行列\n  _viewMatrix: CubismViewMatrix; // viewMatrix\n  _programId: WebGLProgram; // シェーダID\n  _back: LAppSprite; // 背景画像\n  _gear: LAppSprite; // ギア画像\n  _changeModel: boolean; // モデル切り替えフラグ\n  _isClick: boolean; // クリック中\n  private _subdelegate: LAppSubdelegate;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport * as LAppDefine from './lappdefine';\nimport { LAppGlManager } from './lappglmanager';\nimport { LAppLive2DManager } from './lapplive2dmanager';\nimport { LAppPal } from './lapppal';\nimport { LAppTextureManager } from './lapptexturemanager';\nimport { LAppView } from './lappview';\n\n/**\n * Canvasに関連する操作を取りまとめるクラス\n */\nexport class LAppSubdelegate {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._canvas = null;\n    this._glManager = new LAppGlManager();\n    this._textureManager = new LAppTextureManager();\n    this._live2dManager = new LAppLive2DManager();\n    this._view = new LAppView();\n    this._frameBuffer = null;\n    this._captured = false;\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    this._resizeObserver.unobserve(this._canvas);\n    this._resizeObserver.disconnect();\n    this._resizeObserver = null;\n\n    this._live2dManager.release();\n    this._live2dManager = null;\n\n    this._view.release();\n    this._view = null;\n\n    this._textureManager.release();\n    this._textureManager = null;\n\n    this._glManager.release();\n    this._glManager = null;\n  }\n\n  /**\n   * APPに必要な物を初期化する。\n   */\n  public initialize(canvas: HTMLCanvasElement): boolean {\n    if (!this._glManager.initialize(canvas)) {\n      return false;\n    }\n\n    this._canvas = canvas;\n\n    if (LAppDefine.CanvasSize === 'auto') {\n      this.resizeCanvas();\n    } else {\n      canvas.width = LAppDefine.CanvasSize.width;\n      canvas.height = LAppDefine.CanvasSize.height;\n    }\n\n    this._textureManager.setGlManager(this._glManager);\n\n    const gl = this._glManager.getGl();\n\n    if (!this._frameBuffer) {\n      this._frameBuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n    }\n\n    // 透過設定\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    // AppViewの初期化\n    this._view.initialize(this);\n\n    // フレームバッファサイズの設定\n    this._live2dManager.setOffscreenSize(\n      this._canvas.width,\n      this._canvas.height\n    );\n\n    this._view.initializeSprite();\n\n    this._live2dManager.initialize(this);\n\n    this._resizeObserver = new ResizeObserver(\n      (entries: ResizeObserverEntry[], observer: ResizeObserver) =>\n        this.resizeObserverCallback.call(this, entries, observer)\n    );\n    this._resizeObserver.observe(this._canvas);\n\n    return true;\n  }\n\n  /**\n   * Resize canvas and re-initialize view.\n   */\n  public onResize(): void {\n    this.resizeCanvas();\n    this._view.initialize(this);\n    this._view.initializeSprite();\n  }\n\n  private resizeObserverCallback(\n    entries: ResizeObserverEntry[],\n    observer: ResizeObserver\n  ): void {\n    if (LAppDefine.CanvasSize === 'auto') {\n      this._needResize = true;\n    }\n  }\n\n  /**\n   * ループ処理\n   */\n  public update(): void {\n    if (this._glManager.getGl().isContextLost()) {\n      return;\n    }\n\n    // キャンバスのサイズが変わっている場合はリサイズに必要な処理をする。\n    if (this._needResize) {\n      this.onResize();\n      this._needResize = false;\n    }\n\n    const gl = this._glManager.getGl();\n\n    // 画面の初期化\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n\n    // 深度テストを有効化\n    gl.enable(gl.DEPTH_TEST);\n\n    // 近くにある物体は、遠くにある物体を覆い隠す\n    gl.depthFunc(gl.LEQUAL);\n\n    // カラーバッファや深度バッファをクリアする\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.clearDepth(1.0);\n\n    // 透過設定\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    // 描画更新\n    this._view.render();\n  }\n\n  /**\n   * シェーダーを登録する。\n   */\n  public createShader(): WebGLProgram {\n    const gl = this._glManager.getGl();\n\n    // バーテックスシェーダーのコンパイル\n    const vertexShaderId = gl.createShader(gl.VERTEX_SHADER);\n\n    if (vertexShaderId == null) {\n      LAppPal.printMessage('failed to create vertexShader');\n      return null;\n    }\n\n    const vertexShader: string =\n      'precision mediump float;' +\n      'attribute vec3 position;' +\n      'attribute vec2 uv;' +\n      'varying vec2 vuv;' +\n      'void main(void)' +\n      '{' +\n      '   gl_Position = vec4(position, 1.0);' +\n      '   vuv = uv;' +\n      '}';\n\n    gl.shaderSource(vertexShaderId, vertexShader);\n    gl.compileShader(vertexShaderId);\n\n    // フラグメントシェーダのコンパイル\n    const fragmentShaderId = gl.createShader(gl.FRAGMENT_SHADER);\n\n    if (fragmentShaderId == null) {\n      LAppPal.printMessage('failed to create fragmentShader');\n      return null;\n    }\n\n    const fragmentShader: string =\n      'precision mediump float;' +\n      'varying vec2 vuv;' +\n      'uniform sampler2D texture;' +\n      'void main(void)' +\n      '{' +\n      '   gl_FragColor = texture2D(texture, vuv);' +\n      '}';\n\n    gl.shaderSource(fragmentShaderId, fragmentShader);\n    gl.compileShader(fragmentShaderId);\n\n    // プログラムオブジェクトの作成\n    const programId = gl.createProgram();\n    gl.attachShader(programId, vertexShaderId);\n    gl.attachShader(programId, fragmentShaderId);\n\n    gl.deleteShader(vertexShaderId);\n    gl.deleteShader(fragmentShaderId);\n\n    // リンク\n    gl.linkProgram(programId);\n    gl.useProgram(programId);\n\n    return programId;\n  }\n\n  public getTextureManager(): LAppTextureManager {\n    return this._textureManager;\n  }\n\n  public getFrameBuffer(): WebGLFramebuffer {\n    return this._frameBuffer;\n  }\n\n  public getCanvas(): HTMLCanvasElement {\n    return this._canvas;\n  }\n\n  public getGlManager(): LAppGlManager {\n    return this._glManager;\n  }\n\n  public getLive2DManager(): LAppLive2DManager {\n    return this._live2dManager;\n  }\n\n  /**\n   * Resize the canvas to fill the screen.\n   */\n  private resizeCanvas(): void {\n    this._canvas.width = this._canvas.clientWidth * window.devicePixelRatio;\n    this._canvas.height = this._canvas.clientHeight * window.devicePixelRatio;\n\n    const gl = this._glManager.getGl();\n\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n\n  /**\n   * マウスダウン、タッチダウンしたときに呼ばれる。\n   */\n  public onPointBegan(pageX: number, pageY: number): void {\n    if (!this._view) {\n      LAppPal.printMessage('view notfound');\n      return;\n    }\n    this._captured = true;\n\n    const localX: number = pageX - this._canvas.offsetLeft;\n    const localY: number = pageY - this._canvas.offsetTop;\n\n    this._view.onTouchesBegan(localX, localY);\n  }\n\n  /**\n   * マウスポインタが動いたら呼ばれる。\n   */\n  public onPointMoved(pageX: number, pageY: number): void {\n    if (!this._captured) {\n      return;\n    }\n\n    const localX: number = pageX - this._canvas.offsetLeft;\n    const localY: number = pageY - this._canvas.offsetTop;\n\n    this._view.onTouchesMoved(localX, localY);\n  }\n\n  /**\n   * クリックが終了したら呼ばれる。\n   */\n  public onPointEnded(pageX: number, pageY: number): void {\n    this._captured = false;\n\n    if (!this._view) {\n      LAppPal.printMessage('view notfound');\n      return;\n    }\n\n    const localX: number = pageX - this._canvas.offsetLeft;\n    const localY: number = pageY - this._canvas.offsetTop;\n\n    this._view.onTouchesEnded(localX, localY);\n  }\n\n  /**\n   * タッチがキャンセルされると呼ばれる。\n   */\n  public onTouchCancel(pageX: number, pageY: number): void {\n    this._captured = false;\n\n    if (!this._view) {\n      LAppPal.printMessage('view notfound');\n      return;\n    }\n\n    const localX: number = pageX - this._canvas.offsetLeft;\n    const localY: number = pageY - this._canvas.offsetTop;\n\n    this._view.onTouchesEnded(localX, localY);\n  }\n\n  public isContextLost(): boolean {\n    return this._glManager.getGl().isContextLost();\n  }\n\n  private _canvas: HTMLCanvasElement;\n\n  /**\n   * View情報\n   */\n  private _view: LAppView;\n\n  /**\n   * テクスチャマネージャー\n   */\n  private _textureManager: LAppTextureManager;\n  private _frameBuffer: WebGLFramebuffer;\n  private _glManager: LAppGlManager;\n  private _live2dManager: LAppLive2DManager;\n\n  /**\n   * ResizeObserver\n   */\n  private _resizeObserver: ResizeObserver;\n\n  /**\n   * クリックしているか\n   */\n  private _captured: boolean;\n\n  private _needResize: boolean;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { csmVector } from '@framework/type/csmvector';\nimport { CubismFramework, Option } from '@framework/live2dcubismframework';\nimport * as LAppDefine from './lappdefine';\nimport { LAppPal } from './lapppal';\nimport { LAppSubdelegate } from './lappsubdelegate';\nimport { CubismLogError } from '@framework/utils/cubismdebug';\n\nexport let s_instance: LAppDelegate = null;\n\n/**\n * アプリケーションクラス。\n * Cubism SDKの管理を行う。\n */\nexport class LAppDelegate {\n  /**\n   * クラスのインスタンス（シングルトン）を返す。\n   * インスタンスが生成されていない場合は内部でインスタンスを生成する。\n   *\n   * @return クラスのインスタンス\n   */\n  public static getInstance(): LAppDelegate {\n    if (s_instance == null) {\n      s_instance = new LAppDelegate();\n    }\n\n    return s_instance;\n  }\n\n  /**\n   * クラスのインスタンス（シングルトン）を解放する。\n   */\n  public static releaseInstance(): void {\n    if (s_instance != null) {\n      s_instance.release();\n    }\n\n    s_instance = null;\n  }\n\n  /**\n   * ポインタがアクティブになるときに呼ばれる。\n   */\n  private onPointerBegan(e: PointerEvent): void {\n    for (\n      let ite = this._subdelegates.begin();\n      ite.notEqual(this._subdelegates.end());\n      ite.preIncrement()\n    ) {\n      ite.ptr().onPointBegan(e.pageX, e.pageY);\n    }\n  }\n\n  /**\n   * ポインタが動いたら呼ばれる。\n   */\n  private onPointerMoved(e: PointerEvent): void {\n    for (\n      let ite = this._subdelegates.begin();\n      ite.notEqual(this._subdelegates.end());\n      ite.preIncrement()\n    ) {\n      ite.ptr().onPointMoved(e.pageX, e.pageY);\n    }\n  }\n\n  /**\n   * ポインタがアクティブでなくなったときに呼ばれる。\n   */\n  private onPointerEnded(e: PointerEvent): void {\n    for (\n      let ite = this._subdelegates.begin();\n      ite.notEqual(this._subdelegates.end());\n      ite.preIncrement()\n    ) {\n      ite.ptr().onPointEnded(e.pageX, e.pageY);\n    }\n  }\n\n  /**\n   * ポインタがキャンセルされると呼ばれる。\n   */\n  private onPointerCancel(e: PointerEvent): void {\n    for (\n      let ite = this._subdelegates.begin();\n      ite.notEqual(this._subdelegates.end());\n      ite.preIncrement()\n    ) {\n      ite.ptr().onTouchCancel(e.pageX, e.pageY);\n    }\n  }\n\n  /**\n   * Resize canvas and re-initialize view.\n   */\n  public onResize(): void {\n    for (let i = 0; i < this._subdelegates.getSize(); i++) {\n      this._subdelegates.at(i).onResize();\n    }\n  }\n\n  /**\n   * 実行処理。\n   */\n  public run(): void {\n    // メインループ\n    const loop = (): void => {\n      // インスタンスの有無の確認\n      if (s_instance == null) {\n        return;\n      }\n\n      // 時間更新\n      LAppPal.updateTime();\n\n      for (let i = 0; i < this._subdelegates.getSize(); i++) {\n        this._subdelegates.at(i).update();\n      }\n\n      // ループのために再帰呼び出し\n      requestAnimationFrame(loop);\n    };\n    loop();\n  }\n\n  /**\n   * 解放する。\n   */\n  private release(): void {\n    this.releaseEventListener();\n    this.releaseSubdelegates();\n\n    // Cubism SDKの解放\n    CubismFramework.dispose();\n\n    this._cubismOption = null;\n  }\n\n  /**\n   * イベントリスナーを解除する。\n   */\n  private releaseEventListener(): void {\n    document.removeEventListener('pointerup', this.pointBeganEventListener);\n    this.pointBeganEventListener = null;\n    document.removeEventListener('pointermove', this.pointMovedEventListener);\n    this.pointMovedEventListener = null;\n    document.removeEventListener('pointerdown', this.pointEndedEventListener);\n    this.pointEndedEventListener = null;\n    document.removeEventListener('pointerdown', this.pointCancelEventListener);\n    this.pointCancelEventListener = null;\n  }\n\n  /**\n   * Subdelegate を解放する\n   */\n  private releaseSubdelegates(): void {\n    for (\n      let ite = this._subdelegates.begin();\n      ite.notEqual(this._subdelegates.end());\n      ite.preIncrement()\n    ) {\n      ite.ptr().release();\n    }\n\n    this._subdelegates.clear();\n    this._subdelegates = null;\n  }\n\n  /**\n   * APPに必要な物を初期化する。\n   */\n  public initialize(): boolean {\n    // Cubism SDKの初期化\n    this.initializeCubism();\n\n    this.initializeSubdelegates();\n    this.initializeEventListener();\n\n    return true;\n  }\n\n  /**\n   * イベントリスナーを設定する。\n   */\n  private initializeEventListener(): void {\n    this.pointBeganEventListener = this.onPointerBegan.bind(this);\n    this.pointMovedEventListener = this.onPointerMoved.bind(this);\n    this.pointEndedEventListener = this.onPointerEnded.bind(this);\n    this.pointCancelEventListener = this.onPointerCancel.bind(this);\n\n    // ポインタ関連コールバック関数登録\n    document.addEventListener('pointerdown', this.pointBeganEventListener, {\n      passive: true\n    });\n    document.addEventListener('pointermove', this.pointMovedEventListener, {\n      passive: true\n    });\n    document.addEventListener('pointerup', this.pointEndedEventListener, {\n      passive: true\n    });\n    document.addEventListener('pointercancel', this.pointCancelEventListener, {\n      passive: true\n    });\n  }\n\n  /**\n   * Cubism SDKの初期化\n   */\n  private initializeCubism(): void {\n    LAppPal.updateTime();\n\n    // setup cubism\n    this._cubismOption.logFunction = LAppPal.printMessage;\n    this._cubismOption.loggingLevel = LAppDefine.CubismLoggingLevel;\n    CubismFramework.startUp(this._cubismOption);\n\n    // initialize cubism\n    CubismFramework.initialize();\n  }\n\n  /**\n   * Canvasを生成配置、Subdelegateを初期化する\n   */\n  private initializeSubdelegates(): void {\n    let width: number = 100;\n    let height: number = 100;\n    if (LAppDefine.CanvasNum > 3) {\n      const widthunit: number = Math.ceil(Math.sqrt(LAppDefine.CanvasNum));\n      const heightUnit = Math.ceil(LAppDefine.CanvasNum / widthunit);\n      width = 100.0 / widthunit;\n      height = 100.0 / heightUnit;\n    } else {\n      width = 100.0 / LAppDefine.CanvasNum;\n    }\n\n    this._canvases.prepareCapacity(LAppDefine.CanvasNum);\n    this._subdelegates.prepareCapacity(LAppDefine.CanvasNum);\n    for (let i = 0; i < LAppDefine.CanvasNum; i++) {\n      const canvas = document.createElement('canvas');\n      this._canvases.pushBack(canvas);\n      canvas.style.width = `${width}vw`;\n      canvas.style.height = `${height}vh`;\n\n      // キャンバスを DOM に追加\n      document.body.appendChild(canvas);\n    }\n\n    for (let i = 0; i < this._canvases.getSize(); i++) {\n      const subdelegate = new LAppSubdelegate();\n      subdelegate.initialize(this._canvases.at(i));\n      this._subdelegates.pushBack(subdelegate);\n    }\n\n    for (let i = 0; i < LAppDefine.CanvasNum; i++) {\n      if (this._subdelegates.at(i).isContextLost()) {\n        CubismLogError(\n          `The context for Canvas at index ${i} was lost, possibly because the acquisition limit for WebGLRenderingContext was reached.`\n        );\n      }\n    }\n  }\n\n  /**\n   * Privateなコンストラクタ\n   */\n  private constructor() {\n    this._cubismOption = new Option();\n    this._subdelegates = new csmVector<LAppSubdelegate>();\n    this._canvases = new csmVector<HTMLCanvasElement>();\n  }\n\n  /**\n   * Cubism SDK Option\n   */\n  private _cubismOption: Option;\n\n  /**\n   * 操作対象のcanvas要素\n   */\n  private _canvases: csmVector<HTMLCanvasElement>;\n\n  /**\n   * Subdelegate\n   */\n  private _subdelegates: csmVector<LAppSubdelegate>;\n\n  /**\n   * 登録済みイベントリスナー 関数オブジェクト\n   */\n  private pointBeganEventListener: (this: Document, ev: PointerEvent) => void;\n\n  /**\n   * 登録済みイベントリスナー 関数オブジェクト\n   */\n  private pointMovedEventListener: (this: Document, ev: PointerEvent) => void;\n\n  /**\n   * 登録済みイベントリスナー 関数オブジェクト\n   */\n  private pointEndedEventListener: (this: Document, ev: PointerEvent) => void;\n\n  /**\n   * 登録済みイベントリスナー 関数オブジェクト\n   */\n  private pointCancelEventListener: (this: Document, ev: PointerEvent) => void;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { LAppDelegate } from './lappdelegate';\nimport * as LAppDefine from './lappdefine';\n\n/**\n * ブラウザロード後の処理\n */\nwindow.addEventListener(\n  'load',\n  (): void => {\n    // Initialize WebGL and create the application instance\n    if (!LAppDelegate.getInstance().initialize()) {\n      return;\n    }\n\n    LAppDelegate.getInstance().run();\n  },\n  { passive: true }\n);\n\n/**\n * 終了時の処理\n */\nwindow.addEventListener(\n  'beforeunload',\n  (): void => LAppDelegate.releaseInstance(),\n  { passive: true }\n);\n"],"names":["_csmVector","initialCapacity","index","value","offset","ret","newSize","i","callPlacementNew","sub","position","begin","end","dstSi","srcSi","srcEi","addCount","addSize","ite","iterator","newVector","csmVector","iterator$1","v","Live2DCubismFramework","$.csmVector","$.iterator","csmString","c","length","s","$.csmString","CubismId","id","$.CubismId","CubismIdManager","ids","result","$.CubismIdManager","CubismVector2","x","y","vector2","scalar","a","rhs","$.CubismVector2","_CubismMath","min","max","cx","isNegativeNumber","left","right","val","degrees","radian","from","to","q1","q2","degree","totalAngle","b","d","ba","ca","da","p","p3","q","discriminant","center","threshold","mp3","mp33","r","t","cosphi","phi","t1","root1","root2","root3","u1","sd","v1","dividend","divisor","absDividend","absDivisor","CubismMath","$.CubismMath","CubismMatrix44","dst","n","j","k","tr","src","tr1","m","r00","r10","r20","r01","r11","r21","r02","r12","r22","tx","ty","tz","det","invDet","inv00","inv01","inv02","inv10","inv11","inv12","inv20","inv21","inv22","cloneMatrix","$.CubismMatrix44","csmRect","w","h","$.csmRect","CubismLogPrint","level","fmt","args","CubismDebug","CubismLogPrintIn","CSM_ASSERT","expr","CubismLogDebug","CubismLogInfo","CubismLogWarning","CubismLogError","LogLevel","logLevel","format","CubismFramework","logPrint","buffer","data","$.CubismDebug","CubismRenderer","renderer","model","matrix44","red","green","blue","alpha","opacity","modelColorRGBA","enable","culling","high","width","height","CubismTextureColor","CubismBlendMode","DrawableObjectType","g","CubismClippingContext","clippingDrawableIndices","clipCount","drawableIndex","offscreenIndex","$.CubismBlendMode","$.CubismRenderer","$.CubismTextureColor","csmPair","key","_csmMap","size","findIndex","found","fitToSize","csmMap","idx","iteold","$.csmMap","$.csmPair","CubismJsonExtension","obj","map","convValue","JsonBoolean","JsonString","JsonFloat","JsonMap","JsonNullvalue","arr","JsonArray","CSM_JSON_ERROR_TYPE_MISMATCH","CSM_JSON_ERROR_INDEX_OF_BOUNDS","Value$2","Value","defaultValue","indent","errorStr","JsonError","CubismJson","json","instance","uint8Array","str","len","parseCallback","endPos","decodeBuffer","strbuf","outEndPos","o","f","afterString","strtod","string","c2","bufStart","localRetEndPos2","ok","FOR_LOOP","FOR_LOOP2","FOR_LOOP3","localRetEndpos2","isStatic","stringBuffer","iter","$.CubismJson","$.JsonArray","$.JsonBoolean","$.JsonError","$.JsonFloat","$.JsonMap","$.JsonNullvalue","$.JsonString","$.Value","endPtr","testC","test","number","s_isStarted","s_isInitialized","s_option","s_cubismIdManager","Constant","csmDelete","address","option","version","major","minor","patch","versionNumber","memorySize","message","Option","$.Constant","$.csmDelete","$.CubismFramework","CanvasNum","ViewScale","ViewMaxScale","ViewMinScale","ViewLogicalLeft","ViewLogicalRight","ViewLogicalMaxLeft","ViewLogicalMaxRight","ViewLogicalMaxBottom","ViewLogicalMaxTop","ResourcesPath","BackImageName","GearImageName","ModelDir","ModelDirSize","MotionGroupIdle","MotionGroupTapBody","HitAreaNameHead","HitAreaNameBody","PriorityNone","PriorityIdle","PriorityNormal","PriorityForce","CubismLoggingLevel","_LAppPal","filePath","callback","response","arrayBuffer","LAppPal","LAppGlManager","canvas","CubismDefaultParameterId","$.CubismDefaultParameterId","ICubismModelSetting","$.ICubismModelSetting","FrequestNode","CubismModelSettingJson","pathArray","arrayLength","textureDirectoryStr","groupName","outLayoutMap","num","refI","node","$.CubismModelSettingJson","$.FrequestNode","CubismBreath","breathParameters","deltaTimeSeconds","BreathParameterData","parameterId","peak","cycle","weight","$.BreathParameterData","$.CubismBreath","_CubismEyeBlink","modelSetting","eyeBlink","blinkingInterval","closing","closed","opening","parameterIds","parameterValue","CubismEyeBlink","EyeState","$.CubismEyeBlink","$.EyeState","Epsilon","DefaultFadeInSeconds","FadeIn","Link","Groups","Id","CubismPose","pose3json","root","poseListInfo","poseCount","poseIndex","idListInfo","idCount","groupCount","groupIndex","partInfo","partData","PartData","linkListInfo","linkCount","linkIndex","linkPart","linkId","pose","beginIndex","partGroupCount","partsIndex","paramIndex","partIndex","linkPartIndex","visiblePartIndex","newOpacity","backOpacityThreshold","a1","clonePartData","$.CubismPose","$.PartData","CubismModelMatrix","scaleX","scaleY","layout","keyWidth","keyHeight","keyX","keyY","keyCenterX","keyCenterY","keyTop","keyBottom","keyLeft","keyRight","$.CubismModelMatrix","FrameRate","CubismTargetPoint","maxV","deltaTimeWeight","frameToMaxSpeed","maxA","dx","dy","vx","vy","ax","ay","curV","$.CubismTargetPoint","ACubismMotion","onBeganMotionHandler","onFinishedMotionHandler","motion","motionQueueEntry","userTimeSeconds","fadeWeight","fadeIn","fadeOut","fadeInSeconds","fadeOutSeconds","offsetSeconds","loop","loopFadeIn","beforeCheckTimeSeconds","motionTimeSeconds","duration","endTime","$.ACubismMotion","ExpressionKeyFadeIn","ExpressionKeyFadeOut","ExpressionKeyParameters","ExpressionKeyId","ExpressionKeyValue","ExpressionKeyBlend","BlendValueAdd","BlendValueMultiply","BlendValueOverwrite","DefaultFadeTime","_CubismExpressionMotion","expression","parameter","expressionParameterValues","expressionIndex","expressionParameterValue","currentParameterValue","expressionParameters","parameterIndex","newAdditiveValue","newMultiplyValue","newOverwriteValue","parameterCount","param","blendType","item","ExpressionParameter","source","destination","CubismExpressionMotion","ExpressionBlendType","$.CubismExpressionMotion","$.ExpressionBlendType","$.ExpressionParameter","CubismMotionQueueEntry","newEndTimeSeconds","startTime","timeSeconds","checkSeconds","$.CubismMotionQueueEntry","CubismMotionQueueManager","autoDelete","InvalidMotionQueueEntryHandleValue","motionQueueEntryNumber","customData","updated","firedList","$.CubismMotionQueueManager","$.InvalidMotionQueueEntryHandleValue","ExpressionParameterValue","CubismExpressionMotionManager","expressionFadeWeight","priority","motions","expressionWeight","difference","expressionMotion","$.CubismExpressionMotionManager","CubismMotionCurveTarget","CubismMotionSegmentType","CubismMotionPoint","CubismMotionSegment","CubismMotionCurve","CubismMotionEvent","CubismMotionData","$.CubismMotionCurve","$.CubismMotionCurveTarget","$.CubismMotionData","$.CubismMotionEvent","$.CubismMotionPoint","$.CubismMotionSegment","$.CubismMotionSegmentType","Meta","Duration","Loop","AreBeziersRestricted","CurveCount","Fps","TotalSegmentCount","TotalPointCount","Curves","Target","FadeInTime","FadeOutTime","Segments","UserData","UserDataCount","TotalUserDataSize","Time","CubismMotionJson","actualCurveListSize","actualTotalSegmentCount","actualTotalPointCount","curvePosition","segmentPosition","flagType","curveIndex","segmentIndex","userDataIndex","EvaluationOptionFlag","$.CubismMotionJson","EffectNameEyeBlink","EffectNameLipSync","TargetNameModel","TargetNameParameter","TargetNamePartOpacity","IdNameOpacity","UseOldBeziersCurveMotion","lerpPoints","linearEvaluate","points","time","bezierEvaluate","p01","p12","p23","p012","p123","bezierEvaluateCardanoInterpretation","x1","x2","cx1","cx2","steppedEvaluate","inverseSteppedEvaluate","evaluateCurve","motionData","isCorrection","curve","target","totalSegmentCount","pointPosition","correctEndPoint","segment","endIndex","motionPoint","CubismMotion","shouldCheckMotionConsistency","timeOffsetSeconds","lipSyncValue","eyeBlinkValue","maxTargetSize","lipSyncFlags","eyeBlinkFlags","tmpFadeIn","tmpFadeOut","curves","sourceValue","fin","fout","paramWeight","motionBehavior","eyeBlinkParameterIds","lipSyncParameterIds","motionJson","areBeziersRestructed","totalPointCount","curveCount","userdatacount","u","debugMode","$.CubismMotion","CubismMotionManager","$.CubismMotionManager","CubismPhysicsTargetType","CubismPhysicsSource","PhysicsJsonEffectiveForces","CubismPhysicsParameter","CubismPhysicsNormalization","CubismPhysicsParticle","CubismPhysicsSubRig","CubismPhysicsInput","CubismPhysicsOutput","CubismPhysicsRig","$.CubismPhysicsInput","$.CubismPhysicsNormalization","$.CubismPhysicsOutput","$.CubismPhysicsParameter","$.CubismPhysicsParticle","$.CubismPhysicsRig","$.CubismPhysicsSource","$.CubismPhysicsSubRig","$.CubismPhysicsTargetType","$.PhysicsJsonEffectiveForces","Position","X","Y","Angle","Type","EffectiveForces","TotalInputCount","TotalOutputCount","PhysicsSettingCount","Gravity","Wind","VertexCount","PhysicsSettings","Normalization","Minimum","Maximum","Default","Reflect","Weight","Input","Source","Output","Scale","VertexIndex","Destination","Vertices","Mobility","Delay","Radius","Acceleration","CubismPhysicsJson","physicsSettingIndex","inputIndex","outputIndex","vertexIndex","$.CubismPhysicsJson","PhysicsTypeTagX","PhysicsTypeTagY","PhysicsTypeTagAngle","AirResistance","MaximumWeight","MovementThreshold","MaxDeltaTime","CubismPhysics","physics","physicsJson","particleIndex","getInputTranslationXFromNormalizedParameterValue","getInputTranslationYFromNormalizedParamterValue","getInputAngleFromNormalizedParameterValue","currentRigOutput","PhysicsOutput","previousRigOutput","getOutputTranslationX","getOutputScaleTranslationX","getOutputTranslationY","getOutputScaleTranslationY","getOutputAngle","getOutputScaleAngle","radAngle","outputValue","totalTranslation","currentSetting","currentInputs","currentOutputs","currentParticles","parameterValues","parameterMaximumValues","parameterMinimumValues","parameterDefaultValues","settingIndex","updateParticlesForStabilization","translation","destinationParameterIndex","outParameterCaches","updateOutputParameterValue","outParamIndex","physicsDeltaTime","inputWeight","updateParticles","outParameterValues","options","Options","strand","radius","sign","targetTranslation","targetAngle","parameterMinimumValue","parameterMaximumValue","parameterDefaultValue","normalizationPosition","normalizationAngle","isInverted","normalizeParameterValue","normalizaitionPosition","particles","parentGravity","getRangeValue","maxValue","minValue","getDefaultValue","translationScale","angleScale","strandCount","windDirection","thresholdValue","airResistance","delay","direction","velocity","force","newDirection","totalRadian","currentGravity","parameterValueMinimum","parameterValueMaximum","output","outputScale","parameterMinimum","parameterMaximum","parameterDefault","normalizedMinimum","normalizedMaximum","normalizedDefault","minNormValue","maxNormValue","middleNormValue","middleValue","paramValue","nLength","pLength","$.CubismPhysics","$.Options","NoParentIndex","NoOffscreenIndex","CubismColorBlend","CubismAlphaBlend","ParameterRepeatData","isOverridden","isParameterRepeated","PartColorData","color","ColorData","CullingData","isCulling","PartChildDrawObjects","drawableIndices","offscreenIndices","CubismModelObjectInfo","objectIndex","objectType","CubismModelPartInfo","objects","childDrawObjects","CubismModel","savedParameterCount","partColors","drawableColors","isRepeat","offscreemIndex","constantFlags","isOverriddenCullings","partId","partCount","valueSize","overValue","drawableId","drawableCount","dynamicFlags","multiplyColors","screenColors","partIds","drawableIds","userCulling","multiplyColor","screenColor","userMultiplyColor","userScreenColor","parentIndex","colorBlendType","alphaBlendType","offscreenCount","parentPartIndex","objectInfo","partInfoIndex","childToChildDrawObjects","$.CubismModel","ColorChannelCount","ClippingMaskMaxCountOnDefault","ClippingMaskMaxCountOnMultiRenderTexture","CubismClippingManager","clippingContextFactory","tmp","renderTextureCount","clippingContext","maskBufferCount","cc","drawableMasks","drawableMaskCounts","count","sameCount","clipId","isRightHanded","usingClipCount","clipIndex","clipContext","allClippedDrawRect","layoutBoundsOnTex01","margin","ppu","maskPixelSize","physicalMaskWidth","physicalMaskHeight","mvp","maskPixel","invertMvp","clippedDrawTotalMinX","clippedDrawTotalMinY","clippedDrawTotalMaxX","clippedDrawTotalMaxY","clippedOffscreenCount","clippedOffscreenChildDrawableIndexList","clippedOffscreenIndex","childDrawableCount","childDrawableIndex","drawableVertexCount","drawableVertexes","minX","minY","maxX","maxY","pi","childDrawableIndexList","ownerIndex","useClippingMaskMaxCount","layoutCountMaxValue","countPerSheetDiv","reduceLayoutTextureCount","divCount","modCount","curClipIndex","renderTextureIndex","channelIndex","layoutCount","checkChannelIndex","xpos","ypos","clippedDrawCount","clippedDrawableIndex","channelNo","CubismRenderTarget_WebGL","gl","previousFramebuffer","restoreFbo","displayBufferWidth","displayBufferHeight","oldOffscreen","parentOffscreenRenderTarget","$.CubismRenderTarget_WebGL","VertShaderSrcCopyPath","FragShaderSrcCopyPath","FragShaderSrcColorBlendPath","FragShaderSrcAlphaBlendPath","VertShaderSrcBlendPath","FragShaderSrcBlendPath","ColorBlendPrefix","AlphaBlendPrefix","s_instance","s_renderTargetVertexArray","s_renderTargetUvArray","s_renderTargetReverseUvArray","CubismShader_WebGL","url","shaderDir","shaderFiles","file","error","colorBlendKeys","colorBlendRawValues","colorBlendKey","blendModeName","colorBlendNumber","alphaBlendKeys","alphaBlendRawValues","alphaBlendKey","alphaBlendNumber","srcColor","dstColor","srcAlpha","dstAlpha","masked","invertedMask","shaderSet","isUsingCompatible","colorBlendMode","alphaBlendMode","srcBuffer","baseShaderSetIndex","vertexArray","uvArray","tex","colorChannel","textureNo","textureId","matrix4x4","baseColor","drawableOpacity","indexArray","offscreen","tex0","offscreenOpacity","tex1","tex2","rect","CubismShaderSet","vertexShaderSrcSetupMask","fragmentShaderSrcsetupMask","vertexShaderSrc","fragmentShaderSrcPremultipliedAlpha","vertexShaderSrcMasked","fragmentShaderSrcMaskPremultipliedAlpha","fragmentShaderSrcMaskInvertedPremultipliedAlpha","vertShaderSrcCopy","fragShaderSrcCopy","copyShaderSet","shaderSetIndex","colorBlendIndex","colorBlendValue","colorBlendMacro","alphablendIndex","alphaBlendValue","alphaBlendMacro","shaderSetBaseIndex","shaderTypeIndex","fragmentShaderStr","clippingMaskMacro","vertexShaderSource","fragmentShaderSource","shaderProgram","vertShader","fragShader","shaderType","shaderSource","shader","log","CubismShaderManager_WebGL","ShaderNames","$.CubismShaderSet","$.CubismShader_WebGL","$.CubismShaderManager_WebGL","$.ShaderNames","s_invalidValue","s_renderTargetIndexArray","CubismClippingManager_WebGL","CubismClippingContext_WebGL","lastFbo","lastViewport","drawObjectType","allClipedDrawRect","maskBuffer","clipDrawCount","clipDrawIndex","manager","CubismRendererProfile_WebGL","enabled","CubismRenderer_WebGL","parentOffscreen","modelTextureNo","glTexture","totalCount","renderOrder","order","rootFbo","indexCount","currentOwnerIndex","targetParentIndex","isParent","currentOffscreenIndex","currentOffscreenOwnerIndex","oldFBO","indexBuffer","fbo","viewport","clip","renderTarget","createSize","offscreenRenderTarget","offscreenMask","$.CubismClippingContext_WebGL","$.CubismClippingManager_WebGL","$.CubismRenderer_WebGL","CubismMoc","mocBytes","shouldCheckMocConsistency","cubismMoc","moc","cubismModel","$.CubismMoc","CubismModelUserDataJson","$.CubismModelUserDataJson","ArtMesh","CubismModelUserDataNode","CubismModelUserData","modelUserData","typeOfArtMesh","nodeCount","addNode","$.CubismModelUserData","$.CubismModelUserDataNode","CubismUserModel","z","name","group","fadeInTime","fadeOutTime","pointX","pointY","drawIndex","vertices","top","bottom","eventValue","caller","$.CubismUserModel","LAppWavFileHandler","WavFileInfo","ByteReader","goalOffset","rms","channelCount","sampleCount","pcm","resolveValue","asyncFileLoad","responce","fmtChunkSize","dataChunkSize","e","pcm32","usechannel","reference","getSignature","referenceString","signatureOffset","LAppModel","dir","fileName","setting","modelFileName","loadCubismExpression","expressionName","expressionFileName","loadCubismPhysics","physicsFileName","loadCubismPose","poseFileName","setupEyeBlink","setupBreath","loadUserData","userDataFile","setupEyeBlinkIds","eyeBlinkIdCount","setupLipSyncIds","lipSyncIdCount","setupLayout","loadCubismMotion","motionGroupCount","textureCount","modelTextureNumber","texturePath","onLoad","textureInfo","motionUpdated","LAppDefine.MotionGroupIdle","LAppDefine.PriorityIdle","no","LAppDefine.PriorityForce","motionFileName","LAppDefine.PriorityNone","voice","path","expressionId","hitArenaName","drawId","tmpMotion","matrix","subdelegate","LAppLive2DManager","self","LAppDefine.HitAreaNameHead","LAppDefine.HitAreaNameBody","LAppDefine.MotionGroupTapBody","LAppDefine.PriorityNormal","projection","LAppDefine.ModelDirSize","LAppDefine.ModelDir","modelPath","LAppDefine.ResourcesPath","modelJsonName","sceneIndex","LAppTextureManager","usePremultiply","img","TextureInfo","texture","glManager","CubismViewMatrix","cy","scale","maxScale","minScale","targetScale","tr2","tr3","$.CubismViewMatrix","LAppSprite","Rect","programId","maxWidth","maxHeight","TouchManager","deviceX","deviceY","y1","y2","v2","absoluteValue1","absoluteValue2","LAppView","ratio","LAppDefine.ViewLogicalLeft","LAppDefine.ViewLogicalRight","LAppDefine.ViewScale","screenW","screenH","LAppDefine.ViewMaxScale","LAppDefine.ViewMinScale","LAppDefine.ViewLogicalMaxLeft","LAppDefine.ViewLogicalMaxRight","LAppDefine.ViewLogicalMaxBottom","LAppDefine.ViewLogicalMaxTop","lapplive2dmanager","textureManager","resourcesPath","imageName","LAppDefine.BackImageName","initBackGroundTexture","fwidth","fheight","LAppDefine.GearImageName","initGearTexture","posX","posY","viewX","viewY","screenX","screenY","LAppSubdelegate","entries","observer","vertexShaderId","fragmentShaderId","pageX","pageY","localX","localY","LAppDelegate","LAppDefine.CubismLoggingLevel","LAppDefine.CanvasNum"],"mappings":"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"}